### YamlMime:UniversalReference
items:
  - uid: azure-servicefabric.ServiceFabricClient
    id: azure-servicefabric.ServiceFabricClient
    name: ServiceFabricClient
    summary: Class representing a ServiceFabricClient.
    fullName: azure-servicefabric.ServiceFabricClient
    type: Class
    children:
      - 'azure-servicefabric.ServiceFabricClient.#ctor'
    langs:
      - js
  - id: 'azure-servicefabric.ServiceFabricClient.#ctor'
    uid: 'azure-servicefabric.ServiceFabricClient.#ctor'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'ServiceFabricClient(baseUri, options)'
    fullName: >-
      azure-servicefabric.ServiceFabricClient.ServiceFabricClient(baseUri,
      options)
    summary: Create a ServiceFabricClient.
    type: Constructor
    syntax:
      parameters:
        - id: baseUri
          type:
            - string
          description: The base URI of the service.
          optional: true
        - id: options
          type:
            - object
          description: The parameter options
          optional: true
        - id: options.filters
          type:
            - Array
          description: Filters to be added to the request pipeline
          optional: true
        - id: options.requestOptions
          type:
            - object
          description: >-
            Options for the underlying request object

            [Options
            doc](https://github.com/request/request#requestoptions-callback)
          optional: true
        - id: options.noRetryPolicy
          type:
            - boolean
          description: 'If set to true, turn off default retry policy'
          optional: true
      content: 'new ServiceFabricClient(baseUri, options)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterManifestWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterManifestWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getClusterManifestWithHttpOperationResponse(options)
    summary: >-
      Get the Service Fabric cluster manifest.


      Get the Service Fabric cluster manifest. The cluster manifest contains

      properties of the cluster that include different node types on the
      cluster,

      security configurations, fault and upgrade domain topologies etc.


      These properties are specified as part of the ClusterConfig.JSON file
      while

      deploying a stand alone cluster. However, most of the information in the

      cluster manifest

      is generated internally by service fabric during cluster deployment in
      other

      deployment scenarios (for e.g when using azuer portal).


      The contents of the cluster manifest are for informational purposes only
      and

      users are not expected to take a dependency on the format of the file

      contents or its interpretation.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterManifestWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterManifest>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ClusterManifest>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getClusterManifestWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getClusterManifest'
    id: 'azure-servicefabric.ServiceFabricClient#getClusterManifest'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getClusterManifest(options, optionalCallback)'
    summary: >-
      Get the Service Fabric cluster manifest.


      Get the Service Fabric cluster manifest. The cluster manifest contains

      properties of the cluster that include different node types on the
      cluster,

      security configurations, fault and upgrade domain topologies etc.


      These properties are specified as part of the ClusterConfig.JSON file
      while

      deploying a stand alone cluster. However, most of the information in the

      cluster manifest

      is generated internally by service fabric during cluster deployment in
      other

      deployment scenarios (for e.g when using azuer portal).


      The contents of the cluster manifest are for informational purposes only
      and

      users are not expected to take a dependency on the format of the file

      contents or its interpretation.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterManifest(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterManifest} - The deserialized result object.'
        value: '{ClusterManifest} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterManifest} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterManifest} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getClusterManifest(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getClusterHealthWithHttpOperationResponse(options)
    summary: |-
      Gets the health of a Service Fabric cluster.

      Gets the health of a Service Fabric cluster.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster based on the health state.
      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection of nodes and applications returned based on their
      aggregated health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ClusterHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.nodesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            node health state objects returned in the result of cluster health
            query

            based on their health state. The possible values for this parameter
            include

            integer value of one of the

            following health states. Only nodes that match the filter are
            returned. All

            nodes are used to evaluate the aggregated health state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of nodes
            with

            HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the application health state objects returned in the result of
            cluster

            health

            query based on their health state.

            The possible values for this parameter include integer value
            obtained from

            members or bitwise operations

            on members of HealthStateFilter enumeration. Only applications that
            match

            the filter are returned.

            All applications are used to evaluate the aggregated health state.
            If not

            specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            applications

            with HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.includeSystemApplicationHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the health statistics should include the
            fabric:/System

            application health statistics. False by default.

            If IncludeSystemApplicationHealthStatistics is set to true, the
            health

            statistics include the entities that belong to the fabric:/System

            application.

            Otherwise, the query result includes health statistics only for user

            applications.

            The health statistics must be included in the query result for this

            parameter to be applied.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getClusterHealthWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getClusterHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getClusterHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getClusterHealth(options, optionalCallback)'
    summary: |-
      Gets the health of a Service Fabric cluster.

      Gets the health of a Service Fabric cluster.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster based on the health state.
      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection of nodes and applications returned based on their
      aggregated health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealth(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterHealth} - The deserialized result object.'
        value: '{ClusterHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.nodesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            node health state objects returned in the result of cluster health
            query

            based on their health state. The possible values for this parameter
            include

            integer value of one of the

            following health states. Only nodes that match the filter are
            returned. All

            nodes are used to evaluate the aggregated health state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of nodes
            with

            HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the application health state objects returned in the result of
            cluster

            health

            query based on their health state.

            The possible values for this parameter include integer value
            obtained from

            members or bitwise operations

            on members of HealthStateFilter enumeration. Only applications that
            match

            the filter are returned.

            All applications are used to evaluate the aggregated health state.
            If not

            specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            applications

            with HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.includeSystemApplicationHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the health statistics should include the
            fabric:/System

            application health statistics. False by default.

            If IncludeSystemApplicationHealthStatistics is set to true, the
            health

            statistics include the entities that belong to the fabric:/System

            application.

            Otherwise, the query result includes health statistics only for user

            applications.

            The health statistics must be included in the query result for this

            parameter to be applied.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getClusterHealth(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getClusterHealthUsingPolicyWithHttpOperationResponse(options)
    summary: |-
      Gets the health of a Service Fabric cluster using the specified
      policy.

      Gets the health of a Service Fabric cluster.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster based on the health state.
      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection of nodes and applications returned based on their
      aggregated health state.
      Use ClusterHealthPolicies to override the health policies used to evaluate
      the health.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthUsingPolicyWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ClusterHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.nodesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            node health state objects returned in the result of cluster health
            query

            based on their health state. The possible values for this parameter
            include

            integer value of one of the

            following health states. Only nodes that match the filter are
            returned. All

            nodes are used to evaluate the aggregated health state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of nodes
            with

            HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the application health state objects returned in the result of
            cluster

            health

            query based on their health state.

            The possible values for this parameter include integer value
            obtained from

            members or bitwise operations

            on members of HealthStateFilter enumeration. Only applications that
            match

            the filter are returned.

            All applications are used to evaluate the aggregated health state.
            If not

            specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            applications

            with HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.includeSystemApplicationHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the health statistics should include the
            fabric:/System

            application health statistics. False by default.

            If IncludeSystemApplicationHealthStatistics is set to true, the
            health

            statistics include the entities that belong to the fabric:/System

            application.

            Otherwise, the query result includes health statistics only for user

            applications.

            The health statistics must be included in the query result for this

            parameter to be applied.
          optional: true
        - id: options.clusterHealthPolicies
          type:
            - object
          description: >-
            Describes the health

            policies used to evaluate the cluster health.

            If not present, the health evaluation uses the cluster health policy
            defined

            in the cluster manifest or the default cluster health policy.

            By default, each application is evaluated using its specific
            application

            health policy, defined in the application manifest, or the default
            health

            policy, if no policy is defined in manifest.

            If the application health policy map is specified, and it has an
            entry for

            an application, the specified application health policy

            is used to evaluate the application health.
          optional: true
        - id: options.clusterHealthPolicies.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.clusterHealthPolicies.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getClusterHealthUsingPolicyWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getClusterHealthUsingPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#getClusterHealthUsingPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getClusterHealthUsingPolicy(options, optionalCallback)'
    summary: |-
      Gets the health of a Service Fabric cluster using the specified
      policy.

      Gets the health of a Service Fabric cluster.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster based on the health state.
      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection of nodes and applications returned based on their
      aggregated health state.
      Use ClusterHealthPolicies to override the health policies used to evaluate
      the health.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterHealth} - The deserialized result object.'
        value: '{ClusterHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.nodesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            node health state objects returned in the result of cluster health
            query

            based on their health state. The possible values for this parameter
            include

            integer value of one of the

            following health states. Only nodes that match the filter are
            returned. All

            nodes are used to evaluate the aggregated health state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of nodes
            with

            HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the application health state objects returned in the result of
            cluster

            health

            query based on their health state.

            The possible values for this parameter include integer value
            obtained from

            members or bitwise operations

            on members of HealthStateFilter enumeration. Only applications that
            match

            the filter are returned.

            All applications are used to evaluate the aggregated health state.
            If not

            specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            applications

            with HealthState value of OK (2) and Warning (4) are returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.includeSystemApplicationHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the health statistics should include the
            fabric:/System

            application health statistics. False by default.

            If IncludeSystemApplicationHealthStatistics is set to true, the
            health

            statistics include the entities that belong to the fabric:/System

            application.

            Otherwise, the query result includes health statistics only for user

            applications.

            The health statistics must be included in the query result for this

            parameter to be applied.
          optional: true
        - id: options.clusterHealthPolicies
          type:
            - object
          description: >-
            Describes the health

            policies used to evaluate the cluster health.

            If not present, the health evaluation uses the cluster health policy
            defined

            in the cluster manifest or the default cluster health policy.

            By default, each application is evaluated using its specific
            application

            health policy, defined in the application manifest, or the default
            health

            policy, if no policy is defined in manifest.

            If the application health policy map is specified, and it has an
            entry for

            an application, the specified application health policy

            is used to evaluate the application health.
          optional: true
        - id: options.clusterHealthPolicies.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.clusterHealthPolicies.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            options.clusterHealthPolicies.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getClusterHealthUsingPolicy(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthChunkWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthChunkWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getClusterHealthChunkWithHttpOperationResponse(options)
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks.


      Gets the health of a Service Fabric cluster using health chunks. Includes

      the aggregated health state of the cluster, but none of the cluster

      entities.

      To expand the cluster health and get the health state of all or some of
      the

      entities, use the POST URI and specify the cluster health chunk query

      description.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthChunkWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterHealthChunk>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ClusterHealthChunk>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getClusterHealthChunkWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getClusterHealthChunk'
    id: 'azure-servicefabric.ServiceFabricClient#getClusterHealthChunk'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getClusterHealthChunk(options, optionalCallback)'
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks.


      Gets the health of a Service Fabric cluster using health chunks. Includes

      the aggregated health state of the cluster, but none of the cluster

      entities.

      To expand the cluster health and get the health state of all or some of
      the

      entities, use the POST URI and specify the cluster health chunk query

      description.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthChunk(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterHealthChunk} - The deserialized result object.'
        value: '{ClusterHealthChunk} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealthChunk} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealthChunk} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getClusterHealthChunk(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithHttpOperationResponse(options)
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks.


      Gets the health of a Service Fabric cluster using health chunks. The
      health

      evaluation is done based on the input cluster health chunk query

      description.

      The query description allows users to specify health policies for
      evaluating

      the cluster and its children.

      Users can specify very flexible filters to select which cluster entities
      to

      return. The selection can be done based on the entities health state and

      based on the hierarchy.

      The query can return multi-level children of the entities based on the

      specified filters. For example, it can return one application with a

      specified name, and for this application, return

      only services that are in Error or Warning, and all partitions and
      replicas

      for one of these services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterHealthChunk>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ClusterHealthChunk>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.clusterHealthChunkQueryDescription
          type:
            - object
          description: >-
            Describes the

            cluster and application health policies used to evaluate the cluster
            health

            and the filters to select which cluster entities to be returned.

            If the cluster health policy is present, it is used to evaluate the
            cluster

            events and the cluster nodes. If not present, the health evaluation
            uses the

            cluster health policy defined in the cluster manifest or the default
            cluster

            health policy.

            By default, each application is evaluated using its specific
            application

            health policy, defined in the application manifest, or the default
            health

            policy, if no policy is defined in manifest.

            If the application health policy map is specified, and it has an
            entry for

            an application, the specified application health policy

            is used to evaluate the application health.

            Users can specify very flexible filters to select which cluster
            entities to

            include in response. The selection can be done based on the entities
            health

            state and based on the hierarchy.

            The query can return multi-level children of the entities based on
            the

            specified filters. For example, it can return one application with a

            specified name, and for this application, return

            only services that are in Error or Warning, and all partitions and
            replicas

            for one of these services.
          optional: true
        - id: options.clusterHealthChunkQueryDescription.nodeFilters
          type:
            - array
          description: >-
            Defines a list of filters that specify which nodes to be included in
            the

            returned cluster health chunk.

            If no filters are specified, no nodes are returned. All the nodes
            are used

            to evaluate the cluster's aggregated health state, regardless of the
            input

            filters.

            The cluster health chunk query may specify multiple node filters.

            For example, it can specify a filter to return all nodes with health
            state

            Error and another filter to always include a node identified by its

            NodeName.
          optional: true
        - id: options.clusterHealthChunkQueryDescription.applicationFilters
          type:
            - array
          description: >-
            Defines a

            list of filters that specify which applications to be included in
            the

            returned cluster health chunk.

            If no filters are specified, no applications are returned. All the

            applications are used to evaluate the cluster's aggregated health
            state,

            regardless of the input filters.

            The cluster health chunk query may specify multiple application
            filters.

            For example, it can specify a filter to return all applications with
            health

            state Error and another filter to always include applications of a
            specified

            application type.
          optional: true
        - id: options.clusterHealthChunkQueryDescription.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.clusterHealthChunkQueryDescription.applicationHealthPolicies
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.applicationHealthPolicies.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithHttpOperationResponse(options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthChunkUsingPolicyAndAdvancedFilters
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterHealthChunkUsingPolicyAndAdvancedFilters
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(options,
      optionalCallback)
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks.


      Gets the health of a Service Fabric cluster using health chunks. The
      health

      evaluation is done based on the input cluster health chunk query

      description.

      The query description allows users to specify health policies for
      evaluating

      the cluster and its children.

      Users can specify very flexible filters to select which cluster entities
      to

      return. The selection can be done based on the entities health state and

      based on the hierarchy.

      The query can return multi-level children of the entities based on the

      specified filters. For example, it can return one application with a

      specified name, and for this application, return

      only services that are in Error or Warning, and all partitions and
      replicas

      for one of these services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterHealthChunk} - The deserialized result object.'
        value: '{ClusterHealthChunk} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealthChunk} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterHealthChunk} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.clusterHealthChunkQueryDescription
          type:
            - object
          description: >-
            Describes the

            cluster and application health policies used to evaluate the cluster
            health

            and the filters to select which cluster entities to be returned.

            If the cluster health policy is present, it is used to evaluate the
            cluster

            events and the cluster nodes. If not present, the health evaluation
            uses the

            cluster health policy defined in the cluster manifest or the default
            cluster

            health policy.

            By default, each application is evaluated using its specific
            application

            health policy, defined in the application manifest, or the default
            health

            policy, if no policy is defined in manifest.

            If the application health policy map is specified, and it has an
            entry for

            an application, the specified application health policy

            is used to evaluate the application health.

            Users can specify very flexible filters to select which cluster
            entities to

            include in response. The selection can be done based on the entities
            health

            state and based on the hierarchy.

            The query can return multi-level children of the entities based on
            the

            specified filters. For example, it can return one application with a

            specified name, and for this application, return

            only services that are in Error or Warning, and all partitions and
            replicas

            for one of these services.
          optional: true
        - id: options.clusterHealthChunkQueryDescription.nodeFilters
          type:
            - array
          description: >-
            Defines a list of filters that specify which nodes to be included in
            the

            returned cluster health chunk.

            If no filters are specified, no nodes are returned. All the nodes
            are used

            to evaluate the cluster's aggregated health state, regardless of the
            input

            filters.

            The cluster health chunk query may specify multiple node filters.

            For example, it can specify a filter to return all nodes with health
            state

            Error and another filter to always include a node identified by its

            NodeName.
          optional: true
        - id: options.clusterHealthChunkQueryDescription.applicationFilters
          type:
            - array
          description: >-
            Defines a

            list of filters that specify which applications to be included in
            the

            returned cluster health chunk.

            If no filters are specified, no applications are returned. All the

            applications are used to evaluate the cluster's aggregated health
            state,

            regardless of the input filters.

            The cluster health chunk query may specify multiple application
            filters.

            For example, it can specify a filter to return all applications with
            health

            state Error and another filter to always include applications of a
            specified

            application type.
          optional: true
        - id: options.clusterHealthChunkQueryDescription.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.clusterHealthChunkQueryDescription.applicationHealthPolicies
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.clusterHealthChunkQueryDescription.applicationHealthPolicies.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportClusterHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportClusterHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'reportClusterHealthWithHttpOperationResponse(healthInformation, options)'
    summary: >-
      Sends a health report on the Service Fabric cluster.


      Sends a health report on a Service Fabric cluster. The report must contain

      the information about the source of the health report and property on
      which

      it is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the

      health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetClusterHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportClusterHealthWithHttpOperationResponse(healthInformation,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function reportClusterHealthWithHttpOperationResponse(healthInformation,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportClusterHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportClusterHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'reportClusterHealth(healthInformation, options, optionalCallback)'
    summary: >-
      Sends a health report on the Service Fabric cluster.


      Sends a health report on a Service Fabric cluster. The report must contain

      the information about the source of the health report and property on
      which

      it is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the

      health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetClusterHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportClusterHealth(healthInformation,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportClusterHealth(healthInformation, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricCodeVersionInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricCodeVersionInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getProvisionedFabricCodeVersionInfoListWithHttpOperationResponse(options)
    summary: |-
      Gets a list of fabric code versions that are provisioned in a
      Service Fabric cluster.

      Gets a list of information about fabric code versions that are provisioned
      in the cluster. The parameter CodeVersion can be used to optionally filter
      the output to only that particular version.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.codeVersion
          type:
            - string
          description: The product version of Service Fabric.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getProvisionedFabricCodeVersionInfoListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricCodeVersionInfoList
    id: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricCodeVersionInfoList
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getProvisionedFabricCodeVersionInfoList(options, optionalCallback)'
    summary: |-
      Gets a list of fabric code versions that are provisioned in a
      Service Fabric cluster.

      Gets a list of information about fabric code versions that are provisioned
      in the cluster. The parameter CodeVersion can be used to optionally filter
      the output to only that particular version.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.codeVersion
          type:
            - string
          description: The product version of Service Fabric.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getProvisionedFabricCodeVersionInfoList(options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricConfigVersionInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricConfigVersionInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getProvisionedFabricConfigVersionInfoListWithHttpOperationResponse(options)
    summary: >-
      Gets a list of fabric config versions that are provisioned in a

      Service Fabric cluster.


      Gets a list of information about fabric config versions that are
      provisioned

      in the cluster. The parameter ConfigVersion can be used to optionally
      filter

      the output to only that particular version.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.configVersion
          type:
            - string
          description: |-
            The config version of Service
            Fabric.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getProvisionedFabricConfigVersionInfoListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricConfigVersionInfoList
    id: >-
      azure-servicefabric.ServiceFabricClient#getProvisionedFabricConfigVersionInfoList
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getProvisionedFabricConfigVersionInfoList(options, optionalCallback)'
    summary: >-
      Gets a list of fabric config versions that are provisioned in a

      Service Fabric cluster.


      Gets a list of information about fabric config versions that are
      provisioned

      in the cluster. The parameter ConfigVersion can be used to optionally
      filter

      the output to only that particular version.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.configVersion
          type:
            - string
          description: |-
            The config version of Service
            Fabric.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getProvisionedFabricConfigVersionInfoList(options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterUpgradeProgressWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterUpgradeProgressWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getClusterUpgradeProgressWithHttpOperationResponse(options)
    summary: >-
      Gets the progress of the current cluster upgrade.


      Gets the current progress of the ongoing cluster upgrade. If no upgrade is

      currently in progress, gets the last state of the previous cluster
      upgrade.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterUpgradeProgressWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterUpgradeProgressObject>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<ClusterUpgradeProgressObject>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getClusterUpgradeProgressWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getClusterUpgradeProgress'
    id: 'azure-servicefabric.ServiceFabricClient#getClusterUpgradeProgress'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getClusterUpgradeProgress(options, optionalCallback)'
    summary: >-
      Gets the progress of the current cluster upgrade.


      Gets the current progress of the ongoing cluster upgrade. If no upgrade is

      currently in progress, gets the last state of the previous cluster
      upgrade.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterUpgradeProgress(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterUpgradeProgressObject} - The deserialized result object.'
        value: '{ClusterUpgradeProgressObject} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterUpgradeProgressObject} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterUpgradeProgressObject} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getClusterUpgradeProgress(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterConfigurationWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterConfigurationWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getClusterConfigurationWithHttpOperationResponse(configurationApiVersion,
      options)
    summary: >-
      Get the Service Fabric standalone cluster configuration.


      Get the Service Fabric standalone cluster configuration. The cluster

      configuration contains properties of the cluster that include different
      node

      types on the cluster,

      security configurations, fault and upgrade domain topologies etc.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterConfigurationWithHttpOperationResponse(configurationApiVersion,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterConfiguration>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<ClusterConfiguration>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: |-
            The API version of the Standalone
            cluster json configuration.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getClusterConfigurationWithHttpOperationResponse(configurationApiVersion,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getClusterConfiguration'
    id: 'azure-servicefabric.ServiceFabricClient#getClusterConfiguration'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getClusterConfiguration(configurationApiVersion, options,
      optionalCallback)
    summary: >-
      Get the Service Fabric standalone cluster configuration.


      Get the Service Fabric standalone cluster configuration. The cluster

      configuration contains properties of the cluster that include different
      node

      types on the cluster,

      security configurations, fault and upgrade domain topologies etc.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterConfiguration(configurationApiVersion,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ClusterConfiguration} - The deserialized result object.'
        value: '{ClusterConfiguration} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterConfiguration} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterConfiguration} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: configurationApiVersion
          type:
            - string
          description: |-
            The API version of the Standalone
            cluster json configuration.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getClusterConfiguration(configurationApiVersion, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterConfigurationUpgradeStatusWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterConfigurationUpgradeStatusWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getClusterConfigurationUpgradeStatusWithHttpOperationResponse(options)
    summary: >-
      Get the cluster configuration upgrade status of a Service Fabric

      standalone cluster.


      Get the cluster configuration upgrade status of a Service Fabric
      standalone

      cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatusWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ClusterConfigurationUpgradeStatusInfo>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<ClusterConfigurationUpgradeStatusInfo>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getClusterConfigurationUpgradeStatusWithHttpOperationResponse(options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getClusterConfigurationUpgradeStatus
    id: >-
      azure-servicefabric.ServiceFabricClient#getClusterConfigurationUpgradeStatus
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getClusterConfigurationUpgradeStatus(options, optionalCallback)'
    summary: >-
      Get the cluster configuration upgrade status of a Service Fabric

      standalone cluster.


      Get the cluster configuration upgrade status of a Service Fabric
      standalone

      cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {ClusterConfigurationUpgradeStatusInfo} - The deserialized result
          object.
        value: >-
          {ClusterConfigurationUpgradeStatusInfo} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterConfigurationUpgradeStatusInfo} for
                               more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ClusterConfigurationUpgradeStatusInfo} for
                               more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getClusterConfigurationUpgradeStatus(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#provisionClusterWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#provisionClusterWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      provisionClusterWithHttpOperationResponse(provisionFabricDescription,
      options)
    summary: |-
      Provision the code or configuration packages of a Service Fabric
      cluster.

      Validate and provision the code or configuration packages of a Service
      Fabric cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.provisionClusterWithHttpOperationResponse(provisionFabricDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: provisionFabricDescription
          type:
            - object
          description: |-
            Describes the parameters for
            provisioning a cluster.
        - id: provisionFabricDescription.codeFilePath
          type:
            - string
          description: |-
            The cluster code
            package file path.
          optional: true
        - id: provisionFabricDescription.clusterManifestFilePath
          type:
            - string
          description: |-
            The
            cluster manifest file path.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        provisionClusterWithHttpOperationResponse(provisionFabricDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#provisionCluster'
    id: 'azure-servicefabric.ServiceFabricClient#provisionCluster'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'provisionCluster(provisionFabricDescription, options, optionalCallback)'
    summary: |-
      Provision the code or configuration packages of a Service Fabric
      cluster.

      Validate and provision the code or configuration packages of a Service
      Fabric cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.provisionCluster(provisionFabricDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: provisionFabricDescription
          type:
            - object
          description: |-
            Describes the parameters for
            provisioning a cluster.
        - id: provisionFabricDescription.codeFilePath
          type:
            - string
          description: |-
            The cluster code
            package file path.
          optional: true
        - id: provisionFabricDescription.clusterManifestFilePath
          type:
            - string
          description: |-
            The
            cluster manifest file path.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function provisionCluster(provisionFabricDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#unprovisionClusterWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#unprovisionClusterWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      unprovisionClusterWithHttpOperationResponse(unprovisionFabricDescription,
      options)
    summary: >-
      Unprovision the code or configuration packages of a Service Fabric

      cluster.


      Unprovision the code or configuration packages of a Service Fabric
      cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.unprovisionClusterWithHttpOperationResponse(unprovisionFabricDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: unprovisionFabricDescription
          type:
            - object
          description: |-
            Describes the parameters for
            unprovisioning a cluster.
        - id: unprovisionFabricDescription.codeVersion
          type:
            - string
          description: |-
            The cluster code
            package version.
          optional: true
        - id: unprovisionFabricDescription.configVersion
          type:
            - string
          description: |-
            The cluster
            manifest version.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        unprovisionClusterWithHttpOperationResponse(unprovisionFabricDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#unprovisionCluster'
    id: 'azure-servicefabric.ServiceFabricClient#unprovisionCluster'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      unprovisionCluster(unprovisionFabricDescription, options,
      optionalCallback)
    summary: >-
      Unprovision the code or configuration packages of a Service Fabric

      cluster.


      Unprovision the code or configuration packages of a Service Fabric
      cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.unprovisionCluster(unprovisionFabricDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: unprovisionFabricDescription
          type:
            - object
          description: |-
            Describes the parameters for
            unprovisioning a cluster.
        - id: unprovisionFabricDescription.codeVersion
          type:
            - string
          description: |-
            The cluster code
            package version.
          optional: true
        - id: unprovisionFabricDescription.configVersion
          type:
            - string
          description: |-
            The cluster
            manifest version.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function unprovisionCluster(unprovisionFabricDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#rollbackClusterUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#rollbackClusterUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: rollbackClusterUpgradeWithHttpOperationResponse(options)
    summary: |-
      Rollback the upgrade of a Service Fabric cluster.

      Rollback the upgrade of a Service Fabric cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.rollbackClusterUpgradeWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function rollbackClusterUpgradeWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#rollbackClusterUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#rollbackClusterUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'rollbackClusterUpgrade(options, optionalCallback)'
    summary: |-
      Rollback the upgrade of a Service Fabric cluster.

      Rollback the upgrade of a Service Fabric cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.rollbackClusterUpgrade(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function rollbackClusterUpgrade(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#resumeClusterUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#resumeClusterUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      resumeClusterUpgradeWithHttpOperationResponse(resumeClusterUpgradeDescription,
      options)
    summary: |-
      Make the cluster upgrade move on to the next upgrade domain.

      Make the cluster upgrade move on to the next upgrade domain.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resumeClusterUpgradeWithHttpOperationResponse(resumeClusterUpgradeDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - object
          description: |-
            Describes the parameters for
            resuming a cluster upgrade.
        - id: resumeClusterUpgradeDescription.upgradeDomain
          type:
            - string
          description: |-
            The next
            upgrade domain for this cluster upgrade.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        resumeClusterUpgradeWithHttpOperationResponse(resumeClusterUpgradeDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#resumeClusterUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#resumeClusterUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      resumeClusterUpgrade(resumeClusterUpgradeDescription, options,
      optionalCallback)
    summary: |-
      Make the cluster upgrade move on to the next upgrade domain.

      Make the cluster upgrade move on to the next upgrade domain.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resumeClusterUpgrade(resumeClusterUpgradeDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resumeClusterUpgradeDescription
          type:
            - object
          description: |-
            Describes the parameters for
            resuming a cluster upgrade.
        - id: resumeClusterUpgradeDescription.upgradeDomain
          type:
            - string
          description: |-
            The next
            upgrade domain for this cluster upgrade.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startClusterUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startClusterUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startClusterUpgradeWithHttpOperationResponse(startClusterUpgradeDescription,
      options)
    summary: |-
      Start upgrading the code or configuration version of a Service
      Fabric cluster.

      Validate the supplied upgrade parameters and start upgrading the code or
      configuration version of a Service Fabric cluster if the parameters are
      valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startClusterUpgradeWithHttpOperationResponse(startClusterUpgradeDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - object
          description: |-
            Describes the parameters for
            starting a cluster upgrade.
        - id: startClusterUpgradeDescription.codeVersion
          type:
            - string
          description: |-
            The cluster
            code version.
          optional: true
        - id: startClusterUpgradeDescription.configVersion
          type:
            - string
          description: |-
            The cluster
            configuration version.
          optional: true
        - id: startClusterUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible values
            include: 'Invalid', 'Rolling'
          optional: true
        - id: startClusterUpgradeDescription.rollingUpgradeMode
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual',
            'Monitored'
          optional: true
        - id: >-
            startClusterUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds
          type:
            - number
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.monitoringPolicy
          type:
            - object
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.monitoringPolicy.failureAction
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rollback', 'Manual'
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.enableDeltaHealthEvaluation
          type:
            - boolean
          description: >-
            When true,

            enables delta health evaluation rather than absolute health
            evaluation after

            completion of each upgrade domain.
          optional: true
        - id: startClusterUpgradeDescription.clusterUpgradeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of nodes health degradation allowed
            during

            cluster upgrades. The delta is measured between the state of the
            nodes at

            the beginning of upgrade and the state of the nodes at the time of
            the

            health evaluation. The check is performed after every upgrade domain
            upgrade

            completion to make sure the global state of the cluster is within
            tolerated

            limits. The default value is 10%.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of upgrade domain nodes health
            degradation

            allowed during cluster upgrades. The delta is measured between the
            state of

            the upgrade domain nodes at the beginning of upgrade and the state
            of the

            upgrade domain nodes at the time of the health evaluation. The check
            is

            performed after every upgrade domain upgrade completion for all
            completed

            upgrade domains to make sure the state of the upgrade domains is
            within

            tolerated limits. The default value is 15%.
          optional: true
        - id: startClusterUpgradeDescription.applicationHealthPolicyMap
          type:
            - object
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.applicationHealthPolicyMap.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        startClusterUpgradeWithHttpOperationResponse(startClusterUpgradeDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startClusterUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#startClusterUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startClusterUpgrade(startClusterUpgradeDescription, options,
      optionalCallback)
    summary: |-
      Start upgrading the code or configuration version of a Service
      Fabric cluster.

      Validate the supplied upgrade parameters and start upgrading the code or
      configuration version of a Service Fabric cluster if the parameters are
      valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startClusterUpgrade(startClusterUpgradeDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: startClusterUpgradeDescription
          type:
            - object
          description: |-
            Describes the parameters for
            starting a cluster upgrade.
        - id: startClusterUpgradeDescription.codeVersion
          type:
            - string
          description: |-
            The cluster
            code version.
          optional: true
        - id: startClusterUpgradeDescription.configVersion
          type:
            - string
          description: |-
            The cluster
            configuration version.
          optional: true
        - id: startClusterUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible values
            include: 'Invalid', 'Rolling'
          optional: true
        - id: startClusterUpgradeDescription.rollingUpgradeMode
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual',
            'Monitored'
          optional: true
        - id: >-
            startClusterUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds
          type:
            - number
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.monitoringPolicy
          type:
            - object
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.monitoringPolicy.failureAction
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rollback', 'Manual'
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: startClusterUpgradeDescription.enableDeltaHealthEvaluation
          type:
            - boolean
          description: >-
            When true,

            enables delta health evaluation rather than absolute health
            evaluation after

            completion of each upgrade domain.
          optional: true
        - id: startClusterUpgradeDescription.clusterUpgradeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of nodes health degradation allowed
            during

            cluster upgrades. The delta is measured between the state of the
            nodes at

            the beginning of upgrade and the state of the nodes at the time of
            the

            health evaluation. The check is performed after every upgrade domain
            upgrade

            completion to make sure the global state of the cluster is within
            tolerated

            limits. The default value is 10%.
          optional: true
        - id: >-
            startClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of upgrade domain nodes health
            degradation

            allowed during cluster upgrades. The delta is measured between the
            state of

            the upgrade domain nodes at the beginning of upgrade and the state
            of the

            upgrade domain nodes at the time of the health evaluation. The check
            is

            performed after every upgrade domain upgrade completion for all
            completed

            upgrade domains to make sure the state of the upgrade domains is
            within

            tolerated limits. The default value is 15%.
          optional: true
        - id: startClusterUpgradeDescription.applicationHealthPolicyMap
          type:
            - object
          description: ''
          optional: true
        - id: >-
            startClusterUpgradeDescription.applicationHealthPolicyMap.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startClusterConfigurationUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startClusterConfigurationUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startClusterConfigurationUpgradeWithHttpOperationResponse(clusterConfigurationUpgradeDescription,
      options)
    summary: |-
      Start upgrading the configuration of a Service Fabric standalone
      cluster.

      Validate the supplied configuration upgrade parameters and start upgrading
      the cluster configuration if the parameters are valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startClusterConfigurationUpgradeWithHttpOperationResponse(clusterConfigurationUpgradeDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - object
          description: |-
            Parameters for a
            standalone cluster configuration upgrade.
        - id: clusterConfigurationUpgradeDescription.clusterConfig
          type:
            - string
          description: |-
            The
            cluster configuration.
        - id: clusterConfigurationUpgradeDescription.healthCheckRetryTimeout
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The length

            of time between attempts to perform a health checks if the
            application or

            cluster is not healthy.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.healthCheckWaitDurationInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: |-
            The length of time to wait after completing an upgrade domain before
            starting the health checks process.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.healthCheckStableDurationInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The length of time that the application or cluster must remain
            healthy.
          optional: true
        - id: clusterConfigurationUpgradeDescription.upgradeDomainTimeoutInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: |-
            The
            timeout for the upgrade domain.
          optional: true
        - id: clusterConfigurationUpgradeDescription.upgradeTimeoutInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: |-
            The upgrade
            timeout.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy applications during the
            upgrade.

            Allowed values are integer values from zero to 100.
          optional: true
        - id: clusterConfigurationUpgradeDescription.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy nodes during the upgrade.
            Allowed

            values are integer values from zero to 100.
          optional: true
        - id: clusterConfigurationUpgradeDescription.maxPercentDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The

            maximum allowed percentage of delta health degradation during the
            upgrade.

            Allowed values are integer values from zero to 100.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.maxPercentUpgradeDomainDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of upgrade domain delta health
            degradation

            during the upgrade. Allowed values are integer values from zero to
            100.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        startClusterConfigurationUpgradeWithHttpOperationResponse(clusterConfigurationUpgradeDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startClusterConfigurationUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#startClusterConfigurationUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription,
      options, optionalCallback)
    summary: |-
      Start upgrading the configuration of a Service Fabric standalone
      cluster.

      Validate the supplied configuration upgrade parameters and start upgrading
      the cluster configuration if the parameters are valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type:
            - object
          description: |-
            Parameters for a
            standalone cluster configuration upgrade.
        - id: clusterConfigurationUpgradeDescription.clusterConfig
          type:
            - string
          description: |-
            The
            cluster configuration.
        - id: clusterConfigurationUpgradeDescription.healthCheckRetryTimeout
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The length

            of time between attempts to perform a health checks if the
            application or

            cluster is not healthy.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.healthCheckWaitDurationInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: |-
            The length of time to wait after completing an upgrade domain before
            starting the health checks process.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.healthCheckStableDurationInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The length of time that the application or cluster must remain
            healthy.
          optional: true
        - id: clusterConfigurationUpgradeDescription.upgradeDomainTimeoutInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: |-
            The
            timeout for the upgrade domain.
          optional: true
        - id: clusterConfigurationUpgradeDescription.upgradeTimeoutInSeconds
          type:
            - azure-servicefabric.moment.duration
          description: |-
            The upgrade
            timeout.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy applications during the
            upgrade.

            Allowed values are integer values from zero to 100.
          optional: true
        - id: clusterConfigurationUpgradeDescription.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy nodes during the upgrade.
            Allowed

            values are integer values from zero to 100.
          optional: true
        - id: clusterConfigurationUpgradeDescription.maxPercentDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The

            maximum allowed percentage of delta health degradation during the
            upgrade.

            Allowed values are integer values from zero to 100.
          optional: true
        - id: >-
            clusterConfigurationUpgradeDescription.maxPercentUpgradeDomainDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of upgrade domain delta health
            degradation

            during the upgrade. Allowed values are integer values from zero to
            100.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#updateClusterUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#updateClusterUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateClusterUpgradeWithHttpOperationResponse(updateClusterUpgradeDescription,
      options)
    summary: |-
      Update the upgrade parameters of a Service Fabric cluster upgrade.

      Update the upgrade parameters of a Service Fabric cluster upgrade.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateClusterUpgradeWithHttpOperationResponse(updateClusterUpgradeDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - object
          description: |-
            Parameters for updating a
            cluster upgrade.
        - id: updateClusterUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rolling', 'Rolling_ForceRestart'
          optional: true
        - id: updateClusterUpgradeDescription.updateDescription
          type:
            - object
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.updateDescription.rollingUpgradeMode
          type:
            - string
          description: >-
            Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual',

            'Monitored'
        - id: updateClusterUpgradeDescription.updateDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.replicaSetCheckTimeoutInMilliseconds
          type:
            - number
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.updateDescription.failureAction
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rollback', 'Manual'
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.enableDeltaHealthEvaluation
          type:
            - boolean
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.clusterUpgradeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of nodes health degradation allowed
            during

            cluster upgrades. The delta is measured between the state of the
            nodes at

            the beginning of upgrade and the state of the nodes at the time of
            the

            health evaluation. The check is performed after every upgrade domain
            upgrade

            completion to make sure the global state of the cluster is within
            tolerated

            limits. The default value is 10%.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of upgrade domain nodes health
            degradation

            allowed during cluster upgrades. The delta is measured between the
            state of

            the upgrade domain nodes at the beginning of upgrade and the state
            of the

            upgrade domain nodes at the time of the health evaluation. The check
            is

            performed after every upgrade domain upgrade completion for all
            completed

            upgrade domains to make sure the state of the upgrade domains is
            within

            tolerated limits. The default value is 15%.
          optional: true
        - id: updateClusterUpgradeDescription.applicationHealthPolicyMap
          type:
            - object
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.applicationHealthPolicyMap.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        updateClusterUpgradeWithHttpOperationResponse(updateClusterUpgradeDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#updateClusterUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#updateClusterUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateClusterUpgrade(updateClusterUpgradeDescription, options,
      optionalCallback)
    summary: |-
      Update the upgrade parameters of a Service Fabric cluster upgrade.

      Update the upgrade parameters of a Service Fabric cluster upgrade.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateClusterUpgrade(updateClusterUpgradeDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: updateClusterUpgradeDescription
          type:
            - object
          description: |-
            Parameters for updating a
            cluster upgrade.
        - id: updateClusterUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rolling', 'Rolling_ForceRestart'
          optional: true
        - id: updateClusterUpgradeDescription.updateDescription
          type:
            - object
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.updateDescription.rollingUpgradeMode
          type:
            - string
          description: >-
            Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual',

            'Monitored'
        - id: updateClusterUpgradeDescription.updateDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.replicaSetCheckTimeoutInMilliseconds
          type:
            - number
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.updateDescription.failureAction
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rollback', 'Manual'
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.updateDescription.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error.

            For example, to allow 10% of nodes to be unhealthy, this value would
            be 10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.enableDeltaHealthEvaluation
          type:
            - boolean
          description: ''
          optional: true
        - id: updateClusterUpgradeDescription.clusterUpgradeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of nodes health degradation allowed
            during

            cluster upgrades. The delta is measured between the state of the
            nodes at

            the beginning of upgrade and the state of the nodes at the time of
            the

            health evaluation. The check is performed after every upgrade domain
            upgrade

            completion to make sure the global state of the cluster is within
            tolerated

            limits. The default value is 10%.
          optional: true
        - id: >-
            updateClusterUpgradeDescription.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
          type:
            - number
          description: >-
            The maximum allowed percentage of upgrade domain nodes health
            degradation

            allowed during cluster upgrades. The delta is measured between the
            state of

            the upgrade domain nodes at the beginning of upgrade and the state
            of the

            upgrade domain nodes at the time of the health evaluation. The check
            is

            performed after every upgrade domain upgrade completion for all
            completed

            upgrade domains to make sure the state of the upgrade domains is
            within

            tolerated limits. The default value is 15%.
          optional: true
        - id: updateClusterUpgradeDescription.applicationHealthPolicyMap
          type:
            - object
          description: ''
          optional: true
        - id: >-
            updateClusterUpgradeDescription.applicationHealthPolicyMap.applicationHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getAadMetadataWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getAadMetadataWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getAadMetadataWithHttpOperationResponse(options)
    summary: >-
      Gets the Azure Active Directory metadata used for secured

      connection to cluster.


      Gets the Azure Active Directory metadata used for secured connection to

      cluster.

      This API is not supposed to be called separately. It provides information

      needed to set up an Azure Active Directory secured connection with a
      Service

      Fabric cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getAadMetadataWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<AadMetadataObject>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<AadMetadataObject>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getAadMetadataWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getAadMetadata'
    id: 'azure-servicefabric.ServiceFabricClient#getAadMetadata'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getAadMetadata(options, optionalCallback)'
    summary: >-
      Gets the Azure Active Directory metadata used for secured

      connection to cluster.


      Gets the Azure Active Directory metadata used for secured connection to

      cluster.

      This API is not supposed to be called separately. It provides information

      needed to set up an Azure Active Directory secured connection with a
      Service

      Fabric cluster.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getAadMetadata(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{AadMetadataObject} - The deserialized result object.'
        value: '{AadMetadataObject} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link AadMetadataObject} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link AadMetadataObject} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getAadMetadata(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getNodeInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getNodeInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getNodeInfoListWithHttpOperationResponse(options)
    summary: >-
      Gets the list of nodes in the Service Fabric cluster.


      The Nodes endpoint returns information about the nodes in the Service
      Fabric

      Cluster. The respons include the name, status, id, health, uptime and
      other

      details about the node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeInfoListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedNodeInfoList>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<PagedNodeInfoList>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.nodeStatusFilter
          type:
            - string
          description: >-
            Allows filtering the nodes based

            on the NodeStatus. Only the nodes that are matching the specified
            filter

            value will be returned. The filter value can be one of the
            following.


            - default - This filter value will match all of the nodes excepts
            the ones

            with with status as Unknown or Removed.

            - all - This filter value will match all of the nodes.

            - up - This filter value will match nodes that are Up.

            - down - This filter value will match nodes that are Down.

            - enabling - This filter value will match nodes that are in the
            process of

            being enabled with status as Enabling.

            - disabling - This filter value will match nodes that are in the
            process of

            being disabled with status as Disabling.

            - disabled - This filter value will match nodes that are Disabled.

            - unknown - This filter value will match nodes whose status is
            Unknown. A

            node would be in Unknown state if Service Fabric does not have
            authoritative

            information about that node. This can happen if the system learns
            about a

            node at runtime.

            - removed - This filter value will match nodes whose status is
            Removed.

            These are the nodes that are removed from the cluster using the

            RemoveNodeState API.

            . Possible values include: 'default', 'all', 'up', 'down',
            'enabling',

            'disabling', 'disabled', 'unknown', 'removed'
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getNodeInfoListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getNodeInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getNodeInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeInfoList(options, optionalCallback)'
    summary: >-
      Gets the list of nodes in the Service Fabric cluster.


      The Nodes endpoint returns information about the nodes in the Service
      Fabric

      Cluster. The respons include the name, status, id, health, uptime and
      other

      details about the node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeInfoList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedNodeInfoList} - The deserialized result object.'
        value: '{PagedNodeInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedNodeInfoList} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedNodeInfoList} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.nodeStatusFilter
          type:
            - string
          description: >-
            Allows filtering the nodes based

            on the NodeStatus. Only the nodes that are matching the specified
            filter

            value will be returned. The filter value can be one of the
            following.


            - default - This filter value will match all of the nodes excepts
            the ones

            with with status as Unknown or Removed.

            - all - This filter value will match all of the nodes.

            - up - This filter value will match nodes that are Up.

            - down - This filter value will match nodes that are Down.

            - enabling - This filter value will match nodes that are in the
            process of

            being enabled with status as Enabling.

            - disabling - This filter value will match nodes that are in the
            process of

            being disabled with status as Disabling.

            - disabled - This filter value will match nodes that are Disabled.

            - unknown - This filter value will match nodes whose status is
            Unknown. A

            node would be in Unknown state if Service Fabric does not have
            authoritative

            information about that node. This can happen if the system learns
            about a

            node at runtime.

            - removed - This filter value will match nodes whose status is
            Removed.

            These are the nodes that are removed from the cluster using the

            RemoveNodeState API.

            . Possible values include: 'default', 'all', 'up', 'down',
            'enabling',

            'disabling', 'disabled', 'unknown', 'removed'
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getNodeInfoList(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getNodeInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getNodeInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeInfoWithHttpOperationResponse(nodeName, options)'
    summary: >-
      Gets the list of nodes in the Service Fabric cluster.


      Gets the information about a specific node in the Service Fabric
      Cluster.The

      respons include the name, status, id, health, uptime and other details
      about

      the node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeInfoWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<NodeInfo>} - The deserialized result object.'
        value: '{HttpOperationResponse<NodeInfo>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function getNodeInfoWithHttpOperationResponse(nodeName, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getNodeInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getNodeInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeInfo(nodeName, options, optionalCallback)'
    summary: >-
      Gets the list of nodes in the Service Fabric cluster.


      Gets the information about a specific node in the Service Fabric
      Cluster.The

      respons include the name, status, id, health, uptime and other details
      about

      the node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeInfo(nodeName, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{NodeInfo} - The deserialized result object.'
        value: '{NodeInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getNodeInfo(nodeName, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getNodeHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getNodeHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeHealthWithHttpOperationResponse(nodeName, options)'
    summary: |-
      Gets the health of a Service Fabric node.

      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
      filter the collection of health events reported on the node based on the
      health state. If the node that you specify by name does not exist in the
      health store, this returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeHealthWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<NodeHealth>} - The deserialized result object.'
        value: '{HttpOperationResponse<NodeHealth>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function getNodeHealthWithHttpOperationResponse(nodeName, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getNodeHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getNodeHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeHealth(nodeName, options, optionalCallback)'
    summary: |-
      Gets the health of a Service Fabric node.

      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
      filter the collection of health events reported on the node based on the
      health state. If the node that you specify by name does not exist in the
      health store, this returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeHealth(nodeName, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{NodeHealth} - The deserialized result object.'
        value: '{NodeHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getNodeHealth(nodeName, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getNodeHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getNodeHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeHealthUsingPolicyWithHttpOperationResponse(nodeName, options)'
    summary: >-
      Gets the health of a Service Fabric node, by using the specified

      health policy.


      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to

      filter the collection of health events reported on the node based on the

      health state. Use ClusterHealthPolicy in the POST body to override the

      health policies used to evaluate the health. If the node that you specify
      by

      name does not exist in the health store, this returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeHealthUsingPolicyWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<NodeHealth>} - The deserialized result object.'
        value: '{HttpOperationResponse<NodeHealth>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.clusterHealthPolicy
          type:
            - object
          description: >-
            Describes the health policies

            used to evaluate the health of a cluster or node. If not present,
            the health

            evaluation uses the health policy from cluster manifest or the
            default

            health policy.
          optional: true
        - id: options.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: options.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy nodes before reporting an
            error. For

            example, to allow 10% of nodes to be unhealthy, this value would be
            10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: options.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum

            allowed percentage of unhealthy applications before reporting an
            error. For

            example, to allow 10% of applications to be unhealthy, this value
            would be

            10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: options.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getNodeHealthUsingPolicyWithHttpOperationResponse(nodeName,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getNodeHealthUsingPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#getNodeHealthUsingPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeHealthUsingPolicy(nodeName, options, optionalCallback)'
    summary: >-
      Gets the health of a Service Fabric node, by using the specified

      health policy.


      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to

      filter the collection of health events reported on the node based on the

      health state. Use ClusterHealthPolicy in the POST body to override the

      health policies used to evaluate the health. If the node that you specify
      by

      name does not exist in the health store, this returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy(nodeName,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{NodeHealth} - The deserialized result object.'
        value: '{NodeHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.clusterHealthPolicy
          type:
            - object
          description: >-
            Describes the health policies

            used to evaluate the health of a cluster or node. If not present,
            the health

            evaluation uses the health policy from cluster manifest or the
            default

            health policy.
          optional: true
        - id: options.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: options.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy nodes before reporting an
            error. For

            example, to allow 10% of nodes to be unhealthy, this value would be
            10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: options.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The maximum

            allowed percentage of unhealthy applications before reporting an
            error. For

            example, to allow 10% of applications to be unhealthy, this value
            would be

            10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: options.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getNodeHealthUsingPolicy(nodeName, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportNodeHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportNodeHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportNodeHealthWithHttpOperationResponse(nodeName, healthInformation,
      options)
    summary: >-
      Sends a health report on the Service Fabric node.


      Reports health state of the specified Service Fabric node. The report must

      contain the information about the source of the health report and property

      on which it is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the

      health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run
      GetNodeHealth

      and check that the report appears in the HealthEvents section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportNodeHealthWithHttpOperationResponse(nodeName,
      healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function reportNodeHealthWithHttpOperationResponse(nodeName,
        healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportNodeHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportNodeHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'reportNodeHealth(nodeName, healthInformation, options, optionalCallback)'
    summary: >-
      Sends a health report on the Service Fabric node.


      Reports health state of the specified Service Fabric node. The report must

      contain the information about the source of the health report and property

      on which it is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the

      health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run
      GetNodeHealth

      and check that the report appears in the HealthEvents section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportNodeHealth(nodeName,
      healthInformation, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportNodeHealth(nodeName, healthInformation, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getNodeLoadInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getNodeLoadInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeLoadInfoWithHttpOperationResponse(nodeName, options)'
    summary: |-
      Gets the load information of a Service Fabric node.

      Gets the load information of a Service Fabric node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeLoadInfoWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<NodeLoadInfo>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<NodeLoadInfo>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function getNodeLoadInfoWithHttpOperationResponse(nodeName, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getNodeLoadInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getNodeLoadInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getNodeLoadInfo(nodeName, options, optionalCallback)'
    summary: |-
      Gets the load information of a Service Fabric node.

      Gets the load information of a Service Fabric node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeLoadInfo(nodeName, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{NodeLoadInfo} - The deserialized result object.'
        value: '{NodeLoadInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeLoadInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeLoadInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getNodeLoadInfo(nodeName, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#disableNodeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#disableNodeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      disableNodeWithHttpOperationResponse(nodeName,
      deactivationIntentDescription, options)
    summary: >-
      Deactivate a Service Fabric cluster node with the specified

      deactivation intent.


      Deactivate a Service Fabric cluster node with the specified deactivation

      intent. Once the deactivation is in progress, the deactivation intent can
      be

      increased, but not decreased (for example, a node which is was deactivated

      with the Pause intent can be deactivated further with Restart, but not the

      other way around. Nodes may be reactivated using the Activate a node

      operation any time after they are deactivated. If the deactivation is not

      complete this will cancel the deactivation. A node which goes down and
      comes

      back up while deactivated will still need to be reactivated before
      services

      will be placed on that node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.disableNodeWithHttpOperationResponse(nodeName,
      deactivationIntentDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deactivationIntentDescription
          type:
            - object
          description: |-
            Describes the intent or reason
            for deactivating the node.
        - id: deactivationIntentDescription.deactivationIntent
          type:
            - string
          description: >-
            Describes

            the intent or reason for deactivating the node. The possible values
            are

            following.

            - Pause - Indicates that the node should be paused. The value is 1.

            - Restart - Indicates that the intent is for the node to be
            restarted after

            a short period of time. The value is 2.

            - RemoveData - Indicates the intent is for the node to remove data.
            The

            value is 3.

            . Possible values include: 'Pause', 'Restart', 'RemoveData'
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function disableNodeWithHttpOperationResponse(nodeName,
        deactivationIntentDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#disableNode'
    id: 'azure-servicefabric.ServiceFabricClient#disableNode'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      disableNode(nodeName, deactivationIntentDescription, options,
      optionalCallback)
    summary: >-
      Deactivate a Service Fabric cluster node with the specified

      deactivation intent.


      Deactivate a Service Fabric cluster node with the specified deactivation

      intent. Once the deactivation is in progress, the deactivation intent can
      be

      increased, but not decreased (for example, a node which is was deactivated

      with the Pause intent can be deactivated further with Restart, but not the

      other way around. Nodes may be reactivated using the Activate a node

      operation any time after they are deactivated. If the deactivation is not

      complete this will cancel the deactivation. A node which goes down and
      comes

      back up while deactivated will still need to be reactivated before
      services

      will be placed on that node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.disableNode(nodeName,
      deactivationIntentDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deactivationIntentDescription
          type:
            - object
          description: |-
            Describes the intent or reason
            for deactivating the node.
        - id: deactivationIntentDescription.deactivationIntent
          type:
            - string
          description: >-
            Describes

            the intent or reason for deactivating the node. The possible values
            are

            following.

            - Pause - Indicates that the node should be paused. The value is 1.

            - Restart - Indicates that the intent is for the node to be
            restarted after

            a short period of time. The value is 2.

            - RemoveData - Indicates the intent is for the node to remove data.
            The

            value is 3.

            . Possible values include: 'Pause', 'Restart', 'RemoveData'
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function disableNode(nodeName, deactivationIntentDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#enableNodeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#enableNodeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'enableNodeWithHttpOperationResponse(nodeName, options)'
    summary: >-
      Activate a Service Fabric cluster node which is currently

      deactivated.


      Activates a Service Fabric cluster node which is currently deactivated.
      Once

      activated, the node will again become a viable target for placing new

      replicas, and any deactivated replicas remaining on the node will be

      reactivated.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.enableNodeWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function enableNodeWithHttpOperationResponse(nodeName, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#enableNode'
    id: 'azure-servicefabric.ServiceFabricClient#enableNode'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'enableNode(nodeName, options, optionalCallback)'
    summary: >-
      Activate a Service Fabric cluster node which is currently

      deactivated.


      Activates a Service Fabric cluster node which is currently deactivated.
      Once

      activated, the node will again become a viable target for placing new

      replicas, and any deactivated replicas remaining on the node will be

      reactivated.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.enableNode(nodeName, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function enableNode(nodeName, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#removeNodeStateWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#removeNodeStateWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'removeNodeStateWithHttpOperationResponse(nodeName, options)'
    summary: >-
      Notifies Service Fabric that the persisted state on a node has been

      permanently removed or lost.


      Notifies Service Fabric that the persisted state on a node has been

      permanently removed or lost.  This implies that it is not possible to

      recover the persisted state of that node. This generally happens if a hard

      disk has been wiped clean, or if a hard disk crashes. The node has to be

      down for this operation to be successful. This operation lets Service
      Fabric

      know that the replicas on that node no longer exist, and that Service
      Fabric

      should stop waiting for those replicas to come back up. Do not run this

      cmdlet if the state on the node has not been removed and the node can
      comes

      back up with its state intact.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.removeNodeStateWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function removeNodeStateWithHttpOperationResponse(nodeName, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#removeNodeState'
    id: 'azure-servicefabric.ServiceFabricClient#removeNodeState'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'removeNodeState(nodeName, options, optionalCallback)'
    summary: >-
      Notifies Service Fabric that the persisted state on a node has been

      permanently removed or lost.


      Notifies Service Fabric that the persisted state on a node has been

      permanently removed or lost.  This implies that it is not possible to

      recover the persisted state of that node. This generally happens if a hard

      disk has been wiped clean, or if a hard disk crashes. The node has to be

      down for this operation to be successful. This operation lets Service
      Fabric

      know that the replicas on that node no longer exist, and that Service
      Fabric

      should stop waiting for those replicas to come back up. Do not run this

      cmdlet if the state on the node has not been removed and the node can
      comes

      back up with its state intact.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.removeNodeState(nodeName, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function removeNodeState(nodeName, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#restartNodeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#restartNodeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      restartNodeWithHttpOperationResponse(nodeName, restartNodeDescription,
      options)
    summary: |-
      Restarts a Service Fabric cluster node.

      Restarts a Service Fabric cluster node that is already started.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.restartNodeWithHttpOperationResponse(nodeName,
      restartNodeDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: restartNodeDescription
          type:
            - object
          description: >-
            The instance of the node to be

            restarted and a flag indicating the need to take dump of the fabric
            process.
        - id: restartNodeDescription.nodeInstanceId
          type:
            - string
          description: >-
            The instance id of the

            target node. If instance id is specified the node is restarted only
            if it

            matches with the current instance of the node. A default value of
            "0" would

            match any instance id. The instance id can be obtained using get
            node query.
        - id: restartNodeDescription.createFabricDump
          type:
            - string
          description: >-
            Specify True to

            create a dump of the fabric node process. This is case sensitive.
            Possible

            values include: 'False', 'True'
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function restartNodeWithHttpOperationResponse(nodeName,
        restartNodeDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#restartNode'
    id: 'azure-servicefabric.ServiceFabricClient#restartNode'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'restartNode(nodeName, restartNodeDescription, options, optionalCallback)'
    summary: |-
      Restarts a Service Fabric cluster node.

      Restarts a Service Fabric cluster node that is already started.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.restartNode(nodeName,
      restartNodeDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: restartNodeDescription
          type:
            - object
          description: >-
            The instance of the node to be

            restarted and a flag indicating the need to take dump of the fabric
            process.
        - id: restartNodeDescription.nodeInstanceId
          type:
            - string
          description: >-
            The instance id of the

            target node. If instance id is specified the node is restarted only
            if it

            matches with the current instance of the node. A default value of
            "0" would

            match any instance id. The instance id can be obtained using get
            node query.
        - id: restartNodeDescription.createFabricDump
          type:
            - string
          description: >-
            Specify True to

            create a dump of the fabric node process. This is case sensitive.
            Possible

            values include: 'False', 'True'
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function restartNode(nodeName, restartNodeDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getApplicationTypeInfoListWithHttpOperationResponse(options)
    summary: >-
      Gets the list of application types in the Service Fabric cluster.


      Returns the information about the application types that are provisioned
      or

      in the process of being provisioned in the Service Fabric cluster. Each

      version of an application type is returned as one application type. The

      response includes the name, version, status and other details about the

      application type. This is a paged query, meaning that if not all of the

      application types fit in a page, one page of results is returned as well
      as

      a continuation token which can be used to get the next page. For example,
      if

      there are 10 application types but a page only fits the first 3
      application

      types, or if max results is set to 3, then 3 is returned. To access the
      rest

      of the results, retrieve subsequent pages by using the returned
      continuation

      token in the next query. An empty continuation token is returned if there

      are no subsequent pages.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationTypeInfoListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedApplicationTypeInfoList>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<PagedApplicationTypeInfoList>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.applicationTypeDefinitionKindFilter
          type:
            - number
          description: >-
            Used to filter

            on ApplicationTypeDefinitionKind for application type query
            operations.

            - Default - Default value. Filter that matches input with any

            ApplicationTypeDefinitionKind value. The value is 0.

            - All - Filter that matches input with any
            ApplicationTypeDefinitionKind

            value. The value is 65535.

            - ServiceFabricApplicationPackage - Filter that matches input with

            ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage.
            The

            value is 1.

            - Compose - Filter that matches input with
            ApplicationTypeDefinitionKind

            value Compose. The value is 2.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.maxResults
          type:
            - number
          description: >-
            The maximum number of results to be

            returned as part of the paged queries. This parameter defines the
            upper

            bound on the number of results returned. The results returned can be
            less

            than the specified maximum results if they do not fit in the message
            as per

            the max message size restrictions defined in the configuration. If
            this

            parameter is zero or not specified, the paged queries includes as
            much

            results as possible that fit in the return message.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getApplicationTypeInfoListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationTypeInfoList(options, optionalCallback)'
    summary: >-
      Gets the list of application types in the Service Fabric cluster.


      Returns the information about the application types that are provisioned
      or

      in the process of being provisioned in the Service Fabric cluster. Each

      version of an application type is returned as one application type. The

      response includes the name, version, status and other details about the

      application type. This is a paged query, meaning that if not all of the

      application types fit in a page, one page of results is returned as well
      as

      a continuation token which can be used to get the next page. For example,
      if

      there are 10 application types but a page only fits the first 3
      application

      types, or if max results is set to 3, then 3 is returned. To access the
      rest

      of the results, retrieve subsequent pages by using the returned
      continuation

      token in the next query. An empty continuation token is returned if there

      are no subsequent pages.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationTypeInfoList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedApplicationTypeInfoList} - The deserialized result object.'
        value: '{PagedApplicationTypeInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedApplicationTypeInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedApplicationTypeInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.applicationTypeDefinitionKindFilter
          type:
            - number
          description: >-
            Used to filter

            on ApplicationTypeDefinitionKind for application type query
            operations.

            - Default - Default value. Filter that matches input with any

            ApplicationTypeDefinitionKind value. The value is 0.

            - All - Filter that matches input with any
            ApplicationTypeDefinitionKind

            value. The value is 65535.

            - ServiceFabricApplicationPackage - Filter that matches input with

            ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage.
            The

            value is 1.

            - Compose - Filter that matches input with
            ApplicationTypeDefinitionKind

            value Compose. The value is 2.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.maxResults
          type:
            - number
          description: >-
            The maximum number of results to be

            returned as part of the paged queries. This parameter defines the
            upper

            bound on the number of results returned. The results returned can be
            less

            than the specified maximum results if they do not fit in the message
            as per

            the max message size restrictions defined in the configuration. If
            this

            parameter is zero or not specified, the paged queries includes as
            much

            results as possible that fit in the return message.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getApplicationTypeInfoList(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoListByNameWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoListByNameWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getApplicationTypeInfoListByNameWithHttpOperationResponse(applicationTypeName,
      options)
    summary: >-
      Gets the list of application types in the Service Fabric cluster

      matching exactly the specified name.


      Returns the information about the application types that are provisioned
      or

      in the process of being provisioned in the Service Fabric cluster. These

      results are of application types whose name match exactly the one
      specified

      as the parameter, and which comply with the given query parameters. All

      versions of the application type matching the application type name are

      returned, with each version returned as one application type. The response

      includes the name, version, status and other details about the application

      type. This is a paged query, meaning that if not all of the application

      types fit in a page, one page of results is returned as well as a

      continuation token which can be used to get the next page. For example, if

      there are 10 application types but a page only fits the first 3
      application

      types, or if max results is set to 3, then 3 is returned. To access the
      rest

      of the results, retrieve subsequent pages by using the returned
      continuation

      token in the next query. An empty continuation token is returned if there

      are no subsequent pages.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationTypeInfoListByNameWithHttpOperationResponse(applicationTypeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedApplicationTypeInfoList>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<PagedApplicationTypeInfoList>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.maxResults
          type:
            - number
          description: >-
            The maximum number of results to be

            returned as part of the paged queries. This parameter defines the
            upper

            bound on the number of results returned. The results returned can be
            less

            than the specified maximum results if they do not fit in the message
            as per

            the max message size restrictions defined in the configuration. If
            this

            parameter is zero or not specified, the paged queries includes as
            much

            results as possible that fit in the return message.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getApplicationTypeInfoListByNameWithHttpOperationResponse(applicationTypeName,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoListByName'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationTypeInfoListByName'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getApplicationTypeInfoListByName(applicationTypeName, options,
      optionalCallback)
    summary: >-
      Gets the list of application types in the Service Fabric cluster

      matching exactly the specified name.


      Returns the information about the application types that are provisioned
      or

      in the process of being provisioned in the Service Fabric cluster. These

      results are of application types whose name match exactly the one
      specified

      as the parameter, and which comply with the given query parameters. All

      versions of the application type matching the application type name are

      returned, with each version returned as one application type. The response

      includes the name, version, status and other details about the application

      type. This is a paged query, meaning that if not all of the application

      types fit in a page, one page of results is returned as well as a

      continuation token which can be used to get the next page. For example, if

      there are 10 application types but a page only fits the first 3
      application

      types, or if max results is set to 3, then 3 is returned. To access the
      rest

      of the results, retrieve subsequent pages by using the returned
      continuation

      token in the next query. An empty continuation token is returned if there

      are no subsequent pages.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName(applicationTypeName,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedApplicationTypeInfoList} - The deserialized result object.'
        value: '{PagedApplicationTypeInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedApplicationTypeInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedApplicationTypeInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.maxResults
          type:
            - number
          description: >-
            The maximum number of results to be

            returned as part of the paged queries. This parameter defines the
            upper

            bound on the number of results returned. The results returned can be
            less

            than the specified maximum results if they do not fit in the message
            as per

            the max message size restrictions defined in the configuration. If
            this

            parameter is zero or not specified, the paged queries includes as
            much

            results as possible that fit in the return message.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#provisionApplicationTypeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#provisionApplicationTypeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      provisionApplicationTypeWithHttpOperationResponse(applicationTypeImageStorePath,
      options)
    summary: >-
      Provisions or registers a Service Fabric application type with the

      cluster.


      Provisions or registers a Service Fabric application type with the
      cluster.

      This is required before any new applications can be instantiated.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.provisionApplicationTypeWithHttpOperationResponse(applicationTypeImageStorePath,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationTypeImageStorePath
          type:
            - object
          description: >-
            The relative path for the

            application package in the image store specified during the prior
            copy

            operation.
        - id: applicationTypeImageStorePath.applicationTypeBuildPath
          type:
            - string
          description: |-
            The
            relative image store path to the application package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        provisionApplicationTypeWithHttpOperationResponse(applicationTypeImageStorePath,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#provisionApplicationType'
    id: 'azure-servicefabric.ServiceFabricClient#provisionApplicationType'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      provisionApplicationType(applicationTypeImageStorePath, options,
      optionalCallback)
    summary: >-
      Provisions or registers a Service Fabric application type with the

      cluster.


      Provisions or registers a Service Fabric application type with the
      cluster.

      This is required before any new applications can be instantiated.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.provisionApplicationType(applicationTypeImageStorePath,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationTypeImageStorePath
          type:
            - object
          description: >-
            The relative path for the

            application package in the image store specified during the prior
            copy

            operation.
        - id: applicationTypeImageStorePath.applicationTypeBuildPath
          type:
            - string
          description: |-
            The
            relative image store path to the application package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function provisionApplicationType(applicationTypeImageStorePath,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#unprovisionApplicationTypeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#unprovisionApplicationTypeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      unprovisionApplicationTypeWithHttpOperationResponse(applicationTypeName,
      applicationTypeImageStoreVersion, options)
    summary: >-
      Removes or unregisters a Service Fabric application type from the

      cluster.


      Removes or unregisters a Service Fabric application type from the cluster.

      This operation can only be performed if all application instance of the

      application type has been deleted. Once the application type is

      unregistered, no new application instance can be created for this
      particular

      application type.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.unprovisionApplicationTypeWithHttpOperationResponse(applicationTypeName,
      applicationTypeImageStoreVersion, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeImageStoreVersion
          type:
            - object
          description: |-
            The version of the
            application type in the image store.
        - id: applicationTypeImageStoreVersion.applicationTypeVersion
          type:
            - string
          description: ''
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        unprovisionApplicationTypeWithHttpOperationResponse(applicationTypeName,
        applicationTypeImageStoreVersion, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#unprovisionApplicationType'
    id: 'azure-servicefabric.ServiceFabricClient#unprovisionApplicationType'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      unprovisionApplicationType(applicationTypeName,
      applicationTypeImageStoreVersion, options, optionalCallback)
    summary: >-
      Removes or unregisters a Service Fabric application type from the

      cluster.


      Removes or unregisters a Service Fabric application type from the cluster.

      This operation can only be performed if all application instance of the

      application type has been deleted. Once the application type is

      unregistered, no new application instance can be created for this
      particular

      application type.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.unprovisionApplicationType(applicationTypeName,
      applicationTypeImageStoreVersion, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeImageStoreVersion
          type:
            - object
          description: |-
            The version of the
            application type in the image store.
        - id: applicationTypeImageStoreVersion.applicationTypeVersion
          type:
            - string
          description: ''
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function unprovisionApplicationType(applicationTypeName,
        applicationTypeImageStoreVersion, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceTypeInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceTypeInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getServiceTypeInfoListWithHttpOperationResponse(applicationTypeName,
      applicationTypeVersion, options)
    summary: >-
      Gets the list containing the information about service types that

      are supported by a provisioned application type in a Service Fabric
      cluster.


      Gets the list containing the information about service types that are

      supported by a provisioned application type in a Service Fabric cluster.
      The

      response includes the name of the service type, the name and version of
      the

      service manifest the type is defined in, kind (stateless or stateless) of

      the service type and other information about it.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceTypeInfoListWithHttpOperationResponse(applicationTypeName,
      applicationTypeVersion, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getServiceTypeInfoListWithHttpOperationResponse(applicationTypeName,
        applicationTypeVersion, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceTypeInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceTypeInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getServiceTypeInfoList(applicationTypeName, applicationTypeVersion,
      options, optionalCallback)
    summary: >-
      Gets the list containing the information about service types that

      are supported by a provisioned application type in a Service Fabric
      cluster.


      Gets the list containing the information about service types that are

      supported by a provisioned application type in a Service Fabric cluster.
      The

      response includes the name of the service type, the name and version of
      the

      service manifest the type is defined in, kind (stateless or stateless) of

      the service type and other information about it.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceTypeInfoList(applicationTypeName,
      applicationTypeVersion, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getServiceTypeInfoList(applicationTypeName,
        applicationTypeVersion, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceManifestWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceManifestWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getServiceManifestWithHttpOperationResponse(applicationTypeName,
      applicationTypeVersion, serviceManifestName, options)
    summary: |-
      Gets the manifest describing a service type.

      Gets the manifest describing a service type. The response contains the
      service manifest XML as a string.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceManifestWithHttpOperationResponse(applicationTypeName,
      applicationTypeVersion, serviceManifestName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ServiceTypeManifest>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ServiceTypeManifest>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceManifestName
          type:
            - string
          description: >-
            The name of a service manifest

            registered as part of an application type in a Service Fabric
            cluster.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getServiceManifestWithHttpOperationResponse(applicationTypeName,
        applicationTypeVersion, serviceManifestName, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceManifest'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceManifest'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getServiceManifest(applicationTypeName, applicationTypeVersion,
      serviceManifestName, options, optionalCallback)
    summary: |-
      Gets the manifest describing a service type.

      Gets the manifest describing a service type. The response contains the
      service manifest XML as a string.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceManifest(applicationTypeName,
      applicationTypeVersion, serviceManifestName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServiceTypeManifest} - The deserialized result object.'
        value: '{ServiceTypeManifest} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceTypeManifest} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceTypeManifest} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: serviceManifestName
          type:
            - string
          description: >-
            The name of a service manifest

            registered as part of an application type in a Service Fabric
            cluster.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getServiceManifest(applicationTypeName, applicationTypeVersion,
        serviceManifestName, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceTypeInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: |-
      Gets the list containing the information about service types from
      the applications deployed on a node in a Service Fabric cluster.

      Gets the list containing the information about service types from the
      applications deployed on a node in a Service Fabric cluster. The response
      includes the name of the service type, its registration status, the code
      package that registered it and activation id of the service package.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of the service

            manifest to filter the list of deployed service type information. If

            specified, the response will only contain the information about
            service

            types that are defined in this service manifest.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServiceTypeInfoListWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceTypeInfoList(nodeName, applicationId, options,
      optionalCallback)
    summary: |-
      Gets the list containing the information about service types from
      the applications deployed on a node in a Service Fabric cluster.

      Gets the list containing the information about service types from the
      applications deployed on a node in a Service Fabric cluster. The response
      includes the name of the service type, its registration status, the code
      package that registered it and activation id of the service package.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of the service

            manifest to filter the list of deployed service type information. If

            specified, the response will only contain the information about
            service

            types that are defined in this service manifest.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServiceTypeInfoList(nodeName, applicationId,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoByNameWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoByNameWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceTypeInfoByNameWithHttpOperationResponse(nodeName,
      applicationId, serviceTypeName, options)
    summary: >-
      Gets the information about a specified service type of the

      application deployed on a node in a Service Fabric cluster.


      Gets the list containing the information about a specific service type
      from

      the applications deployed on a node in a Service Fabric cluster. The

      response includes the name of the service type, its registration status,
      the

      code package that registered it and activation id of the service package.

      Each entry represents one activation of a service type, differentiated by

      the activation id.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByNameWithHttpOperationResponse(nodeName,
      applicationId, serviceTypeName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceTypeName
          type:
            - string
          description: |-
            Specifies the name of a Service Fabric
            service type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of the service

            manifest to filter the list of deployed service type information. If

            specified, the response will only contain the information about
            service

            types that are defined in this service manifest.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServiceTypeInfoByNameWithHttpOperationResponse(nodeName,
        applicationId, serviceTypeName, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoByName'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedServiceTypeInfoByName'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceTypeInfoByName(nodeName, applicationId, serviceTypeName,
      options, optionalCallback)
    summary: >-
      Gets the information about a specified service type of the

      application deployed on a node in a Service Fabric cluster.


      Gets the list containing the information about a specific service type
      from

      the applications deployed on a node in a Service Fabric cluster. The

      response includes the name of the service type, its registration status,
      the

      code package that registered it and activation id of the service package.

      Each entry represents one activation of a service type, differentiated by

      the activation id.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName(nodeName,
      applicationId, serviceTypeName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceTypeName
          type:
            - string
          description: |-
            Specifies the name of a Service Fabric
            service type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of the service

            manifest to filter the list of deployed service type information. If

            specified, the response will only contain the information about
            service

            types that are defined in this service manifest.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName, applicationId,
        serviceTypeName, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#createApplicationWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#createApplicationWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createApplicationWithHttpOperationResponse(applicationDescription,
      options)
    summary: |-
      Creates a Service Fabric application.

      Creates a Service Fabric application using the specified description.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createApplicationWithHttpOperationResponse(applicationDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationDescription
          type:
            - object
          description: |-
            Description for creating an
            application.
        - id: applicationDescription.name
          type:
            - string
          description: ''
        - id: applicationDescription.typeName
          type:
            - string
          description: ''
        - id: applicationDescription.typeVersion
          type:
            - string
          description: ''
        - id: applicationDescription.parameterList
          type:
            - array
          description: ''
          optional: true
        - id: applicationDescription.applicationCapacity
          type:
            - object
          description: ''
          optional: true
        - id: applicationDescription.applicationCapacity.minimumNodes
          type:
            - number
          description: >-
            The minimum number of nodes where Service Fabric will reserve
            capacity for

            this application. Note that this does not mean that the services of
            this

            application will be placed on all of those nodes. If this property
            is set to

            zero, no capacity will be reserved. The value of this property
            cannot be

            more than the value of the MaximumNodes property.
          optional: true
        - id: applicationDescription.applicationCapacity.maximumNodes
          type:
            - number
          description: >-
            The maximum number of nodes where Service Fabric will reserve
            capacity for

            this application. Note that this does not mean that the services of
            this

            application will be placed on all of those nodes. By default, the
            value of

            this property is zero and it means that the services can be placed
            on any

            node.
          optional: true
        - id: applicationDescription.applicationCapacity.applicationMetrics
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        createApplicationWithHttpOperationResponse(applicationDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#createApplication'
    id: 'azure-servicefabric.ServiceFabricClient#createApplication'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'createApplication(applicationDescription, options, optionalCallback)'
    summary: |-
      Creates a Service Fabric application.

      Creates a Service Fabric application using the specified description.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createApplication(applicationDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationDescription
          type:
            - object
          description: |-
            Description for creating an
            application.
        - id: applicationDescription.name
          type:
            - string
          description: ''
        - id: applicationDescription.typeName
          type:
            - string
          description: ''
        - id: applicationDescription.typeVersion
          type:
            - string
          description: ''
        - id: applicationDescription.parameterList
          type:
            - array
          description: ''
          optional: true
        - id: applicationDescription.applicationCapacity
          type:
            - object
          description: ''
          optional: true
        - id: applicationDescription.applicationCapacity.minimumNodes
          type:
            - number
          description: >-
            The minimum number of nodes where Service Fabric will reserve
            capacity for

            this application. Note that this does not mean that the services of
            this

            application will be placed on all of those nodes. If this property
            is set to

            zero, no capacity will be reserved. The value of this property
            cannot be

            more than the value of the MaximumNodes property.
          optional: true
        - id: applicationDescription.applicationCapacity.maximumNodes
          type:
            - number
          description: >-
            The maximum number of nodes where Service Fabric will reserve
            capacity for

            this application. Note that this does not mean that the services of
            this

            application will be placed on all of those nodes. By default, the
            value of

            this property is zero and it means that the services can be placed
            on any

            node.
          optional: true
        - id: applicationDescription.applicationCapacity.applicationMetrics
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function createApplication(applicationDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#deleteApplicationWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#deleteApplicationWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteApplicationWithHttpOperationResponse(applicationId, options)'
    summary: >-
      Deletes an existing Service Fabric application.


      Deletes an existing Service Fabric application. An application must be

      created before it can be deleted. Deleting an application will delete all

      services that are part of that application. By default Service Fabric will

      try to close service replicas in a graceful manner and then delete the

      service. However if service is having issues closing the replica
      gracefully,

      the delete operation may take a long time or get stuck. Use the optional

      ForceRemove flag to skip the graceful close sequence and forcefully delete

      the application and all of the its services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteApplicationWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.forceRemove
          type:
            - boolean
          description: >-
            Remove a Service Fabric application

            or service forcefully without going through the graceful shutdown
            sequence.

            This parameter can be used to forcefully delete an application or
            service

            for which delete is timing out due to issues in the service code
            that

            prevents graceful close of replicas.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function deleteApplicationWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#deleteApplication'
    id: 'azure-servicefabric.ServiceFabricClient#deleteApplication'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteApplication(applicationId, options, optionalCallback)'
    summary: >-
      Deletes an existing Service Fabric application.


      Deletes an existing Service Fabric application. An application must be

      created before it can be deleted. Deleting an application will delete all

      services that are part of that application. By default Service Fabric will

      try to close service replicas in a graceful manner and then delete the

      service. However if service is having issues closing the replica
      gracefully,

      the delete operation may take a long time or get stuck. Use the optional

      ForceRemove flag to skip the graceful close sequence and forcefully delete

      the application and all of the its services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteApplication(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.forceRemove
          type:
            - boolean
          description: >-
            Remove a Service Fabric application

            or service forcefully without going through the graceful shutdown
            sequence.

            This parameter can be used to forcefully delete an application or
            service

            for which delete is timing out due to issues in the service code
            that

            prevents graceful close of replicas.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function deleteApplication(applicationId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationLoadInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationLoadInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationLoadInfoWithHttpOperationResponse(applicationId, options)'
    summary: >-
      Gets load information about a Service Fabric application.


      Returns the load information about the application that was created or in

      the process of being created in the Service Fabric cluster and whose name

      matches the one specified as the parameter. The response includes the
      name,

      minimum nodes, maximum nodes, the number of nodes the app is occupying

      currently, and application load metric information about the application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationLoadInfoWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationLoadInfo>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ApplicationLoadInfo>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getApplicationLoadInfoWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationLoadInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationLoadInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationLoadInfo(applicationId, options, optionalCallback)'
    summary: >-
      Gets load information about a Service Fabric application.


      Returns the load information about the application that was created or in

      the process of being created in the Service Fabric cluster and whose name

      matches the one specified as the parameter. The response includes the
      name,

      minimum nodes, maximum nodes, the number of nodes the app is occupying

      currently, and application load metric information about the application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationLoadInfo(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationLoadInfo} - The deserialized result object.'
        value: '{ApplicationLoadInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationLoadInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationLoadInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getApplicationLoadInfo(applicationId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getApplicationInfoListWithHttpOperationResponse(options)
    summary: >-
      Gets the list of applications created in the Service Fabric cluster

      that match filters specified as the parameter.


      Gets the information about the applications that were created or in the

      process of being created in the Service Fabric cluster and match filters

      specified as the parameter. The response includes the name, type, status,

      parameters and other details about the application. If the applications do

      not fit in a page, one page of results is returned as well as a
      continuation

      token which can be used to get the next page.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationInfoListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedApplicationInfoList>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<PagedApplicationInfoList>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.applicationDefinitionKindFilter
          type:
            - number
          description: >-
            Used to filter on

            ApplicationDefinitionKind for application query operations.

            - Default - Default value. Filter that matches input with any

            ApplicationDefinitionKind value. The value is 0.

            - All - Filter that matches input with any ApplicationDefinitionKind
            value.

            The value is 65535.

            - ServiceFabricApplicationDescription - Filter that matches input
            with

            ApplicationDefinitionKind value ServiceFabricApplicationDescription.
            The

            value is 1.

            - Compose - Filter that matches input with ApplicationDefinitionKind
            value

            Compose. The value is 2.
          optional: true
        - id: options.applicationTypeName
          type:
            - string
          description: >-
            The application type name used

            to filter the applications to query for. This value should not
            contain the

            application type version.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getApplicationInfoListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationInfoList(options, optionalCallback)'
    summary: >-
      Gets the list of applications created in the Service Fabric cluster

      that match filters specified as the parameter.


      Gets the information about the applications that were created or in the

      process of being created in the Service Fabric cluster and match filters

      specified as the parameter. The response includes the name, type, status,

      parameters and other details about the application. If the applications do

      not fit in a page, one page of results is returned as well as a
      continuation

      token which can be used to get the next page.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationInfoList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedApplicationInfoList} - The deserialized result object.'
        value: '{PagedApplicationInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedApplicationInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedApplicationInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.applicationDefinitionKindFilter
          type:
            - number
          description: >-
            Used to filter on

            ApplicationDefinitionKind for application query operations.

            - Default - Default value. Filter that matches input with any

            ApplicationDefinitionKind value. The value is 0.

            - All - Filter that matches input with any ApplicationDefinitionKind
            value.

            The value is 65535.

            - ServiceFabricApplicationDescription - Filter that matches input
            with

            ApplicationDefinitionKind value ServiceFabricApplicationDescription.
            The

            value is 1.

            - Compose - Filter that matches input with ApplicationDefinitionKind
            value

            Compose. The value is 2.
          optional: true
        - id: options.applicationTypeName
          type:
            - string
          description: >-
            The application type name used

            to filter the applications to query for. This value should not
            contain the

            application type version.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getApplicationInfoList(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationInfoWithHttpOperationResponse(applicationId, options)'
    summary: >-
      Gets information about a Service Fabric application.


      Returns the information about the application that was created or in the

      process of being created in the Service Fabric cluster and whose name

      matches the one specified as the parameter. The response includes the
      name,

      type, status, parameters and other details about the application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationInfoWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationInfo>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ApplicationInfo>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getApplicationInfoWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationInfo(applicationId, options, optionalCallback)'
    summary: >-
      Gets information about a Service Fabric application.


      Returns the information about the application that was created or in the

      process of being created in the Service Fabric cluster and whose name

      matches the one specified as the parameter. The response includes the
      name,

      type, status, parameters and other details about the application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationInfo(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationInfo} - The deserialized result object.'
        value: '{ApplicationInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.excludeApplicationParameters
          type:
            - boolean
          description: >-
            The flag that

            specifies whether application parameters will be excluded from the
            result.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getApplicationInfo(applicationId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationHealthWithHttpOperationResponse(applicationId, options)'
    summary: >-
      Gets the health of the service fabric application.


      Returns the heath state of the service fabric application. The response

      reports either Ok, Error or Warning health state. If the entity is not
      found

      in the helath store, it will return Error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationHealthWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ApplicationHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedApplicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed applications health state objects returned
            in the

            result of application health query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states. Only deployed applications that match the
            filter

            will be returned.\

            All deployed applications are used to evaluate the aggregated health
            state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            deployed

            applications with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.servicesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            services health state objects returned in the result of services
            health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only services that match the filter are returned. All services are
            used to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of services with HealthState value of OK (2) and
            Warning

            (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getApplicationHealthWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationHealth(applicationId, options, optionalCallback)'
    summary: >-
      Gets the health of the service fabric application.


      Returns the heath state of the service fabric application. The response

      reports either Ok, Error or Warning health state. If the entity is not
      found

      in the helath store, it will return Error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationHealth(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationHealth} - The deserialized result object.'
        value: '{ApplicationHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedApplicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed applications health state objects returned
            in the

            result of application health query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states. Only deployed applications that match the
            filter

            will be returned.\

            All deployed applications are used to evaluate the aggregated health
            state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            deployed

            applications with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.servicesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            services health state objects returned in the result of services
            health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only services that match the filter are returned. All services are
            used to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of services with HealthState value of OK (2) and
            Warning

            (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getApplicationHealth(applicationId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getApplicationHealthUsingPolicyWithHttpOperationResponse(applicationId,
      options)
    summary: >-
      Gets the health of a Service Fabric application using the specified

      policy.


      Gets the health of a Service Fabric application. Use
      EventsHealthStateFilter

      to filter the collection of health events reported on the node based on
      the

      health state. Use ClusterHealthPolicies to override the health policies
      used

      to evaluate the health.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicyWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ApplicationHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedApplicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed applications health state objects returned
            in the

            result of application health query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states. Only deployed applications that match the
            filter

            will be returned.\

            All deployed applications are used to evaluate the aggregated health
            state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            deployed

            applications with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.servicesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            services health state objects returned in the result of services
            health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only services that match the filter are returned. All services are
            used to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of services with HealthState value of OK (2) and
            Warning

            (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getApplicationHealthUsingPolicyWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationHealthUsingPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationHealthUsingPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationHealthUsingPolicy(applicationId, options, optionalCallback)'
    summary: >-
      Gets the health of a Service Fabric application using the specified

      policy.


      Gets the health of a Service Fabric application. Use
      EventsHealthStateFilter

      to filter the collection of health events reported on the node based on
      the

      health state. Use ClusterHealthPolicies to override the health policies
      used

      to evaluate the health.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationHealth} - The deserialized result object.'
        value: '{ApplicationHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedApplicationsHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed applications health state objects returned
            in the

            result of application health query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states. Only deployed applications that match the
            filter

            will be returned.\

            All deployed applications are used to evaluate the aggregated health
            state.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value could be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of
            deployed

            applications with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.servicesHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of the

            services health state objects returned in the result of services
            health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only services that match the filter are returned. All services are
            used to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of services with HealthState value of OK (2) and
            Warning

            (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getApplicationHealthUsingPolicy(applicationId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportApplicationHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportApplicationHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportApplicationHealthWithHttpOperationResponse(applicationId,
      healthInformation, options)
    summary: >-
      Sends a health report on the Service Fabric application.


      Reports health state of the specified Service Fabric application. The
      report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Application, which forwards

      to the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, get application

      health and check that the report appears in the HealthEvents section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportApplicationHealthWithHttpOperationResponse(applicationId,
      healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function reportApplicationHealthWithHttpOperationResponse(applicationId,
        healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportApplicationHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportApplicationHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportApplicationHealth(applicationId, healthInformation, options,
      optionalCallback)
    summary: >-
      Sends a health report on the Service Fabric application.


      Reports health state of the specified Service Fabric application. The
      report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Application, which forwards

      to the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, get application

      health and check that the report appears in the HealthEvents section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportApplicationHealth(applicationId,
      healthInformation, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportApplicationHealth(applicationId, healthInformation,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startApplicationUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startApplicationUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startApplicationUpgradeWithHttpOperationResponse(applicationId,
      applicationUpgradeDescription, options)
    summary: |-
      Starts upgrading an application in the Service Fabric cluster.

      Validates the supplied application upgrade parameters and starts upgrading
      the application if the parameters are valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startApplicationUpgradeWithHttpOperationResponse(applicationId,
      applicationUpgradeDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: applicationUpgradeDescription
          type:
            - object
          description: |-
            Parameters for an application
            upgrade.
        - id: applicationUpgradeDescription.name
          type:
            - string
          description: ''
        - id: applicationUpgradeDescription.targetApplicationTypeVersion
          type:
            - string
          description: ''
        - id: applicationUpgradeDescription.parameters
          type:
            - array
          description: ''
        - id: applicationUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible values
            include: 'Invalid', 'Rolling'
        - id: applicationUpgradeDescription.rollingUpgradeMode
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual',
            'Monitored'
          optional: true
        - id: applicationUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds
          type:
            - number
          description: ''
          optional: true
        - id: applicationUpgradeDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: applicationUpgradeDescription.monitoringPolicy
          type:
            - object
          description: ''
          optional: true
        - id: applicationUpgradeDescription.monitoringPolicy.failureAction
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rollback', 'Manual'
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: applicationUpgradeDescription.applicationHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function startApplicationUpgradeWithHttpOperationResponse(applicationId,
        applicationUpgradeDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startApplicationUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#startApplicationUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startApplicationUpgrade(applicationId, applicationUpgradeDescription,
      options, optionalCallback)
    summary: |-
      Starts upgrading an application in the Service Fabric cluster.

      Validates the supplied application upgrade parameters and starts upgrading
      the application if the parameters are valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startApplicationUpgrade(applicationId,
      applicationUpgradeDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: applicationUpgradeDescription
          type:
            - object
          description: |-
            Parameters for an application
            upgrade.
        - id: applicationUpgradeDescription.name
          type:
            - string
          description: ''
        - id: applicationUpgradeDescription.targetApplicationTypeVersion
          type:
            - string
          description: ''
        - id: applicationUpgradeDescription.parameters
          type:
            - array
          description: ''
        - id: applicationUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible values
            include: 'Invalid', 'Rolling'
        - id: applicationUpgradeDescription.rollingUpgradeMode
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual',
            'Monitored'
          optional: true
        - id: applicationUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds
          type:
            - number
          description: ''
          optional: true
        - id: applicationUpgradeDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: applicationUpgradeDescription.monitoringPolicy
          type:
            - object
          description: ''
          optional: true
        - id: applicationUpgradeDescription.monitoringPolicy.failureAction
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rollback', 'Manual'
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: applicationUpgradeDescription.applicationHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startApplicationUpgrade(applicationId,
        applicationUpgradeDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationUpgradeWithHttpOperationResponse(applicationId, options)'
    summary: >-
      Gets details for the latest upgrade performed on this application.


      Returns information about the state of the latest application upgrade
      along

      with details to aid debugging application health issues.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationUpgradeWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationUpgradeProgressInfo>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<ApplicationUpgradeProgressInfo>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getApplicationUpgradeWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationUpgrade(applicationId, options, optionalCallback)'
    summary: >-
      Gets details for the latest upgrade performed on this application.


      Returns information about the state of the latest application upgrade
      along

      with details to aid debugging application health issues.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationUpgrade(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationUpgradeProgressInfo} - The deserialized result object.'
        value: '{ApplicationUpgradeProgressInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationUpgradeProgressInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationUpgradeProgressInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getApplicationUpgrade(applicationId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#updateApplicationUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#updateApplicationUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateApplicationUpgradeWithHttpOperationResponse(applicationId,
      applicationUpgradeUpdateDescription, options)
    summary: >-
      Updates an ongoing application upgrade in the Service Fabric

      cluster.


      Updates the parameters of an ongoing application upgrade from the ones

      specified at the time of starting the application upgrade. This may be

      required to mitigate stuck application upgrades due to incorrect
      parameters

      or issues in the application to make progress.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateApplicationUpgradeWithHttpOperationResponse(applicationId,
      applicationUpgradeUpdateDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: applicationUpgradeUpdateDescription
          type:
            - object
          description: |-
            Parameters for updating
            an existing application upgrade.
        - id: applicationUpgradeUpdateDescription.name
          type:
            - string
          description: ''
        - id: applicationUpgradeUpdateDescription.upgradeKind
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rolling'
        - id: applicationUpgradeUpdateDescription.applicationHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: applicationUpgradeUpdateDescription.updateDescription
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.rollingUpgradeMode
          type:
            - string
          description: >-
            Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual',

            'Monitored'
        - id: applicationUpgradeUpdateDescription.updateDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.replicaSetCheckTimeoutInMilliseconds
          type:
            - number
          description: ''
          optional: true
        - id: applicationUpgradeUpdateDescription.updateDescription.failureAction
          type:
            - string
          description: 'Possible values include: ''Invalid'', ''Rollback'', ''Manual'''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        updateApplicationUpgradeWithHttpOperationResponse(applicationId,
        applicationUpgradeUpdateDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#updateApplicationUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#updateApplicationUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateApplicationUpgrade(applicationId,
      applicationUpgradeUpdateDescription, options, optionalCallback)
    summary: >-
      Updates an ongoing application upgrade in the Service Fabric

      cluster.


      Updates the parameters of an ongoing application upgrade from the ones

      specified at the time of starting the application upgrade. This may be

      required to mitigate stuck application upgrades due to incorrect
      parameters

      or issues in the application to make progress.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateApplicationUpgrade(applicationId,
      applicationUpgradeUpdateDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: applicationUpgradeUpdateDescription
          type:
            - object
          description: |-
            Parameters for updating
            an existing application upgrade.
        - id: applicationUpgradeUpdateDescription.name
          type:
            - string
          description: ''
        - id: applicationUpgradeUpdateDescription.upgradeKind
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rolling'
        - id: applicationUpgradeUpdateDescription.applicationHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: applicationUpgradeUpdateDescription.updateDescription
          type:
            - object
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.rollingUpgradeMode
          type:
            - string
          description: >-
            Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual',

            'Monitored'
        - id: applicationUpgradeUpdateDescription.updateDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.replicaSetCheckTimeoutInMilliseconds
          type:
            - number
          description: ''
          optional: true
        - id: applicationUpgradeUpdateDescription.updateDescription.failureAction
          type:
            - string
          description: 'Possible values include: ''Invalid'', ''Rollback'', ''Manual'''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            applicationUpgradeUpdateDescription.updateDescription.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function updateApplicationUpgrade(applicationId,
        applicationUpgradeUpdateDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#resumeApplicationUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#resumeApplicationUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      resumeApplicationUpgradeWithHttpOperationResponse(applicationId,
      resumeApplicationUpgradeDescription, options)
    summary: >-
      Resumes upgrading an application in the Service Fabric cluster.


      Resumes an unmonitored manual Service Fabric application upgrade. Service

      Fabric upgrades one upgrade domain at a time. For unmonitored manual

      upgrades, after Service Fabric finishes an upgrade domain, it waits for
      you

      to call this API before proceeding to the next upgrade domain.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resumeApplicationUpgradeWithHttpOperationResponse(applicationId,
      resumeApplicationUpgradeDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: resumeApplicationUpgradeDescription
          type:
            - object
          description: |-
            Describes the parameters
            for resuming an application upgrade.
        - id: resumeApplicationUpgradeDescription.upgradeDomainName
          type:
            - string
          description: |-
            The
            name of the upgrade domain in which to resume the upgrade.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        resumeApplicationUpgradeWithHttpOperationResponse(applicationId,
        resumeApplicationUpgradeDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#resumeApplicationUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#resumeApplicationUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      resumeApplicationUpgrade(applicationId,
      resumeApplicationUpgradeDescription, options, optionalCallback)
    summary: >-
      Resumes upgrading an application in the Service Fabric cluster.


      Resumes an unmonitored manual Service Fabric application upgrade. Service

      Fabric upgrades one upgrade domain at a time. For unmonitored manual

      upgrades, after Service Fabric finishes an upgrade domain, it waits for
      you

      to call this API before proceeding to the next upgrade domain.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resumeApplicationUpgrade(applicationId,
      resumeApplicationUpgradeDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: resumeApplicationUpgradeDescription
          type:
            - object
          description: |-
            Describes the parameters
            for resuming an application upgrade.
        - id: resumeApplicationUpgradeDescription.upgradeDomainName
          type:
            - string
          description: |-
            The
            name of the upgrade domain in which to resume the upgrade.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function resumeApplicationUpgrade(applicationId,
        resumeApplicationUpgradeDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#rollbackApplicationUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#rollbackApplicationUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      rollbackApplicationUpgradeWithHttpOperationResponse(applicationId,
      options)
    summary: >-
      Starts rolling back the currently on-going upgrade of an

      application in the Service Fabric cluster.


      Starts rolling back the current application upgrade to the previous
      version.

      This API can only be used to rollback the current in-progress upgrade that

      is rolling forward to new version. If the application is not currently
      being

      upgraded use StartApplicationUpgrade API to upgrade it to desired version

      including rolling back to a previous version.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.rollbackApplicationUpgradeWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        rollbackApplicationUpgradeWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#rollbackApplicationUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#rollbackApplicationUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'rollbackApplicationUpgrade(applicationId, options, optionalCallback)'
    summary: >-
      Starts rolling back the currently on-going upgrade of an

      application in the Service Fabric cluster.


      Starts rolling back the current application upgrade to the previous
      version.

      This API can only be used to rollback the current in-progress upgrade that

      is rolling forward to new version. If the application is not currently
      being

      upgraded use StartApplicationUpgrade API to upgrade it to desired version

      including rolling back to a previous version.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.rollbackApplicationUpgrade(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function rollbackApplicationUpgrade(applicationId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getDeployedApplicationInfoListWithHttpOperationResponse(nodeName, options)'
    summary: |-
      Gets the list of applications deployed on a Service Fabric node.

      Gets the list of applications deployed on a Service Fabric node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationInfoListWithHttpOperationResponse(nodeName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedApplicationInfoListWithHttpOperationResponse(nodeName,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getDeployedApplicationInfoList(nodeName, options, optionalCallback)'
    summary: |-
      Gets the list of applications deployed on a Service Fabric node.

      Gets the list of applications deployed on a Service Fabric node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationInfoList(nodeName,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedApplicationInfoList(nodeName, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedApplicationInfoWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: >-
      Gets the information about an application deployed on a Service

      Fabric node.


      Gets the information about an application deployed on a Service Fabric
      node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationInfoWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedApplicationInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<DeployedApplicationInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getDeployedApplicationInfoWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedApplicationInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedApplicationInfo(nodeName, applicationId, options,
      optionalCallback)
    summary: >-
      Gets the information about an application deployed on a Service

      Fabric node.


      Gets the information about an application deployed on a Service Fabric
      node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationInfo(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedApplicationInfo} - The deserialized result object.'
        value: '{DeployedApplicationInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedApplicationInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedApplicationInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedApplicationInfo(nodeName, applicationId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedApplicationHealthWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: >-
      Gets the information about health of an application deployed on a

      Service Fabric node.


      Gets the information about health of an application deployed on a Service

      Fabric node. Use EventsHealthStateFilter to optionally filter for the

      collection of HealthEvent objects reported on the deployed application
      based

      on health state. Use DeployedServicePackagesHealthStateFilter to
      optionally

      filter for DeployedServicePackageHealth children based on health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationHealthWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedApplicationHealth>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<DeployedApplicationHealth>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedServicePackagesHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed service package health state objects
            returned in

            the result of deployed application health query based on their
            health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only deployed service packages that match the filter are returned.
            All

            deployed service packages are used to evaluate the aggregated health
            state

            of the deployed application.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value can be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of service

            packages with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getDeployedApplicationHealthWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedApplicationHealth(nodeName, applicationId, options,
      optionalCallback)
    summary: >-
      Gets the information about health of an application deployed on a

      Service Fabric node.


      Gets the information about health of an application deployed on a Service

      Fabric node. Use EventsHealthStateFilter to optionally filter for the

      collection of HealthEvent objects reported on the deployed application
      based

      on health state. Use DeployedServicePackagesHealthStateFilter to
      optionally

      filter for DeployedServicePackageHealth children based on health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationHealth(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedApplicationHealth} - The deserialized result object.'
        value: '{DeployedApplicationHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedApplicationHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedApplicationHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedServicePackagesHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed service package health state objects
            returned in

            the result of deployed application health query based on their
            health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only deployed service packages that match the filter are returned.
            All

            deployed service packages are used to evaluate the aggregated health
            state

            of the deployed application.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value can be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of service

            packages with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedApplicationHealth(nodeName, applicationId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedApplicationHealthUsingPolicyWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: >-
      Gets the information about health of an application deployed on a

      Service Fabric node. using the specified policy.


      Gets the information about health of an application deployed on a Service

      Fabric node using the specified policy. Use EventsHealthStateFilter to

      optionally filter for the collection of HealthEvent objects reported on
      the

      deployed application based on health state. Use

      DeployedServicePackagesHealthStateFilter to optionally filter for

      DeployedServicePackageHealth children based on health state. Use

      ApplicationHealthPolicy to optionally override the health policies used to

      evaluate the health. This API only uses 'ConsiderWarningAsError' field of

      the ApplicationHealthPolicy. The rest of the fields are ignored while

      evaluating the health of the deployed application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicyWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedApplicationHealth>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<DeployedApplicationHealth>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedServicePackagesHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed service package health state objects
            returned in

            the result of deployed application health query based on their
            health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only deployed service packages that match the filter are returned.
            All

            deployed service packages are used to evaluate the aggregated health
            state

            of the deployed application.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value can be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of service

            packages with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedApplicationHealthUsingPolicyWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealthUsingPolicy
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedApplicationHealthUsingPolicy
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedApplicationHealthUsingPolicy(nodeName, applicationId, options,
      optionalCallback)
    summary: >-
      Gets the information about health of an application deployed on a

      Service Fabric node. using the specified policy.


      Gets the information about health of an application deployed on a Service

      Fabric node using the specified policy. Use EventsHealthStateFilter to

      optionally filter for the collection of HealthEvent objects reported on
      the

      deployed application based on health state. Use

      DeployedServicePackagesHealthStateFilter to optionally filter for

      DeployedServicePackageHealth children based on health state. Use

      ApplicationHealthPolicy to optionally override the health policies used to

      evaluate the health. This API only uses 'ConsiderWarningAsError' field of

      the ApplicationHealthPolicy. The rest of the fields are ignored while

      evaluating the health of the deployed application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedApplicationHealth} - The deserialized result object.'
        value: '{DeployedApplicationHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedApplicationHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedApplicationHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.deployedServicePackagesHealthStateFilter
          type:
            - number
          description: >-
            Allows

            filtering of the deployed service package health state objects
            returned in

            the result of deployed application health query based on their
            health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only deployed service packages that match the filter are returned.
            All

            deployed service packages are used to evaluate the aggregated health
            state

            of the deployed application.

            If not specified, all entries are returned.

            The state values are flag based enumeration, so the value can be a

            combination of these value obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then health state of service

            packages with HealthState value of OK (2) and Warning (4) are
            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName,
        applicationId, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportDeployedApplicationHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportDeployedApplicationHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportDeployedApplicationHealthWithHttpOperationResponse(nodeName,
      applicationId, healthInformation, options)
    summary: >-
      Sends a health report on the Service Fabric application deployed on

      a Service Fabric node.


      Reports health state of the application deployed on a Service Fabric node.

      The report must contain the information about the source of the health

      report and property on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, get deployed

      application health and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportDeployedApplicationHealthWithHttpOperationResponse(nodeName,
      applicationId, healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        reportDeployedApplicationHealthWithHttpOperationResponse(nodeName,
        applicationId, healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportDeployedApplicationHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportDeployedApplicationHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportDeployedApplicationHealth(nodeName, applicationId,
      healthInformation, options, optionalCallback)
    summary: >-
      Sends a health report on the Service Fabric application deployed on

      a Service Fabric node.


      Reports health state of the application deployed on a Service Fabric node.

      The report must contain the information about the source of the health

      report and property on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, get deployed

      application health and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportDeployedApplicationHealth(nodeName,
      applicationId, healthInformation, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportDeployedApplicationHealth(nodeName, applicationId,
        healthInformation, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationManifestWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationManifestWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getApplicationManifestWithHttpOperationResponse(applicationTypeName,
      applicationTypeVersion, options)
    summary: >-
      Gets the manifest describing an application type.


      Gets the manifest describing an application type. The response contains
      the

      application manifest XML as a string.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationManifestWithHttpOperationResponse(applicationTypeName,
      applicationTypeVersion, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationTypeManifest>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<ApplicationTypeManifest>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getApplicationManifestWithHttpOperationResponse(applicationTypeName,
        applicationTypeVersion, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationManifest'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationManifest'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getApplicationManifest(applicationTypeName, applicationTypeVersion,
      options, optionalCallback)
    summary: >-
      Gets the manifest describing an application type.


      Gets the manifest describing an application type. The response contains
      the

      application manifest XML as a string.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationManifest(applicationTypeName,
      applicationTypeVersion, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationTypeManifest} - The deserialized result object.'
        value: '{ApplicationTypeManifest} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationTypeManifest} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationTypeManifest} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationTypeName
          type:
            - string
          description: The name of the application type.
        - id: applicationTypeVersion
          type:
            - string
          description: The version of the application type.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getApplicationManifest(applicationTypeName,
        applicationTypeVersion, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceInfoListWithHttpOperationResponse(applicationId, options)'
    summary: |-
      Gets the information about all services belonging to the
      application specified by the application id.

      Returns the information about all services belonging to the application
      specified by the application id.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceInfoListWithHttpOperationResponse(applicationId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedServiceInfoList>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<PagedServiceInfoList>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceTypeName
          type:
            - string
          description: |-
            The service type name used to
            filter the services to query for.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getServiceInfoListWithHttpOperationResponse(applicationId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceInfoList(applicationId, options, optionalCallback)'
    summary: |-
      Gets the information about all services belonging to the
      application specified by the application id.

      Returns the information about all services belonging to the application
      specified by the application id.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceInfoList(applicationId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedServiceInfoList} - The deserialized result object.'
        value: '{PagedServiceInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedServiceInfoList} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedServiceInfoList} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceTypeName
          type:
            - string
          description: |-
            The service type name used to
            filter the services to query for.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getServiceInfoList(applicationId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceInfoWithHttpOperationResponse(applicationId, serviceId, options)'
    summary: |-
      Gets the information about the specific service belonging to a
      Service Fabric application.

      Returns the information about specified service belonging to the specified
      Service Fabric application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceInfoWithHttpOperationResponse(applicationId,
      serviceId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<ServiceInfo>} - The deserialized result object.'
        value: '{HttpOperationResponse<ServiceInfo>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getServiceInfoWithHttpOperationResponse(applicationId,
        serviceId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceInfo(applicationId, serviceId, options, optionalCallback)'
    summary: |-
      Gets the information about the specific service belonging to a
      Service Fabric application.

      Returns the information about specified service belonging to the specified
      Service Fabric application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceInfo(applicationId,
      serviceId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServiceInfo} - The deserialized result object.'
        value: '{ServiceInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getServiceInfo(applicationId, serviceId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getApplicationNameInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getApplicationNameInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationNameInfoWithHttpOperationResponse(serviceId, options)'
    summary: >-
      Gets the name of the Service Fabric application for a service.


      The GetApplicationName endpoint returns the name of the application for
      the

      specified service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationNameInfoWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ApplicationNameInfo>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ApplicationNameInfo>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getApplicationNameInfoWithHttpOperationResponse(serviceId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getApplicationNameInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getApplicationNameInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getApplicationNameInfo(serviceId, options, optionalCallback)'
    summary: >-
      Gets the name of the Service Fabric application for a service.


      The GetApplicationName endpoint returns the name of the application for
      the

      specified service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getApplicationNameInfo(serviceId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationNameInfo} - The deserialized result object.'
        value: '{ApplicationNameInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationNameInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ApplicationNameInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getApplicationNameInfo(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#createServiceWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#createServiceWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createServiceWithHttpOperationResponse(applicationId, serviceDescription,
      options)
    summary: |-
      Creates the specified service.

      Creates the specified service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createServiceWithHttpOperationResponse(applicationId,
      serviceDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceDescription
          type:
            - object
          description: |-
            The information necessary to create a
            service.
        - id: serviceDescription.applicationName
          type:
            - string
          description: ''
          optional: true
        - id: serviceDescription.serviceName
          type:
            - string
          description: ''
        - id: serviceDescription.serviceTypeName
          type:
            - string
          description: ''
        - id: serviceDescription.initializationData
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.partitionDescription
          type:
            - object
          description: ''
        - id: serviceDescription.partitionDescription.partitionScheme
          type:
            - string
          description: Polymorphic Discriminator
        - id: serviceDescription.placementConstraints
          type:
            - string
          description: >-
            The placement

            constraints as a string. Placement constraints are boolean
            expressions on

            node properties and allow for restricting a service to particular
            nodes

            based on the service requirements. For example, to place a service
            on nodes

            where NodeType is blue specify the following: "NodeColor == blue)".
          optional: true
        - id: serviceDescription.correlationScheme
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.serviceLoadMetrics
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.servicePlacementPolicies
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.defaultMoveCost
          type:
            - string
          description: |-
            Possible values
            include: 'Zero', 'Low', 'Medium', 'High'
          optional: true
        - id: serviceDescription.isDefaultMoveCostSpecified
          type:
            - boolean
          description: |-
            Indicates
            if the DefaultMoveCost property is specified.
          optional: true
        - id: serviceDescription.servicePackageActivationMode
          type:
            - string
          description: |-
            Possible
            values include: 'SharedProcess', 'ExclusiveProcess'
          optional: true
        - id: serviceDescription.serviceDnsName
          type:
            - string
          description: >-
            The DNS name of the

            service. It requires the DNS system service to be enabled in Service
            Fabric

            cluster.
          optional: true
        - id: serviceDescription.serviceKind
          type:
            - string
          description: Polymorphic Discriminator
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function createServiceWithHttpOperationResponse(applicationId,
        serviceDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#createService'
    id: 'azure-servicefabric.ServiceFabricClient#createService'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createService(applicationId, serviceDescription, options,
      optionalCallback)
    summary: |-
      Creates the specified service.

      Creates the specified service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createService(applicationId,
      serviceDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceDescription
          type:
            - object
          description: |-
            The information necessary to create a
            service.
        - id: serviceDescription.applicationName
          type:
            - string
          description: ''
          optional: true
        - id: serviceDescription.serviceName
          type:
            - string
          description: ''
        - id: serviceDescription.serviceTypeName
          type:
            - string
          description: ''
        - id: serviceDescription.initializationData
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.partitionDescription
          type:
            - object
          description: ''
        - id: serviceDescription.partitionDescription.partitionScheme
          type:
            - string
          description: Polymorphic Discriminator
        - id: serviceDescription.placementConstraints
          type:
            - string
          description: >-
            The placement

            constraints as a string. Placement constraints are boolean
            expressions on

            node properties and allow for restricting a service to particular
            nodes

            based on the service requirements. For example, to place a service
            on nodes

            where NodeType is blue specify the following: "NodeColor == blue)".
          optional: true
        - id: serviceDescription.correlationScheme
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.serviceLoadMetrics
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.servicePlacementPolicies
          type:
            - array
          description: ''
          optional: true
        - id: serviceDescription.defaultMoveCost
          type:
            - string
          description: |-
            Possible values
            include: 'Zero', 'Low', 'Medium', 'High'
          optional: true
        - id: serviceDescription.isDefaultMoveCostSpecified
          type:
            - boolean
          description: |-
            Indicates
            if the DefaultMoveCost property is specified.
          optional: true
        - id: serviceDescription.servicePackageActivationMode
          type:
            - string
          description: |-
            Possible
            values include: 'SharedProcess', 'ExclusiveProcess'
          optional: true
        - id: serviceDescription.serviceDnsName
          type:
            - string
          description: >-
            The DNS name of the

            service. It requires the DNS system service to be enabled in Service
            Fabric

            cluster.
          optional: true
        - id: serviceDescription.serviceKind
          type:
            - string
          description: Polymorphic Discriminator
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function createService(applicationId, serviceDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#createServiceFromTemplateWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#createServiceFromTemplateWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createServiceFromTemplateWithHttpOperationResponse(applicationId,
      serviceFromTemplateDescription, options)
    summary: |-
      Creates a Service Fabric service from the service template defined
      in the application manifest.

      Creates a Service Fabric service from the service template defined in the
      application manifest.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createServiceFromTemplateWithHttpOperationResponse(applicationId,
      serviceFromTemplateDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceFromTemplateDescription
          type:
            - object
          description: >-
            Describes the service that

            needs to be created from the template defined in the application
            manifest.
        - id: serviceFromTemplateDescription.applicationName
          type:
            - string
          description: ''
        - id: serviceFromTemplateDescription.serviceName
          type:
            - string
          description: ''
        - id: serviceFromTemplateDescription.serviceTypeName
          type:
            - string
          description: ''
        - id: serviceFromTemplateDescription.initializationData
          type:
            - array
          description: ''
          optional: true
        - id: serviceFromTemplateDescription.servicePackageActivationMode
          type:
            - string
          description: |-
            Possible
            values include: 'SharedProcess', 'ExclusiveProcess'
          optional: true
        - id: serviceFromTemplateDescription.serviceDnsName
          type:
            - string
          description: >-
            The DNS name

            of the service. It requires the DNS system service to be enabled in
            Service

            Fabric cluster.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        createServiceFromTemplateWithHttpOperationResponse(applicationId,
        serviceFromTemplateDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#createServiceFromTemplate'
    id: 'azure-servicefabric.ServiceFabricClient#createServiceFromTemplate'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createServiceFromTemplate(applicationId, serviceFromTemplateDescription,
      options, optionalCallback)
    summary: |-
      Creates a Service Fabric service from the service template defined
      in the application manifest.

      Creates a Service Fabric service from the service template defined in the
      application manifest.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createServiceFromTemplate(applicationId,
      serviceFromTemplateDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: serviceFromTemplateDescription
          type:
            - object
          description: >-
            Describes the service that

            needs to be created from the template defined in the application
            manifest.
        - id: serviceFromTemplateDescription.applicationName
          type:
            - string
          description: ''
        - id: serviceFromTemplateDescription.serviceName
          type:
            - string
          description: ''
        - id: serviceFromTemplateDescription.serviceTypeName
          type:
            - string
          description: ''
        - id: serviceFromTemplateDescription.initializationData
          type:
            - array
          description: ''
          optional: true
        - id: serviceFromTemplateDescription.servicePackageActivationMode
          type:
            - string
          description: |-
            Possible
            values include: 'SharedProcess', 'ExclusiveProcess'
          optional: true
        - id: serviceFromTemplateDescription.serviceDnsName
          type:
            - string
          description: >-
            The DNS name

            of the service. It requires the DNS system service to be enabled in
            Service

            Fabric cluster.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function createServiceFromTemplate(applicationId,
        serviceFromTemplateDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#deleteServiceWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#deleteServiceWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteServiceWithHttpOperationResponse(serviceId, options)'
    summary: >-
      Deletes an existing Service Fabric service.


      Deletes an existing Service Fabric service. A service must be created
      before

      it can be deleted. By default Service Fabric will try to close service

      replicas in a graceful manner and then delete the service. However if

      service is having issues closing the replica gracefully, the delete

      operation may take a long time or get stuck. Use the optional ForceRemove

      flag to skip the graceful close sequence and forcefully delete the
      service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteServiceWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.forceRemove
          type:
            - boolean
          description: >-
            Remove a Service Fabric application

            or service forcefully without going through the graceful shutdown
            sequence.

            This parameter can be used to forcefully delete an application or
            service

            for which delete is timing out due to issues in the service code
            that

            prevents graceful close of replicas.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function deleteServiceWithHttpOperationResponse(serviceId, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#deleteService'
    id: 'azure-servicefabric.ServiceFabricClient#deleteService'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteService(serviceId, options, optionalCallback)'
    summary: >-
      Deletes an existing Service Fabric service.


      Deletes an existing Service Fabric service. A service must be created
      before

      it can be deleted. By default Service Fabric will try to close service

      replicas in a graceful manner and then delete the service. However if

      service is having issues closing the replica gracefully, the delete

      operation may take a long time or get stuck. Use the optional ForceRemove

      flag to skip the graceful close sequence and forcefully delete the
      service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteService(serviceId, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.forceRemove
          type:
            - boolean
          description: >-
            Remove a Service Fabric application

            or service forcefully without going through the graceful shutdown
            sequence.

            This parameter can be used to forcefully delete an application or
            service

            for which delete is timing out due to issues in the service code
            that

            prevents graceful close of replicas.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function deleteService(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#updateServiceWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#updateServiceWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateServiceWithHttpOperationResponse(serviceId,
      serviceUpdateDescription, options)
    summary: |-
      Updates the specified service using the given update description.

      Updates the specified service using the given update description.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateServiceWithHttpOperationResponse(serviceId,
      serviceUpdateDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: serviceUpdateDescription
          type:
            - object
          description: |-
            The information necessary to update
            a service.
        - id: serviceUpdateDescription.flags
          type:
            - string
          description: >-
            Flags indicating whether

            other properties are set. Each of the associated properties
            corresponds to a

            flag, specified below, which, if set, indicate that the property is

            specified.

            This property can be a combination of those flags obtained using
            bitwise

            'OR' operator.

            For example, if the provided value is 6 then the flags for

            ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are
            set.


            - None - Does not indicate any other properties are set. The value
            is zero.

            - TargetReplicaSetSize/InstanceCount - Indicates whether the

            TargetReplicaSetSize property (for Stateful services) or the
            InstanceCount

            property (for Stateless services) is set. The value is 1.

            - ReplicaRestartWaitDuration - Indicates the
            ReplicaRestartWaitDuration

            property is set. The value is  2.

            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration
            property is

            set. The value is 4.

            - StandByReplicaKeepDuration - Indicates the
            StandByReplicaKeepDuration

            property is set. The value is 8.

            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is
            set. The

            value is 16.

            - PlacementConstraints - Indicates the PlacementConstraints property
            is set.

            The value is 32.

            - PlacementPolicyList - Indicates the ServicePlacementPolicies
            property is

            set. The value is 64.

            - Correlation - Indicates the CorrelationScheme property is set. The
            value

            is 128.

            - Metrics - Indicates the ServiceLoadMetrics property is set. The
            value is

            256.

            - DefaultMoveCost - Indicates the DefaultMoveCost property is set.
            The value

            is 512.
          optional: true
        - id: serviceUpdateDescription.placementConstraints
          type:
            - string
          description: >-
            The

            placement constraints as a string. Placement constraints are boolean

            expressions on node properties and allow for restricting a service
            to

            particular nodes based on the service requirements. For example, to
            place a

            service on nodes where NodeType is blue specify the following:
            "NodeColor ==

            blue)".
          optional: true
        - id: serviceUpdateDescription.correlationScheme
          type:
            - array
          description: ''
          optional: true
        - id: serviceUpdateDescription.loadMetrics
          type:
            - array
          description: ''
          optional: true
        - id: serviceUpdateDescription.servicePlacementPolicies
          type:
            - array
          description: ''
          optional: true
        - id: serviceUpdateDescription.defaultMoveCost
          type:
            - string
          description: |-
            Possible values
            include: 'Zero', 'Low', 'Medium', 'High'
          optional: true
        - id: serviceUpdateDescription.serviceKind
          type:
            - string
          description: |-
            Polymorphic
            Discriminator
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function updateServiceWithHttpOperationResponse(serviceId,
        serviceUpdateDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#updateService'
    id: 'azure-servicefabric.ServiceFabricClient#updateService'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateService(serviceId, serviceUpdateDescription, options,
      optionalCallback)
    summary: |-
      Updates the specified service using the given update description.

      Updates the specified service using the given update description.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateService(serviceId,
      serviceUpdateDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: serviceUpdateDescription
          type:
            - object
          description: |-
            The information necessary to update
            a service.
        - id: serviceUpdateDescription.flags
          type:
            - string
          description: >-
            Flags indicating whether

            other properties are set. Each of the associated properties
            corresponds to a

            flag, specified below, which, if set, indicate that the property is

            specified.

            This property can be a combination of those flags obtained using
            bitwise

            'OR' operator.

            For example, if the provided value is 6 then the flags for

            ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are
            set.


            - None - Does not indicate any other properties are set. The value
            is zero.

            - TargetReplicaSetSize/InstanceCount - Indicates whether the

            TargetReplicaSetSize property (for Stateful services) or the
            InstanceCount

            property (for Stateless services) is set. The value is 1.

            - ReplicaRestartWaitDuration - Indicates the
            ReplicaRestartWaitDuration

            property is set. The value is  2.

            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration
            property is

            set. The value is 4.

            - StandByReplicaKeepDuration - Indicates the
            StandByReplicaKeepDuration

            property is set. The value is 8.

            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is
            set. The

            value is 16.

            - PlacementConstraints - Indicates the PlacementConstraints property
            is set.

            The value is 32.

            - PlacementPolicyList - Indicates the ServicePlacementPolicies
            property is

            set. The value is 64.

            - Correlation - Indicates the CorrelationScheme property is set. The
            value

            is 128.

            - Metrics - Indicates the ServiceLoadMetrics property is set. The
            value is

            256.

            - DefaultMoveCost - Indicates the DefaultMoveCost property is set.
            The value

            is 512.
          optional: true
        - id: serviceUpdateDescription.placementConstraints
          type:
            - string
          description: >-
            The

            placement constraints as a string. Placement constraints are boolean

            expressions on node properties and allow for restricting a service
            to

            particular nodes based on the service requirements. For example, to
            place a

            service on nodes where NodeType is blue specify the following:
            "NodeColor ==

            blue)".
          optional: true
        - id: serviceUpdateDescription.correlationScheme
          type:
            - array
          description: ''
          optional: true
        - id: serviceUpdateDescription.loadMetrics
          type:
            - array
          description: ''
          optional: true
        - id: serviceUpdateDescription.servicePlacementPolicies
          type:
            - array
          description: ''
          optional: true
        - id: serviceUpdateDescription.defaultMoveCost
          type:
            - string
          description: |-
            Possible values
            include: 'Zero', 'Low', 'Medium', 'High'
          optional: true
        - id: serviceUpdateDescription.serviceKind
          type:
            - string
          description: |-
            Polymorphic
            Discriminator
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function updateService(serviceId, serviceUpdateDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceDescriptionWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceDescriptionWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceDescriptionWithHttpOperationResponse(serviceId, options)'
    summary: |-
      Gets the description of an existing Service Fabric service.

      Gets the description of an existing Service Fabric service. A service must
      be created before its description can be obtained.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceDescriptionWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ServiceDescription>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ServiceDescription>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getServiceDescriptionWithHttpOperationResponse(serviceId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceDescription'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceDescription'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceDescription(serviceId, options, optionalCallback)'
    summary: |-
      Gets the description of an existing Service Fabric service.

      Gets the description of an existing Service Fabric service. A service must
      be created before its description can be obtained.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceDescription(serviceId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServiceDescription} - The deserialized result object.'
        value: '{ServiceDescription} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceDescription} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceDescription} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getServiceDescription(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceHealthWithHttpOperationResponse(serviceId, options)'
    summary: |-
      Gets the health of the specified Service Fabric service.

      Gets the health information of the specified service.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service based on the health state.
      Use PartitionsHealthStateFilter to filter the collection of partitions
      returned.
      If you specify a service that does not exist in the health store, this
      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceHealthWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ServiceHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ServiceHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.partitionsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the partitions health state objects returned in the result of
            service health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only partitions that match the filter are returned. All partitions
            are used

            to evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of partitions with HealthState value of OK (2)
            and

            Warning (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function getServiceHealthWithHttpOperationResponse(serviceId, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceHealth(serviceId, options, optionalCallback)'
    summary: |-
      Gets the health of the specified Service Fabric service.

      Gets the health information of the specified service.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service based on the health state.
      Use PartitionsHealthStateFilter to filter the collection of partitions
      returned.
      If you specify a service that does not exist in the health store, this
      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceHealth(serviceId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServiceHealth} - The deserialized result object.'
        value: '{ServiceHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.partitionsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the partitions health state objects returned in the result of
            service health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only partitions that match the filter are returned. All partitions
            are used

            to evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of partitions with HealthState value of OK (2)
            and

            Warning (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getServiceHealth(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceHealthUsingPolicyWithHttpOperationResponse(serviceId, options)'
    summary: >-
      Gets the health of the specified Service Fabric service, by using

      the specified health policy.


      Gets the health information of the specified service.

      If the application health policy is specified, the health evaluation uses
      it

      to get the aggregated health state.

      If the policy is not specified, the health evaluation uses the application

      health policy defined in the application manifest, or the default health

      policy, if no policy is defined in the manifest.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the service based on the health state.

      Use PartitionsHealthStateFilter to filter the collection of partitions

      returned.

      If you specify a service that does not exist in the health store, this

      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceHealthUsingPolicyWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ServiceHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ServiceHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.partitionsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the partitions health state objects returned in the result of
            service health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only partitions that match the filter are returned. All partitions
            are used

            to evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of partitions with HealthState value of OK (2)
            and

            Warning (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getServiceHealthUsingPolicyWithHttpOperationResponse(serviceId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceHealthUsingPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceHealthUsingPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceHealthUsingPolicy(serviceId, options, optionalCallback)'
    summary: >-
      Gets the health of the specified Service Fabric service, by using

      the specified health policy.


      Gets the health information of the specified service.

      If the application health policy is specified, the health evaluation uses
      it

      to get the aggregated health state.

      If the policy is not specified, the health evaluation uses the application

      health policy defined in the application manifest, or the default health

      policy, if no policy is defined in the manifest.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the service based on the health state.

      Use PartitionsHealthStateFilter to filter the collection of partitions

      returned.

      If you specify a service that does not exist in the health store, this

      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy(serviceId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServiceHealth} - The deserialized result object.'
        value: '{ServiceHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.partitionsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering of

            the partitions health state objects returned in the result of
            service health

            query based on their health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only partitions that match the filter are returned. All partitions
            are used

            to evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value

            obtained using bitwise 'OR' operator. For example, if the provided
            value is

            6 then health state of partitions with HealthState value of OK (2)
            and

            Warning (4) will be returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getServiceHealthUsingPolicy(serviceId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportServiceHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportServiceHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportServiceHealthWithHttpOperationResponse(serviceId, healthInformation,
      options)
    summary: >-
      Sends a health report on the Service Fabric service.


      Reports health state of the specified Service Fabric service. The report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetServiceHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportServiceHealthWithHttpOperationResponse(serviceId,
      healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function reportServiceHealthWithHttpOperationResponse(serviceId,
        healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportServiceHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportServiceHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportServiceHealth(serviceId, healthInformation, options,
      optionalCallback)
    summary: >-
      Sends a health report on the Service Fabric service.


      Reports health state of the specified Service Fabric service. The report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetServiceHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportServiceHealth(serviceId,
      healthInformation, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportServiceHealth(serviceId, healthInformation, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#resolveServiceWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#resolveServiceWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'resolveServiceWithHttpOperationResponse(serviceId, options)'
    summary: |-
      Resolve a Service Fabric partition.

      Resolve a Service Fabric service partition, to get the endpoints of the
      service replicas.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resolveServiceWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ResolvedServicePartition>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<ResolvedServicePartition>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.partitionKeyType
          type:
            - number
          description: >-
            Key type for the partition. This

            parameter is required if the partition scheme for the service is
            Int64Range

            or Named. The possible values are following.

            - None (1) - Indicates that the the PartitionKeyValue parameter is
            not

            specified. This is valid for the partitions with partitioning scheme
            as

            Singleton. This is the default value. The value is 1.

            - Int64Range (2) - Indicates that the the PartitionKeyValue
            parameter is an

            int64 partition key. This is valid for the partitions with
            partitioning

            scheme as Int64Range. The value is 2.

            - Named (3) - Indicates that the the PartitionKeyValue parameter is
            a name

            of the partition. This is valid for the partitions with partitioning
            scheme

            as Named. The value is 3.
          optional: true
        - id: options.partitionKeyValue
          type:
            - string
          description: |-
            Partition key. This is required
            if the partition scheme for the service is Int64Range or Named.
          optional: true
        - id: options.previousRspVersion
          type:
            - string
          description: >-
            The value in the Version field

            of the response that was received previously. This is required if
            the user

            knows that the result that was got previously is stale.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function resolveServiceWithHttpOperationResponse(serviceId, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#resolveService'
    id: 'azure-servicefabric.ServiceFabricClient#resolveService'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'resolveService(serviceId, options, optionalCallback)'
    summary: |-
      Resolve a Service Fabric partition.

      Resolve a Service Fabric service partition, to get the endpoints of the
      service replicas.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resolveService(serviceId, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ResolvedServicePartition} - The deserialized result object.'
        value: '{ResolvedServicePartition} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ResolvedServicePartition} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ResolvedServicePartition} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.partitionKeyType
          type:
            - number
          description: >-
            Key type for the partition. This

            parameter is required if the partition scheme for the service is
            Int64Range

            or Named. The possible values are following.

            - None (1) - Indicates that the the PartitionKeyValue parameter is
            not

            specified. This is valid for the partitions with partitioning scheme
            as

            Singleton. This is the default value. The value is 1.

            - Int64Range (2) - Indicates that the the PartitionKeyValue
            parameter is an

            int64 partition key. This is valid for the partitions with
            partitioning

            scheme as Int64Range. The value is 2.

            - Named (3) - Indicates that the the PartitionKeyValue parameter is
            a name

            of the partition. This is valid for the partitions with partitioning
            scheme

            as Named. The value is 3.
          optional: true
        - id: options.partitionKeyValue
          type:
            - string
          description: |-
            Partition key. This is required
            if the partition scheme for the service is Int64Range or Named.
          optional: true
        - id: options.previousRspVersion
          type:
            - string
          description: >-
            The value in the Version field

            of the response that was received previously. This is required if
            the user

            knows that the result that was got previously is stale.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function resolveService(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getPartitionInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getPartitionInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionInfoListWithHttpOperationResponse(serviceId, options)'
    summary: >-
      Gets the list of partitions of a Service Fabric service.


      Gets the list of partitions of a Service Fabric service. The response

      include the partition id, partitioning scheme information, keys supported
      by

      the partition, status, health and other details about the partition.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionInfoListWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedServicePartitionInfoList>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<PagedServicePartitionInfoList>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getPartitionInfoListWithHttpOperationResponse(serviceId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getPartitionInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getPartitionInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionInfoList(serviceId, options, optionalCallback)'
    summary: >-
      Gets the list of partitions of a Service Fabric service.


      Gets the list of partitions of a Service Fabric service. The response

      include the partition id, partitioning scheme information, keys supported
      by

      the partition, status, health and other details about the partition.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionInfoList(serviceId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedServicePartitionInfoList} - The deserialized result object.'
        value: '{PagedServicePartitionInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedServicePartitionInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedServicePartitionInfoList} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getPartitionInfoList(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getPartitionInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getPartitionInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionInfoWithHttpOperationResponse(partitionId, options)'
    summary: >-
      Gets the information about a Service Fabric partition.


      The Partitions endpoint returns information about the specified partition.

      The response include the partition id, partitioning scheme information,
      keys

      supported by the partition, status, health and other details about the

      partition.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionInfoWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ServicePartitionInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<ServicePartitionInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function getPartitionInfoWithHttpOperationResponse(partitionId, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getPartitionInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getPartitionInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionInfo(partitionId, options, optionalCallback)'
    summary: >-
      Gets the information about a Service Fabric partition.


      The Partitions endpoint returns information about the specified partition.

      The response include the partition id, partitioning scheme information,
      keys

      supported by the partition, status, health and other details about the

      partition.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionInfo(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServicePartitionInfo} - The deserialized result object.'
        value: '{ServicePartitionInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServicePartitionInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServicePartitionInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getPartitionInfo(partitionId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getServiceNameInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getServiceNameInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceNameInfoWithHttpOperationResponse(partitionId, options)'
    summary: |-
      Gets the name of the Service Fabric service for a partition.

      The GetServiceName endpoint returns the name of the service for the
      specified partition.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceNameInfoWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ServiceNameInfo>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ServiceNameInfo>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getServiceNameInfoWithHttpOperationResponse(partitionId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getServiceNameInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getServiceNameInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getServiceNameInfo(partitionId, options, optionalCallback)'
    summary: |-
      Gets the name of the Service Fabric service for a partition.

      The GetServiceName endpoint returns the name of the service for the
      specified partition.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getServiceNameInfo(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ServiceNameInfo} - The deserialized result object.'
        value: '{ServiceNameInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceNameInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ServiceNameInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getServiceNameInfo(partitionId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getPartitionHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getPartitionHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionHealthWithHttpOperationResponse(partitionId, options)'
    summary: >-
      Gets the health of the specified Service Fabric partition.


      Gets the health information of the specified partition.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the service based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState

      objects on the partition.

      If you specify a partition that does not exist in the health store, this

      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionHealthWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PartitionHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<PartitionHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.replicasHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of ReplicaHealthState objects on the partition. The value
            can be

            obtained from members or bitwise operations on members of
            HealthStateFilter.

            Only replicas that match the filter will be returned. All replicas
            will be

            used to evaluate the aggregated health state. If not specified, all
            entries

            will be returned.The state values are flag based enumeration, so the
            value

            could be a combination of these value obtained using bitwise 'OR'
            operator.

            For example, If the provided value is 6 then all of the events with

            HealthState value of OK (2) and Warning (4) will be returned. The
            possible

            values for this parameter include integer value of one of the
            following

            health states.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getPartitionHealthWithHttpOperationResponse(partitionId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getPartitionHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getPartitionHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionHealth(partitionId, options, optionalCallback)'
    summary: >-
      Gets the health of the specified Service Fabric partition.


      Gets the health information of the specified partition.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the service based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState

      objects on the partition.

      If you specify a partition that does not exist in the health store, this

      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionHealth(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PartitionHealth} - The deserialized result object.'
        value: '{PartitionHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.replicasHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of ReplicaHealthState objects on the partition. The value
            can be

            obtained from members or bitwise operations on members of
            HealthStateFilter.

            Only replicas that match the filter will be returned. All replicas
            will be

            used to evaluate the aggregated health state. If not specified, all
            entries

            will be returned.The state values are flag based enumeration, so the
            value

            could be a combination of these value obtained using bitwise 'OR'
            operator.

            For example, If the provided value is 6 then all of the events with

            HealthState value of OK (2) and Warning (4) will be returned. The
            possible

            values for this parameter include integer value of one of the
            following

            health states.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getPartitionHealth(partitionId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getPartitionHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getPartitionHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getPartitionHealthUsingPolicyWithHttpOperationResponse(partitionId,
      options)
    summary: >-
      Gets the health of the specified Service Fabric partition, by using

      the specified health policy.


      Gets the health information of the specified partition.

      If the application health policy is specified, the health evaluation uses
      it

      to get the aggregated health state.

      If the policy is not specified, the health evaluation uses the application

      health policy defined in the application manifest, or the default health

      policy, if no policy is defined in the manifest.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the partition based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState

      objects on the partition. Use ApplicationHealthPolicy in the POST body to

      override the health policies used to evaluate the health.

      If you specify a partition that does not exist in the health store, this

      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicyWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PartitionHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<PartitionHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.replicasHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of ReplicaHealthState objects on the partition. The value
            can be

            obtained from members or bitwise operations on members of
            HealthStateFilter.

            Only replicas that match the filter will be returned. All replicas
            will be

            used to evaluate the aggregated health state. If not specified, all
            entries

            will be returned.The state values are flag based enumeration, so the
            value

            could be a combination of these value obtained using bitwise 'OR'
            operator.

            For example, If the provided value is 6 then all of the events with

            HealthState value of OK (2) and Warning (4) will be returned. The
            possible

            values for this parameter include integer value of one of the
            following

            health states.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getPartitionHealthUsingPolicyWithHttpOperationResponse(partitionId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getPartitionHealthUsingPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#getPartitionHealthUsingPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionHealthUsingPolicy(partitionId, options, optionalCallback)'
    summary: >-
      Gets the health of the specified Service Fabric partition, by using

      the specified health policy.


      Gets the health information of the specified partition.

      If the application health policy is specified, the health evaluation uses
      it

      to get the aggregated health state.

      If the policy is not specified, the health evaluation uses the application

      health policy defined in the application manifest, or the default health

      policy, if no policy is defined in the manifest.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the partition based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState

      objects on the partition. Use ApplicationHealthPolicy in the POST body to

      override the health policies used to evaluate the health.

      If you specify a partition that does not exist in the health store, this

      cmdlet returns an error.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PartitionHealth} - The deserialized result object.'
        value: '{PartitionHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.replicasHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of ReplicaHealthState objects on the partition. The value
            can be

            obtained from members or bitwise operations on members of
            HealthStateFilter.

            Only replicas that match the filter will be returned. All replicas
            will be

            used to evaluate the aggregated health state. If not specified, all
            entries

            will be returned.The state values are flag based enumeration, so the
            value

            could be a combination of these value obtained using bitwise 'OR'
            operator.

            For example, If the provided value is 6 then all of the events with

            HealthState value of OK (2) and Warning (4) will be returned. The
            possible

            values for this parameter include integer value of one of the
            following

            health states.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.excludeHealthStatistics
          type:
            - boolean
          description: >-
            Indicates whether the

            health statistics should be returned as part of the query result.
            False by

            default.

            The statistics show the number of children entities in health state
            Ok,

            Warning, and Error.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getPartitionHealthUsingPolicy(partitionId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportPartitionHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportPartitionHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportPartitionHealthWithHttpOperationResponse(partitionId,
      healthInformation, options)
    summary: >-
      Sends a health report on the Service Fabric partition.


      Reports health state of the specified Service Fabric partition. The report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Partition, which forwards
      to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetPartitionHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportPartitionHealthWithHttpOperationResponse(partitionId,
      healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function reportPartitionHealthWithHttpOperationResponse(partitionId,
        healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportPartitionHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportPartitionHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportPartitionHealth(partitionId, healthInformation, options,
      optionalCallback)
    summary: >-
      Sends a health report on the Service Fabric partition.


      Reports health state of the specified Service Fabric partition. The report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Partition, which forwards
      to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetPartitionHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportPartitionHealth(partitionId,
      healthInformation, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportPartitionHealth(partitionId, healthInformation, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getPartitionLoadInformationWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getPartitionLoadInformationWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionLoadInformationWithHttpOperationResponse(partitionId, options)'
    summary: >-
      Gets the load of the specified Service Fabric partition.


      Returns information about the specified partition.

      The response includes a list of load information.

      Each information includes load metric name, value and last reported time
      in

      UTC.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionLoadInformationWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PartitionLoadInformation>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<PartitionLoadInformation>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getPartitionLoadInformationWithHttpOperationResponse(partitionId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getPartitionLoadInformation'
    id: 'azure-servicefabric.ServiceFabricClient#getPartitionLoadInformation'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getPartitionLoadInformation(partitionId, options, optionalCallback)'
    summary: >-
      Gets the load of the specified Service Fabric partition.


      Returns information about the specified partition.

      The response includes a list of load information.

      Each information includes load metric name, value and last reported time
      in

      UTC.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionLoadInformation(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PartitionLoadInformation} - The deserialized result object.'
        value: '{PartitionLoadInformation} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionLoadInformation} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionLoadInformation} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getPartitionLoadInformation(partitionId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#resetPartitionLoadWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#resetPartitionLoadWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'resetPartitionLoadWithHttpOperationResponse(partitionId, options)'
    summary: |-
      Resets the current load of a Service Fabric partition.

      Resets the current load of a Service Fabric partition to the default load
      for the service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resetPartitionLoadWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function resetPartitionLoadWithHttpOperationResponse(partitionId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#resetPartitionLoad'
    id: 'azure-servicefabric.ServiceFabricClient#resetPartitionLoad'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'resetPartitionLoad(partitionId, options, optionalCallback)'
    summary: |-
      Resets the current load of a Service Fabric partition.

      Resets the current load of a Service Fabric partition to the default load
      for the service.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.resetPartitionLoad(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function resetPartitionLoad(partitionId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#recoverPartitionWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#recoverPartitionWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'recoverPartitionWithHttpOperationResponse(partitionId, options)'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover a specific partition which is currently stuck in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover
      a

      specific partition which is currently stuck in quorum loss. This operation

      should only be performed if it is known that the replicas that are down

      cannot be recovered. Incorrect use of this API can cause potential data

      loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverPartitionWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function recoverPartitionWithHttpOperationResponse(partitionId, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#recoverPartition'
    id: 'azure-servicefabric.ServiceFabricClient#recoverPartition'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'recoverPartition(partitionId, options, optionalCallback)'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover a specific partition which is currently stuck in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover
      a

      specific partition which is currently stuck in quorum loss. This operation

      should only be performed if it is known that the replicas that are down

      cannot be recovered. Incorrect use of this API can cause potential data

      loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverPartition(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function recoverPartition(partitionId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#recoverServicePartitionsWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#recoverServicePartitionsWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'recoverServicePartitionsWithHttpOperationResponse(serviceId, options)'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover the specified service which is currently stuck in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover

      the specified service which is currently stuck in quorum loss. This

      operation should only be performed if it is known that the replicas that
      are

      down cannot be recovered. Incorrect use of this API can cause potential
      data

      loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverServicePartitionsWithHttpOperationResponse(serviceId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function recoverServicePartitionsWithHttpOperationResponse(serviceId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#recoverServicePartitions'
    id: 'azure-servicefabric.ServiceFabricClient#recoverServicePartitions'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'recoverServicePartitions(serviceId, options, optionalCallback)'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover the specified service which is currently stuck in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover

      the specified service which is currently stuck in quorum loss. This

      operation should only be performed if it is known that the replicas that
      are

      down cannot be recovered. Incorrect use of this API can cause potential
      data

      loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverServicePartitions(serviceId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function recoverServicePartitions(serviceId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#recoverSystemPartitionsWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#recoverSystemPartitionsWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: recoverSystemPartitionsWithHttpOperationResponse(options)
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover the system services which are currently stuck in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover

      the system services which are currently stuck in quorum loss. This
      operation

      should only be performed if it is known that the replicas that are down

      cannot be recovered. Incorrect use of this API can cause potential data

      loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverSystemPartitionsWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function recoverSystemPartitionsWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#recoverSystemPartitions'
    id: 'azure-servicefabric.ServiceFabricClient#recoverSystemPartitions'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'recoverSystemPartitions(options, optionalCallback)'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover the system services which are currently stuck in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover

      the system services which are currently stuck in quorum loss. This
      operation

      should only be performed if it is known that the replicas that are down

      cannot be recovered. Incorrect use of this API can cause potential data

      loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverSystemPartitions(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function recoverSystemPartitions(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#recoverAllPartitionsWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#recoverAllPartitionsWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: recoverAllPartitionsWithHttpOperationResponse(options)
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover any services (including system services) which are currently stuck

      in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover

      any services (including system services) which are currently stuck in
      quorum

      loss. This operation should only be performed if it is known that the

      replicas that are down cannot be recovered. Incorrect use of this API can

      cause potential data loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverAllPartitionsWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function recoverAllPartitionsWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#recoverAllPartitions'
    id: 'azure-servicefabric.ServiceFabricClient#recoverAllPartitions'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'recoverAllPartitions(options, optionalCallback)'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to

      recover any services (including system services) which are currently stuck

      in quorum loss.


      Indicates to the Service Fabric cluster that it should attempt to recover

      any services (including system services) which are currently stuck in
      quorum

      loss. This operation should only be performed if it is known that the

      replicas that are down cannot be recovered. Incorrect use of this API can

      cause potential data loss.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.recoverAllPartitions(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function recoverAllPartitions(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#createRepairTaskWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#createRepairTaskWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'createRepairTaskWithHttpOperationResponse(repairTask, options)'
    summary: |-
      Creates a new repair task.

      For clusters that have the Repair Manager Service configured,
      this API provides a way to create repair tasks that run automatically or
      manually.
      For repair tasks that run automatically, an appropriate repair executor
      must be running for each repair action to run automatically.
      These are currently only available in specially-configured Azure Cloud
      Services.

      To create a manual repair task, provide the set of impacted node names and
      the
      expected impact. When the state of the created repair task changes to
      approved,
      you can safely perform repair actions on those nodes.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createRepairTaskWithHttpOperationResponse(repairTask,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: repairTask
          type:
            - object
          description: |-
            Describes the repair task to be created or
            updated.
        - id: repairTask.taskId
          type:
            - string
          description: The ID of the repair task.
        - id: repairTask.version
          type:
            - string
          description: >-
            The version of the repair task.

            When creating a new repair task, the version must be set to zero. 
            When

            updating a repair task,

            the version is used for optimistic concurrency checks.  If the
            version is

            set to zero, the update will not check for write conflicts.  If the
            version

            is set to a non-zero value, then the

            update will only succeed if the actual current version of the repair
            task

            matches this value.
          optional: true
        - id: repairTask.description
          type:
            - string
          description: >-
            A description of the purpose of the

            repair task, or other informational details.

            May be set when the repair task is created, and is immutable once
            set.
          optional: true
        - id: repairTask.state
          type:
            - string
          description: >-
            The workflow state of the repair task.

            Valid initial states are Created, Claimed, and Preparing.


            - Invalid - Indicates that the repair task state is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Created - Indicates that the repair task has been created.

            - Claimed - Indicates that the repair task has been claimed by a
            repair

            executor.

            - Preparing - Indicates that the Repair Manager is preparing the
            system to

            handle the impact of the repair task, usually by taking resources
            offline

            gracefully.

            - Approved - Indicates that the repair task has been approved by the
            Repair

            Manager and is safe to execute.

            - Executing - Indicates that execution of the repair task is in
            progress.

            - Restoring - Indicates that the Repair Manager is restoring the
            system to

            its pre-repair state, usually by bringing resources back online.

            - Completed - Indicates that the repair task has completed, and no
            further

            state changes will occur.

            . Possible values include: 'Invalid', 'Created', 'Claimed',
            'Preparing',

            'Approved', 'Executing', 'Restoring', 'Completed'
        - id: repairTask.flags
          type:
            - number
          description: |-
            A bitwise-OR of the following values,
            which gives additional details about the status of the repair task.
            - 1 - Cancellation of the repair has been requested
            - 2 - Abort of the repair has been requested
            - 4 - Approval of the repair was forced via client request
          optional: true
        - id: repairTask.action
          type:
            - string
          description: >-
            The requested repair action. Must be

            specified when the repair task is created, and is immutable once
            set.
        - id: repairTask.target
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.target.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.executor
          type:
            - string
          description: |-
            The name of the repair executor. Must
            be specified in Claimed and later states, and is immutable once set.
          optional: true
        - id: repairTask.executorData
          type:
            - string
          description: |-
            A data string that the repair
            executor can use to store its internal state.
          optional: true
        - id: repairTask.impact
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.impact.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.resultStatus
          type:
            - string
          description: >-
            A value describing the overall

            result of the repair task execution.

            Must be specified in the Restoring and later states, and is
            immutable once

            set.


            - Invalid - Indicates that the repair task result is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Succeeded - Indicates that the repair task completed execution

            successfully.

            - Cancelled - Indicates that the repair task was cancelled prior to

            execution.

            - Interrupted - Indicates that execution of the repair task was
            interrupted

            by a cancellation request after some work had already been
            performed.

            - Failed - Indicates that there was a failure during execution of
            the repair

            task. Some work may have been performed.

            - Pending - Indicates that the repair task result is not yet
            available,

            because the repair task has not finished executing.

            . Possible values include: 'Invalid', 'Succeeded', 'Cancelled',

            'Interrupted', 'Failed', 'Pending'
          optional: true
        - id: repairTask.resultCode
          type:
            - number
          description: >-
            A numeric value providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.resultDetails
          type:
            - string
          description: >-
            A string providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.history
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.history.createdUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Created state.
          optional: true
        - id: repairTask.history.claimedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Claimed state.
          optional: true
        - id: repairTask.history.preparingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Preparing state.
          optional: true
        - id: repairTask.history.approvedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Approved state
          optional: true
        - id: repairTask.history.executingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Executing state
          optional: true
        - id: repairTask.history.restoringUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Restoring state
          optional: true
        - id: repairTask.history.completedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Completed state
          optional: true
        - id: repairTask.history.preparingHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Preparing
            state.
          optional: true
        - id: repairTask.history.preparingHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Preparing state.
          optional: true
        - id: repairTask.history.restoringHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Restoring
            state.
          optional: true
        - id: repairTask.history.restoringHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Restoring state.
          optional: true
        - id: repairTask.preparingHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.restoringHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.performPreparingHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Preparing state.
          optional: true
        - id: repairTask.performRestoringHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Restoring state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function createRepairTaskWithHttpOperationResponse(repairTask, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#createRepairTask'
    id: 'azure-servicefabric.ServiceFabricClient#createRepairTask'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'createRepairTask(repairTask, options, optionalCallback)'
    summary: |-
      Creates a new repair task.

      For clusters that have the Repair Manager Service configured,
      this API provides a way to create repair tasks that run automatically or
      manually.
      For repair tasks that run automatically, an appropriate repair executor
      must be running for each repair action to run automatically.
      These are currently only available in specially-configured Azure Cloud
      Services.

      To create a manual repair task, provide the set of impacted node names and
      the
      expected impact. When the state of the created repair task changes to
      approved,
      you can safely perform repair actions on those nodes.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createRepairTask(repairTask,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{RepairTaskUpdateInfo} - The deserialized result object.'
        value: '{RepairTaskUpdateInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: repairTask
          type:
            - object
          description: |-
            Describes the repair task to be created or
            updated.
        - id: repairTask.taskId
          type:
            - string
          description: The ID of the repair task.
        - id: repairTask.version
          type:
            - string
          description: >-
            The version of the repair task.

            When creating a new repair task, the version must be set to zero. 
            When

            updating a repair task,

            the version is used for optimistic concurrency checks.  If the
            version is

            set to zero, the update will not check for write conflicts.  If the
            version

            is set to a non-zero value, then the

            update will only succeed if the actual current version of the repair
            task

            matches this value.
          optional: true
        - id: repairTask.description
          type:
            - string
          description: >-
            A description of the purpose of the

            repair task, or other informational details.

            May be set when the repair task is created, and is immutable once
            set.
          optional: true
        - id: repairTask.state
          type:
            - string
          description: >-
            The workflow state of the repair task.

            Valid initial states are Created, Claimed, and Preparing.


            - Invalid - Indicates that the repair task state is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Created - Indicates that the repair task has been created.

            - Claimed - Indicates that the repair task has been claimed by a
            repair

            executor.

            - Preparing - Indicates that the Repair Manager is preparing the
            system to

            handle the impact of the repair task, usually by taking resources
            offline

            gracefully.

            - Approved - Indicates that the repair task has been approved by the
            Repair

            Manager and is safe to execute.

            - Executing - Indicates that execution of the repair task is in
            progress.

            - Restoring - Indicates that the Repair Manager is restoring the
            system to

            its pre-repair state, usually by bringing resources back online.

            - Completed - Indicates that the repair task has completed, and no
            further

            state changes will occur.

            . Possible values include: 'Invalid', 'Created', 'Claimed',
            'Preparing',

            'Approved', 'Executing', 'Restoring', 'Completed'
        - id: repairTask.flags
          type:
            - number
          description: |-
            A bitwise-OR of the following values,
            which gives additional details about the status of the repair task.
            - 1 - Cancellation of the repair has been requested
            - 2 - Abort of the repair has been requested
            - 4 - Approval of the repair was forced via client request
          optional: true
        - id: repairTask.action
          type:
            - string
          description: >-
            The requested repair action. Must be

            specified when the repair task is created, and is immutable once
            set.
        - id: repairTask.target
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.target.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.executor
          type:
            - string
          description: |-
            The name of the repair executor. Must
            be specified in Claimed and later states, and is immutable once set.
          optional: true
        - id: repairTask.executorData
          type:
            - string
          description: |-
            A data string that the repair
            executor can use to store its internal state.
          optional: true
        - id: repairTask.impact
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.impact.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.resultStatus
          type:
            - string
          description: >-
            A value describing the overall

            result of the repair task execution.

            Must be specified in the Restoring and later states, and is
            immutable once

            set.


            - Invalid - Indicates that the repair task result is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Succeeded - Indicates that the repair task completed execution

            successfully.

            - Cancelled - Indicates that the repair task was cancelled prior to

            execution.

            - Interrupted - Indicates that execution of the repair task was
            interrupted

            by a cancellation request after some work had already been
            performed.

            - Failed - Indicates that there was a failure during execution of
            the repair

            task. Some work may have been performed.

            - Pending - Indicates that the repair task result is not yet
            available,

            because the repair task has not finished executing.

            . Possible values include: 'Invalid', 'Succeeded', 'Cancelled',

            'Interrupted', 'Failed', 'Pending'
          optional: true
        - id: repairTask.resultCode
          type:
            - number
          description: >-
            A numeric value providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.resultDetails
          type:
            - string
          description: >-
            A string providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.history
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.history.createdUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Created state.
          optional: true
        - id: repairTask.history.claimedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Claimed state.
          optional: true
        - id: repairTask.history.preparingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Preparing state.
          optional: true
        - id: repairTask.history.approvedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Approved state
          optional: true
        - id: repairTask.history.executingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Executing state
          optional: true
        - id: repairTask.history.restoringUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Restoring state
          optional: true
        - id: repairTask.history.completedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Completed state
          optional: true
        - id: repairTask.history.preparingHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Preparing
            state.
          optional: true
        - id: repairTask.history.preparingHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Preparing state.
          optional: true
        - id: repairTask.history.restoringHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Restoring
            state.
          optional: true
        - id: repairTask.history.restoringHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Restoring state.
          optional: true
        - id: repairTask.preparingHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.restoringHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.performPreparingHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Preparing state.
          optional: true
        - id: repairTask.performRestoringHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Restoring state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function createRepairTask(repairTask, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#cancelRepairTaskWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#cancelRepairTaskWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      cancelRepairTaskWithHttpOperationResponse(repairTaskCancelDescription,
      options)
    summary: |-
      Requests the cancellation of the given repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.cancelRepairTaskWithHttpOperationResponse(repairTaskCancelDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: repairTaskCancelDescription
          type:
            - object
          description: |-
            Describes the repair task to be
            cancelled.
        - id: repairTaskCancelDescription.taskId
          type:
            - string
          description: |-
            The ID of the repair
            task.
        - id: repairTaskCancelDescription.version
          type:
            - string
          description: >-
            The current version

            number of the repair task. If non-zero, then the request will only
            succeed

            if this value matches the actual current version of the repair task.
            If

            zero, then no version check is performed.</para>
          optional: true
        - id: repairTaskCancelDescription.requestAbort
          type:
            - boolean
          description: >-
            _True_ if the

            repair should be stopped as soon as possible even if it has already
            started

            executing. _False_ if the repair should be cancelled only if
            execution has

            not yet started.</para>
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        cancelRepairTaskWithHttpOperationResponse(repairTaskCancelDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#cancelRepairTask'
    id: 'azure-servicefabric.ServiceFabricClient#cancelRepairTask'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'cancelRepairTask(repairTaskCancelDescription, options, optionalCallback)'
    summary: |-
      Requests the cancellation of the given repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.cancelRepairTask(repairTaskCancelDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{RepairTaskUpdateInfo} - The deserialized result object.'
        value: '{RepairTaskUpdateInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: repairTaskCancelDescription
          type:
            - object
          description: |-
            Describes the repair task to be
            cancelled.
        - id: repairTaskCancelDescription.taskId
          type:
            - string
          description: |-
            The ID of the repair
            task.
        - id: repairTaskCancelDescription.version
          type:
            - string
          description: >-
            The current version

            number of the repair task. If non-zero, then the request will only
            succeed

            if this value matches the actual current version of the repair task.
            If

            zero, then no version check is performed.</para>
          optional: true
        - id: repairTaskCancelDescription.requestAbort
          type:
            - boolean
          description: >-
            _True_ if the

            repair should be stopped as soon as possible even if it has already
            started

            executing. _False_ if the repair should be cancelled only if
            execution has

            not yet started.</para>
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function cancelRepairTask(repairTaskCancelDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#deleteRepairTaskWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#deleteRepairTaskWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      deleteRepairTaskWithHttpOperationResponse(repairTaskDeleteDescription,
      options)
    summary: |-
      Deletes a completed repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteRepairTaskWithHttpOperationResponse(repairTaskDeleteDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - object
          description: |-
            Describes the repair task to be
            deleted.
        - id: repairTaskDeleteDescription.taskId
          type:
            - string
          description: |-
            The ID of the completed
            repair task to be deleted.
        - id: repairTaskDeleteDescription.version
          type:
            - string
          description: >-
            The current version

            number of the repair task. If non-zero, then the request will only
            succeed

            if this value matches the actual current version of the repair task.
            If

            zero, then no version check is performed.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        deleteRepairTaskWithHttpOperationResponse(repairTaskDeleteDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#deleteRepairTask'
    id: 'azure-servicefabric.ServiceFabricClient#deleteRepairTask'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteRepairTask(repairTaskDeleteDescription, options, optionalCallback)'
    summary: |-
      Deletes a completed repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteRepairTask(repairTaskDeleteDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: repairTaskDeleteDescription
          type:
            - object
          description: |-
            Describes the repair task to be
            deleted.
        - id: repairTaskDeleteDescription.taskId
          type:
            - string
          description: |-
            The ID of the completed
            repair task to be deleted.
        - id: repairTaskDeleteDescription.version
          type:
            - string
          description: >-
            The current version

            number of the repair task. If non-zero, then the request will only
            succeed

            if this value matches the actual current version of the repair task.
            If

            zero, then no version check is performed.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getRepairTaskListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getRepairTaskListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getRepairTaskListWithHttpOperationResponse(options)
    summary: |-
      Gets a list of repair tasks matching the given filters.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getRepairTaskListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.taskIdFilter
          type:
            - string
          description: |-
            The repair task ID prefix to be
            matched.
          optional: true
        - id: options.stateFilter
          type:
            - number
          description: |-
            A bitwise-OR of the following values,
            specifying which task states should be included in the result list.
            - 1 - Created
            - 2 - Claimed
            - 4 - Preparing
            - 8 - Approved
            - 16 - Executing
            - 32 - Restoring
            - 64 - Completed
          optional: true
        - id: options.executorFilter
          type:
            - string
          description: |-
            The name of the repair executor
            whose claimed tasks should be included in the list.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getRepairTaskListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getRepairTaskList'
    id: 'azure-servicefabric.ServiceFabricClient#getRepairTaskList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getRepairTaskList(options, optionalCallback)'
    summary: |-
      Gets a list of repair tasks matching the given filters.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getRepairTaskList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.taskIdFilter
          type:
            - string
          description: |-
            The repair task ID prefix to be
            matched.
          optional: true
        - id: options.stateFilter
          type:
            - number
          description: |-
            A bitwise-OR of the following values,
            specifying which task states should be included in the result list.
            - 1 - Created
            - 2 - Claimed
            - 4 - Preparing
            - 8 - Approved
            - 16 - Executing
            - 32 - Restoring
            - 64 - Completed
          optional: true
        - id: options.executorFilter
          type:
            - string
          description: |-
            The name of the repair executor
            whose claimed tasks should be included in the list.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getRepairTaskList(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#forceApproveRepairTaskWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#forceApproveRepairTaskWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      forceApproveRepairTaskWithHttpOperationResponse(repairTaskApproveDescription,
      options)
    summary: |-
      Forces the approval of the given repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.forceApproveRepairTaskWithHttpOperationResponse(repairTaskApproveDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: repairTaskApproveDescription
          type:
            - object
          description: |-
            Describes the repair task to be
            approved.
        - id: repairTaskApproveDescription.taskId
          type:
            - string
          description: |-
            The ID of the repair
            task.
        - id: repairTaskApproveDescription.version
          type:
            - string
          description: >-
            The current version

            number of the repair task. If non-zero, then the request will only
            succeed

            if this value matches the actual current version of the repair task.
            If

            zero, then no version check is performed.</para>
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        forceApproveRepairTaskWithHttpOperationResponse(repairTaskApproveDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#forceApproveRepairTask'
    id: 'azure-servicefabric.ServiceFabricClient#forceApproveRepairTask'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      forceApproveRepairTask(repairTaskApproveDescription, options,
      optionalCallback)
    summary: |-
      Forces the approval of the given repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.forceApproveRepairTask(repairTaskApproveDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{RepairTaskUpdateInfo} - The deserialized result object.'
        value: '{RepairTaskUpdateInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: repairTaskApproveDescription
          type:
            - object
          description: |-
            Describes the repair task to be
            approved.
        - id: repairTaskApproveDescription.taskId
          type:
            - string
          description: |-
            The ID of the repair
            task.
        - id: repairTaskApproveDescription.version
          type:
            - string
          description: >-
            The current version

            number of the repair task. If non-zero, then the request will only
            succeed

            if this value matches the actual current version of the repair task.
            If

            zero, then no version check is performed.</para>
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#updateRepairTaskHealthPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#updateRepairTaskHealthPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateRepairTaskHealthPolicyWithHttpOperationResponse(repairTaskUpdateHealthPolicyDescription,
      options)
    summary: |-
      Updates the health policy of the given repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicyWithHttpOperationResponse(repairTaskUpdateHealthPolicyDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - object
          description: |-
            Describes the repair
            task healthy policy to be updated.
        - id: repairTaskUpdateHealthPolicyDescription.taskId
          type:
            - string
          description: |-
            The ID of the
            repair task to be updated.
        - id: repairTaskUpdateHealthPolicyDescription.version
          type:
            - string
          description: >-
            The

            current version number of the repair task. If non-zero, then the
            request

            will only succeed if this value matches the actual current value of
            the

            repair task. If zero, then no version check is performed.
          optional: true
        - id: repairTaskUpdateHealthPolicyDescription.performPreparingHealthCheck
          type:
            - boolean
          description: >-
            A

            boolean indicating if health check is to be performed in the
            Preparing stage

            of the repair task. If not specified the existing value should not
            be

            altered. Otherwise, specify the desired new value.
          optional: true
        - id: repairTaskUpdateHealthPolicyDescription.performRestoringHealthCheck
          type:
            - boolean
          description: >-
            A

            boolean indicating if health check is to be performed in the
            Restoring stage

            of the repair task. If not specified the existing value should not
            be

            altered. Otherwise, specify the desired new value.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        updateRepairTaskHealthPolicyWithHttpOperationResponse(repairTaskUpdateHealthPolicyDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#updateRepairTaskHealthPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#updateRepairTaskHealthPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription,
      options, optionalCallback)
    summary: |-
      Updates the health policy of the given repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{RepairTaskUpdateInfo} - The deserialized result object.'
        value: '{RepairTaskUpdateInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type:
            - object
          description: |-
            Describes the repair
            task healthy policy to be updated.
        - id: repairTaskUpdateHealthPolicyDescription.taskId
          type:
            - string
          description: |-
            The ID of the
            repair task to be updated.
        - id: repairTaskUpdateHealthPolicyDescription.version
          type:
            - string
          description: >-
            The

            current version number of the repair task. If non-zero, then the
            request

            will only succeed if this value matches the actual current value of
            the

            repair task. If zero, then no version check is performed.
          optional: true
        - id: repairTaskUpdateHealthPolicyDescription.performPreparingHealthCheck
          type:
            - boolean
          description: >-
            A

            boolean indicating if health check is to be performed in the
            Preparing stage

            of the repair task. If not specified the existing value should not
            be

            altered. Otherwise, specify the desired new value.
          optional: true
        - id: repairTaskUpdateHealthPolicyDescription.performRestoringHealthCheck
          type:
            - boolean
          description: >-
            A

            boolean indicating if health check is to be performed in the
            Restoring stage

            of the repair task. If not specified the existing value should not
            be

            altered. Otherwise, specify the desired new value.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#updateRepairExecutionStateWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#updateRepairExecutionStateWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'updateRepairExecutionStateWithHttpOperationResponse(repairTask, options)'
    summary: |-
      Updates the execution state of a repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateRepairExecutionStateWithHttpOperationResponse(repairTask,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<RepairTaskUpdateInfo>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: repairTask
          type:
            - object
          description: |-
            Describes the repair task to be created or
            updated.
        - id: repairTask.taskId
          type:
            - string
          description: The ID of the repair task.
        - id: repairTask.version
          type:
            - string
          description: >-
            The version of the repair task.

            When creating a new repair task, the version must be set to zero. 
            When

            updating a repair task,

            the version is used for optimistic concurrency checks.  If the
            version is

            set to zero, the update will not check for write conflicts.  If the
            version

            is set to a non-zero value, then the

            update will only succeed if the actual current version of the repair
            task

            matches this value.
          optional: true
        - id: repairTask.description
          type:
            - string
          description: >-
            A description of the purpose of the

            repair task, or other informational details.

            May be set when the repair task is created, and is immutable once
            set.
          optional: true
        - id: repairTask.state
          type:
            - string
          description: >-
            The workflow state of the repair task.

            Valid initial states are Created, Claimed, and Preparing.


            - Invalid - Indicates that the repair task state is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Created - Indicates that the repair task has been created.

            - Claimed - Indicates that the repair task has been claimed by a
            repair

            executor.

            - Preparing - Indicates that the Repair Manager is preparing the
            system to

            handle the impact of the repair task, usually by taking resources
            offline

            gracefully.

            - Approved - Indicates that the repair task has been approved by the
            Repair

            Manager and is safe to execute.

            - Executing - Indicates that execution of the repair task is in
            progress.

            - Restoring - Indicates that the Repair Manager is restoring the
            system to

            its pre-repair state, usually by bringing resources back online.

            - Completed - Indicates that the repair task has completed, and no
            further

            state changes will occur.

            . Possible values include: 'Invalid', 'Created', 'Claimed',
            'Preparing',

            'Approved', 'Executing', 'Restoring', 'Completed'
        - id: repairTask.flags
          type:
            - number
          description: |-
            A bitwise-OR of the following values,
            which gives additional details about the status of the repair task.
            - 1 - Cancellation of the repair has been requested
            - 2 - Abort of the repair has been requested
            - 4 - Approval of the repair was forced via client request
          optional: true
        - id: repairTask.action
          type:
            - string
          description: >-
            The requested repair action. Must be

            specified when the repair task is created, and is immutable once
            set.
        - id: repairTask.target
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.target.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.executor
          type:
            - string
          description: |-
            The name of the repair executor. Must
            be specified in Claimed and later states, and is immutable once set.
          optional: true
        - id: repairTask.executorData
          type:
            - string
          description: |-
            A data string that the repair
            executor can use to store its internal state.
          optional: true
        - id: repairTask.impact
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.impact.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.resultStatus
          type:
            - string
          description: >-
            A value describing the overall

            result of the repair task execution.

            Must be specified in the Restoring and later states, and is
            immutable once

            set.


            - Invalid - Indicates that the repair task result is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Succeeded - Indicates that the repair task completed execution

            successfully.

            - Cancelled - Indicates that the repair task was cancelled prior to

            execution.

            - Interrupted - Indicates that execution of the repair task was
            interrupted

            by a cancellation request after some work had already been
            performed.

            - Failed - Indicates that there was a failure during execution of
            the repair

            task. Some work may have been performed.

            - Pending - Indicates that the repair task result is not yet
            available,

            because the repair task has not finished executing.

            . Possible values include: 'Invalid', 'Succeeded', 'Cancelled',

            'Interrupted', 'Failed', 'Pending'
          optional: true
        - id: repairTask.resultCode
          type:
            - number
          description: >-
            A numeric value providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.resultDetails
          type:
            - string
          description: >-
            A string providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.history
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.history.createdUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Created state.
          optional: true
        - id: repairTask.history.claimedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Claimed state.
          optional: true
        - id: repairTask.history.preparingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Preparing state.
          optional: true
        - id: repairTask.history.approvedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Approved state
          optional: true
        - id: repairTask.history.executingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Executing state
          optional: true
        - id: repairTask.history.restoringUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Restoring state
          optional: true
        - id: repairTask.history.completedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Completed state
          optional: true
        - id: repairTask.history.preparingHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Preparing
            state.
          optional: true
        - id: repairTask.history.preparingHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Preparing state.
          optional: true
        - id: repairTask.history.restoringHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Restoring
            state.
          optional: true
        - id: repairTask.history.restoringHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Restoring state.
          optional: true
        - id: repairTask.preparingHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.restoringHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.performPreparingHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Preparing state.
          optional: true
        - id: repairTask.performRestoringHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Restoring state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function updateRepairExecutionStateWithHttpOperationResponse(repairTask,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#updateRepairExecutionState'
    id: 'azure-servicefabric.ServiceFabricClient#updateRepairExecutionState'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'updateRepairExecutionState(repairTask, options, optionalCallback)'
    summary: |-
      Updates the execution state of a repair task.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.updateRepairExecutionState(repairTask,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{RepairTaskUpdateInfo} - The deserialized result object.'
        value: '{RepairTaskUpdateInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link RepairTaskUpdateInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: repairTask
          type:
            - object
          description: |-
            Describes the repair task to be created or
            updated.
        - id: repairTask.taskId
          type:
            - string
          description: The ID of the repair task.
        - id: repairTask.version
          type:
            - string
          description: >-
            The version of the repair task.

            When creating a new repair task, the version must be set to zero. 
            When

            updating a repair task,

            the version is used for optimistic concurrency checks.  If the
            version is

            set to zero, the update will not check for write conflicts.  If the
            version

            is set to a non-zero value, then the

            update will only succeed if the actual current version of the repair
            task

            matches this value.
          optional: true
        - id: repairTask.description
          type:
            - string
          description: >-
            A description of the purpose of the

            repair task, or other informational details.

            May be set when the repair task is created, and is immutable once
            set.
          optional: true
        - id: repairTask.state
          type:
            - string
          description: >-
            The workflow state of the repair task.

            Valid initial states are Created, Claimed, and Preparing.


            - Invalid - Indicates that the repair task state is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Created - Indicates that the repair task has been created.

            - Claimed - Indicates that the repair task has been claimed by a
            repair

            executor.

            - Preparing - Indicates that the Repair Manager is preparing the
            system to

            handle the impact of the repair task, usually by taking resources
            offline

            gracefully.

            - Approved - Indicates that the repair task has been approved by the
            Repair

            Manager and is safe to execute.

            - Executing - Indicates that execution of the repair task is in
            progress.

            - Restoring - Indicates that the Repair Manager is restoring the
            system to

            its pre-repair state, usually by bringing resources back online.

            - Completed - Indicates that the repair task has completed, and no
            further

            state changes will occur.

            . Possible values include: 'Invalid', 'Created', 'Claimed',
            'Preparing',

            'Approved', 'Executing', 'Restoring', 'Completed'
        - id: repairTask.flags
          type:
            - number
          description: |-
            A bitwise-OR of the following values,
            which gives additional details about the status of the repair task.
            - 1 - Cancellation of the repair has been requested
            - 2 - Abort of the repair has been requested
            - 4 - Approval of the repair was forced via client request
          optional: true
        - id: repairTask.action
          type:
            - string
          description: >-
            The requested repair action. Must be

            specified when the repair task is created, and is immutable once
            set.
        - id: repairTask.target
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.target.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.executor
          type:
            - string
          description: |-
            The name of the repair executor. Must
            be specified in Claimed and later states, and is immutable once set.
          optional: true
        - id: repairTask.executorData
          type:
            - string
          description: |-
            A data string that the repair
            executor can use to store its internal state.
          optional: true
        - id: repairTask.impact
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.impact.kind
          type:
            - string
          description: Polymorphic Discriminator
        - id: repairTask.resultStatus
          type:
            - string
          description: >-
            A value describing the overall

            result of the repair task execution.

            Must be specified in the Restoring and later states, and is
            immutable once

            set.


            - Invalid - Indicates that the repair task result is invalid. All
            Service

            Fabric enumerations have the invalid value.

            - Succeeded - Indicates that the repair task completed execution

            successfully.

            - Cancelled - Indicates that the repair task was cancelled prior to

            execution.

            - Interrupted - Indicates that execution of the repair task was
            interrupted

            by a cancellation request after some work had already been
            performed.

            - Failed - Indicates that there was a failure during execution of
            the repair

            task. Some work may have been performed.

            - Pending - Indicates that the repair task result is not yet
            available,

            because the repair task has not finished executing.

            . Possible values include: 'Invalid', 'Succeeded', 'Cancelled',

            'Interrupted', 'Failed', 'Pending'
          optional: true
        - id: repairTask.resultCode
          type:
            - number
          description: >-
            A numeric value providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.resultDetails
          type:
            - string
          description: >-
            A string providing additional

            details about the result of the repair task execution.

            May be specified in the Restoring and later states, and is immutable
            once

            set.
          optional: true
        - id: repairTask.history
          type:
            - object
          description: ''
          optional: true
        - id: repairTask.history.createdUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Created state.
          optional: true
        - id: repairTask.history.claimedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Claimed state.
          optional: true
        - id: repairTask.history.preparingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Preparing state.
          optional: true
        - id: repairTask.history.approvedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Approved state
          optional: true
        - id: repairTask.history.executingUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Executing state
          optional: true
        - id: repairTask.history.restoringUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Restoring state
          optional: true
        - id: repairTask.history.completedUtcTimestamp
          type:
            - date
          description: |-
            The time when the
            repair task entered the Completed state
          optional: true
        - id: repairTask.history.preparingHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Preparing
            state.
          optional: true
        - id: repairTask.history.preparingHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Preparing state.
          optional: true
        - id: repairTask.history.restoringHealthCheckStartUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task started the health check in the Restoring
            state.
          optional: true
        - id: repairTask.history.restoringHealthCheckEndUtcTimestamp
          type:
            - date
          description: >-
            The

            time when the repair task completed the health check in the
            Restoring state.
          optional: true
        - id: repairTask.preparingHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.restoringHealthCheckState
          type:
            - string
          description: >-
            Possible values

            include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped',
            'TimedOut'
          optional: true
        - id: repairTask.performPreparingHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Preparing state.
          optional: true
        - id: repairTask.performRestoringHealthCheck
          type:
            - boolean
          description: >-
            A value to

            determine if health checks will be performed when the repair task
            enters the

            Restoring state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function updateRepairExecutionState(repairTask, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getReplicaInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getReplicaInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getReplicaInfoListWithHttpOperationResponse(partitionId, options)'
    summary: >-
      Gets the information about replicas of a Service Fabric service

      partition.


      The GetReplicas endpoint returns information about the replicas of the

      specified partition. The respons include the id, role, status, health,
      node

      name, uptime, and other details about the replica.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaInfoListWithHttpOperationResponse(partitionId,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedReplicaInfoList>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<PagedReplicaInfoList>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getReplicaInfoListWithHttpOperationResponse(partitionId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getReplicaInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getReplicaInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getReplicaInfoList(partitionId, options, optionalCallback)'
    summary: >-
      Gets the information about replicas of a Service Fabric service

      partition.


      The GetReplicas endpoint returns information about the replicas of the

      specified partition. The respons include the id, role, status, health,
      node

      name, uptime, and other details about the replica.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaInfoList(partitionId,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PagedReplicaInfoList} - The deserialized result object.'
        value: '{PagedReplicaInfoList} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedReplicaInfoList} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedReplicaInfoList} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getReplicaInfoList(partitionId, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getReplicaInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getReplicaInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getReplicaInfoWithHttpOperationResponse(partitionId, replicaId, options)'
    summary: |-
      Gets the information about a replica of a Service Fabric partition.

      The respons include the id, role, status, health, node name, uptime, and
      other details about the replica.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaInfoWithHttpOperationResponse(partitionId,
      replicaId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<ReplicaInfo>} - The deserialized result object.'
        value: '{HttpOperationResponse<ReplicaInfo>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getReplicaInfoWithHttpOperationResponse(partitionId, replicaId,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getReplicaInfo'
    id: 'azure-servicefabric.ServiceFabricClient#getReplicaInfo'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getReplicaInfo(partitionId, replicaId, options, optionalCallback)'
    summary: |-
      Gets the information about a replica of a Service Fabric partition.

      The respons include the id, role, status, health, node name, uptime, and
      other details about the replica.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaInfo(partitionId,
      replicaId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ReplicaInfo} - The deserialized result object.'
        value: '{ReplicaInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ReplicaInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ReplicaInfo} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getReplicaInfo(partitionId, replicaId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getReplicaHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getReplicaHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getReplicaHealthWithHttpOperationResponse(partitionId, replicaId, options)'
    summary: |-
      Gets the health of a Service Fabric stateful service replica or
      stateless service instance.

      Gets the health of a Service Fabric replica.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the replica based on the health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaHealthWithHttpOperationResponse(partitionId,
      replicaId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ReplicaHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ReplicaHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getReplicaHealthWithHttpOperationResponse(partitionId,
        replicaId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getReplicaHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getReplicaHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getReplicaHealth(partitionId, replicaId, options, optionalCallback)'
    summary: |-
      Gets the health of a Service Fabric stateful service replica or
      stateless service instance.

      Gets the health of a Service Fabric replica.
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the replica based on the health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaHealth(partitionId,
      replicaId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ReplicaHealth} - The deserialized result object.'
        value: '{ReplicaHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ReplicaHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ReplicaHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getReplicaHealth(partitionId, replicaId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getReplicaHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getReplicaHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getReplicaHealthUsingPolicyWithHttpOperationResponse(partitionId,
      replicaId, options)
    summary: >-
      Gets the health of a Service Fabric stateful service replica or

      stateless service instance using the specified policy.


      Gets the health of a Service Fabric stateful service replica or stateless

      service instance.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the cluster based on the health state.

      Use ApplicationHealthPolicy to optionally override the health policies
      used

      to evaluate the health. This API only uses 'ConsiderWarningAsError' field
      of

      the ApplicationHealthPolicy. The rest of the fields are ignored while

      evaluating the health of the replica.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicyWithHttpOperationResponse(partitionId,
      replicaId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ReplicaHealth>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ReplicaHealth>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getReplicaHealthUsingPolicyWithHttpOperationResponse(partitionId,
        replicaId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getReplicaHealthUsingPolicy'
    id: 'azure-servicefabric.ServiceFabricClient#getReplicaHealthUsingPolicy'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getReplicaHealthUsingPolicy(partitionId, replicaId, options,
      optionalCallback)
    summary: >-
      Gets the health of a Service Fabric stateful service replica or

      stateless service instance using the specified policy.


      Gets the health of a Service Fabric stateful service replica or stateless

      service instance.

      Use EventsHealthStateFilter to filter the collection of health events

      reported on the cluster based on the health state.

      Use ApplicationHealthPolicy to optionally override the health policies
      used

      to evaluate the health. This API only uses 'ConsiderWarningAsError' field
      of

      the ApplicationHealthPolicy. The rest of the fields are ignored while

      evaluating the health of the replica.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy(partitionId,
      replicaId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ReplicaHealth} - The deserialized result object.'
        value: '{ReplicaHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ReplicaHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ReplicaHealth} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getReplicaHealthUsingPolicy(partitionId, replicaId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportReplicaHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportReplicaHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportReplicaHealthWithHttpOperationResponse(partitionId, replicaId,
      serviceKind, healthInformation, options)
    summary: >-
      Sends a health report on the Service Fabric replica.


      Reports health state of the specified Service Fabric replica. The report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Replica, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetReplicaHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportReplicaHealthWithHttpOperationResponse(partitionId,
      replicaId, serviceKind, healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: serviceKind
          type:
            - string
          description: >-
            The kind of service replica (Stateless or

            Stateful) for which the health is being reported. Following are the
            possible

            values.

            - Stateless - Does not use Service Fabric to make its state highly
            available

            or reliable. The value is 1

            - Stateful - Uses Service Fabric to make its state or part of its
            state

            highly available and reliable. The value is 2.

            . Possible values include: 'Stateless', 'Stateful'
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function reportReplicaHealthWithHttpOperationResponse(partitionId,
        replicaId, serviceKind, healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportReplicaHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportReplicaHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportReplicaHealth(partitionId, replicaId, serviceKind,
      healthInformation, options, optionalCallback)
    summary: >-
      Sends a health report on the Service Fabric replica.


      Reports health state of the specified Service Fabric replica. The report

      must contain the information about the source of the health report and

      property on which it is reported.

      The report is sent to a Service Fabric gateway Replica, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, run

      GetReplicaHealth and check that the report appears in the HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportReplicaHealth(partitionId,
      replicaId, serviceKind, healthInformation, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: serviceKind
          type:
            - string
          description: >-
            The kind of service replica (Stateless or

            Stateful) for which the health is being reported. Following are the
            possible

            values.

            - Stateless - Does not use Service Fabric to make its state highly
            available

            or reliable. The value is 1

            - Stateful - Uses Service Fabric to make its state or part of its
            state

            highly available and reliable. The value is 2.

            . Possible values include: 'Stateless', 'Stateful'
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportReplicaHealth(partitionId, replicaId, serviceKind,
        healthInformation, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceReplicaInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: |-
      Gets the list of replicas deployed on a Service Fabric node.

      Gets the list containing the information about replicas deployed on a
      Service Fabric node. The information include partition id, replica id,
      status of the replica, name of the service, name of the service type and
      other information. Use PartitionId or ServiceManifestName query parameters
      to return information about the deployed replicas matching the specified
      values for those parameters.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of a service manifest

            registered as part of an application type in a Service Fabric
            cluster.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServiceReplicaInfoListWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceReplicaInfoList(nodeName, applicationId, options,
      optionalCallback)
    summary: |-
      Gets the list of replicas deployed on a Service Fabric node.

      Gets the list containing the information about replicas deployed on a
      Service Fabric node. The information include partition id, replica id,
      status of the replica, name of the service, name of the service type and
      other information. Use PartitionId or ServiceManifestName query parameters
      to return information about the deployed replicas matching the specified
      values for those parameters.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of a service manifest

            registered as part of an application type in a Service Fabric
            cluster.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName, applicationId,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfoWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfoWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceReplicaDetailInfoWithHttpOperationResponse(nodeName,
      partitionId, replicaId, options)
    summary: |-
      Gets the details of replica deployed on a Service Fabric node.

      Gets the details of the replica deployed on a Service Fabric node. The
      information include service kind, service name, current service operation,
      current service operation start date time, partition id, replica/instance
      id, reported load and other information.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoWithHttpOperationResponse(nodeName,
      partitionId, replicaId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedServiceReplicaDetailInfo>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<DeployedServiceReplicaDetailInfo>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServiceReplicaDetailInfoWithHttpOperationResponse(nodeName,
        partitionId, replicaId, options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfo
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfo
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceReplicaDetailInfo(nodeName, partitionId, replicaId,
      options, optionalCallback)
    summary: |-
      Gets the details of replica deployed on a Service Fabric node.

      Gets the details of the replica deployed on a Service Fabric node. The
      information include service kind, service name, current service operation,
      current service operation start date time, partition id, replica/instance
      id, reported load and other information.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo(nodeName,
      partitionId, replicaId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedServiceReplicaDetailInfo} - The deserialized result object.'
        value: '{DeployedServiceReplicaDetailInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServiceReplicaDetailInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServiceReplicaDetailInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName, partitionId,
        replicaId, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfoByPartitionIdWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfoByPartitionIdWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceReplicaDetailInfoByPartitionIdWithHttpOperationResponse(nodeName,
      partitionId, options)
    summary: |-
      Gets the details of replica deployed on a Service Fabric node.

      Gets the details of the replica deployed on a Service Fabric node. The
      information include service kind, service name, current service operation,
      current service operation start date time, partition id, replica/instance
      id, reported load and other information.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionIdWithHttpOperationResponse(nodeName,
      partitionId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedServiceReplicaDetailInfo>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<DeployedServiceReplicaDetailInfo>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServiceReplicaDetailInfoByPartitionIdWithHttpOperationResponse(nodeName,
        partitionId, options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfoByPartitionId
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServiceReplicaDetailInfoByPartitionId
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(nodeName, partitionId,
      options, optionalCallback)
    summary: |-
      Gets the details of replica deployed on a Service Fabric node.

      Gets the details of the replica deployed on a Service Fabric node. The
      information include service kind, service name, current service operation,
      current service operation start date time, partition id, replica/instance
      id, reported load and other information.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId(nodeName,
      partitionId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedServiceReplicaDetailInfo} - The deserialized result object.'
        value: '{DeployedServiceReplicaDetailInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServiceReplicaDetailInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServiceReplicaDetailInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName,
        partitionId, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#restartReplicaWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#restartReplicaWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      restartReplicaWithHttpOperationResponse(nodeName, partitionId, replicaId,
      options)
    summary: >-
      Restarts a service replica of a persisted service running on a

      node.


      Restarts a service replica of a persisted service running on a node.
      Warning

      - There are no safety checks performed when this API is used. Incorrect
      use

      of this API can lead to availability loss for stateful services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.restartReplicaWithHttpOperationResponse(nodeName,
      partitionId, replicaId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function restartReplicaWithHttpOperationResponse(nodeName, partitionId,
        replicaId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#restartReplica'
    id: 'azure-servicefabric.ServiceFabricClient#restartReplica'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      restartReplica(nodeName, partitionId, replicaId, options,
      optionalCallback)
    summary: >-
      Restarts a service replica of a persisted service running on a

      node.


      Restarts a service replica of a persisted service running on a node.
      Warning

      - There are no safety checks performed when this API is used. Incorrect
      use

      of this API can lead to availability loss for stateful services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.restartReplica(nodeName,
      partitionId, replicaId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function restartReplica(nodeName, partitionId, replicaId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#removeReplicaWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#removeReplicaWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      removeReplicaWithHttpOperationResponse(nodeName, partitionId, replicaId,
      options)
    summary: >-
      Removes a service replica running on a node.


      This API simulates a Service Fabric replica failure by removing a replica

      from a Service Fabric cluster. The removal closes the replica, transitions

      the replica to the role None, and then removes all of the state
      information

      of the replica from the cluster. This API tests the replica state removal

      path, and simulates the report fault permanent path through client APIs.

      Warning - There are no safety checks performed when this API is used.

      Incorrect use of this API can lead to data loss for stateful services.In

      addition, the forceRemove flag impacts all other replicas hosted in the
      same

      process.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.removeReplicaWithHttpOperationResponse(nodeName,
      partitionId, replicaId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.forceRemove
          type:
            - boolean
          description: >-
            Remove a Service Fabric application

            or service forcefully without going through the graceful shutdown
            sequence.

            This parameter can be used to forcefully delete an application or
            service

            for which delete is timing out due to issues in the service code
            that

            prevents graceful close of replicas.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function removeReplicaWithHttpOperationResponse(nodeName, partitionId,
        replicaId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#removeReplica'
    id: 'azure-servicefabric.ServiceFabricClient#removeReplica'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'removeReplica(nodeName, partitionId, replicaId, options, optionalCallback)'
    summary: >-
      Removes a service replica running on a node.


      This API simulates a Service Fabric replica failure by removing a replica

      from a Service Fabric cluster. The removal closes the replica, transitions

      the replica to the role None, and then removes all of the state
      information

      of the replica from the cluster. This API tests the replica state removal

      path, and simulates the report fault permanent path through client APIs.

      Warning - There are no safety checks performed when this API is used.

      Incorrect use of this API can lead to data loss for stateful services.In

      addition, the forceRemove flag impacts all other replicas hosted in the
      same

      process.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.removeReplica(nodeName,
      partitionId, replicaId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: replicaId
          type:
            - string
          description: The identifier of the replica.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.forceRemove
          type:
            - boolean
          description: >-
            Remove a Service Fabric application

            or service forcefully without going through the graceful shutdown
            sequence.

            This parameter can be used to forcefully delete an application or
            service

            for which delete is timing out due to issues in the service code
            that

            prevents graceful close of replicas.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function removeReplica(nodeName, partitionId, replicaId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: |-
      Gets the list of service packages deployed on a Service Fabric
      node.

      Returns the information about the service packages deployed on a Service
      Fabric node for the given application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServicePackageInfoListWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageInfoList(nodeName, applicationId, options,
      optionalCallback)
    summary: |-
      Gets the list of service packages deployed on a Service Fabric
      node.

      Returns the information about the service packages deployed on a Service
      Fabric node for the given application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServicePackageInfoList(nodeName, applicationId,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoListByNameWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoListByNameWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageInfoListByNameWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, options)
    summary: >-
      Gets the list of service packages deployed on a Service Fabric node

      matching exactly the specified name.


      Returns the information about the service packages deployed on a Service

      Fabric node for the given application. These results are of service
      packages

      whose name match exactly the service package name specified as the

      parameter.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByNameWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServicePackageInfoListByNameWithHttpOperationResponse(nodeName,
        applicationId, servicePackageName, options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoListByName
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageInfoListByName
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageInfoListByName(nodeName, applicationId,
      servicePackageName, options, optionalCallback)
    summary: >-
      Gets the list of service packages deployed on a Service Fabric node

      matching exactly the specified name.


      Returns the information about the service packages deployed on a Service

      Fabric node for the given application. These results are of service
      packages

      whose name match exactly the service package name specified as the

      parameter.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName(nodeName,
      applicationId, servicePackageName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName,
        applicationId, servicePackageName, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageHealthWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, options)
    summary: |-
      Gets the information about health of an service package for a
      specific application deployed for a Service Fabric node and application.

      Gets the information about health of service package for a specific
      application deployed on a Service Fabric node. Use EventsHealthStateFilter
      to optionally filter for the collection of HealthEvent objects reported on
      the deployed service package based on health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageHealthWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedServicePackageHealth>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<DeployedServicePackageHealth>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServicePackageHealthWithHttpOperationResponse(nodeName,
        applicationId, servicePackageName, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealth'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageHealth(nodeName, applicationId,
      servicePackageName, options, optionalCallback)
    summary: |-
      Gets the information about health of an service package for a
      specific application deployed for a Service Fabric node and application.

      Gets the information about health of service package for a specific
      application deployed on a Service Fabric node. Use EventsHealthStateFilter
      to optionally filter for the collection of HealthEvent objects reported on
      the deployed service package based on health state.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageHealth(nodeName,
      applicationId, servicePackageName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedServicePackageHealth} - The deserialized result object.'
        value: '{DeployedServicePackageHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServicePackageHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServicePackageHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServicePackageHealth(nodeName, applicationId,
        servicePackageName, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealthUsingPolicyWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealthUsingPolicyWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageHealthUsingPolicyWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, options)
    summary: >-
      Gets the information about health of service package for a specific

      application deployed on a Service Fabric node using the specified policy.


      Gets the information about health of an service package for a specific

      application deployed on a Service Fabric node. using the specified policy.

      Use EventsHealthStateFilter to optionally filter for the collection of

      HealthEvent objects reported on the deployed service package based on
      health

      state. Use ApplicationHealthPolicy to optionally override the health

      policies used to evaluate the health. This API only uses

      'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of

      the fields are ignored while evaluating the health of the deployed service

      package.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicyWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<DeployedServicePackageHealth>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<DeployedServicePackageHealth>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedServicePackageHealthUsingPolicyWithHttpOperationResponse(nodeName,
        applicationId, servicePackageName, options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealthUsingPolicy
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedServicePackageHealthUsingPolicy
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedServicePackageHealthUsingPolicy(nodeName, applicationId,
      servicePackageName, options, optionalCallback)
    summary: >-
      Gets the information about health of service package for a specific

      application deployed on a Service Fabric node using the specified policy.


      Gets the information about health of an service package for a specific

      application deployed on a Service Fabric node. using the specified policy.

      Use EventsHealthStateFilter to optionally filter for the collection of

      HealthEvent objects reported on the deployed service package based on
      health

      state. Use ApplicationHealthPolicy to optionally override the health

      policies used to evaluate the health. This API only uses

      'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of

      the fields are ignored while evaluating the health of the deployed service

      package.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy(nodeName,
      applicationId, servicePackageName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeployedServicePackageHealth} - The deserialized result object.'
        value: '{DeployedServicePackageHealth} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServicePackageHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link DeployedServicePackageHealth} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.eventsHealthStateFilter
          type:
            - number
          description: >-
            Allows filtering the

            collection of HealthEvent objects returned based on health state.

            The possible values for this parameter include integer value of one
            of the

            following health states.

            Only events that match the filter are returned. All events are used
            to

            evaluate the aggregated health state.

            If not specified, all entries are returned. The state values are
            flag based

            enumeration, so the value could be a combination of these value
            obtained

            using bitwise 'OR' operator. For example, If the provided value is 6
            then

            all of the events with HealthState value of OK (2) and Warning (4)
            are

            returned.


            - Default - Default value. Matches any HealthState. The value is
            zero.

            - None - Filter that doesn't match any HealthState value. Used in
            order to

            return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The
            value is 2.

            - Warning - Filter that matches input with HealthState value
            Warning. The

            value is 4.

            - Error - Filter that matches input with HealthState value Error.
            The value

            is 8.

            - All - Filter that matches input with any HealthState value. The
            value is

            65535.
          optional: true
        - id: options.applicationHealthPolicy
          type:
            - object
          description: |-
            Describes the health
            policies used to evaluate the health of an application or one of its
            children.
            If not present, the health evaluation uses the health policy from
            application manifest or the default health policy.
          optional: true
        - id: options.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            options.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            options.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: options.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName,
        applicationId, servicePackageName, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#reportDeployedServicePackageHealthWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#reportDeployedServicePackageHealthWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportDeployedServicePackageHealthWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, healthInformation, options)
    summary: >-
      Sends a health report on the Service Fabric deployed service

      package.


      Reports health state of the service package of the application deployed on
      a

      Service Fabric node. The report must contain the information about the

      source of the health report and property on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, get deployed

      service package health and check that the report appears in the
      HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportDeployedServicePackageHealthWithHttpOperationResponse(nodeName,
      applicationId, servicePackageName, healthInformation, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        reportDeployedServicePackageHealthWithHttpOperationResponse(nodeName,
        applicationId, servicePackageName, healthInformation, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#reportDeployedServicePackageHealth'
    id: 'azure-servicefabric.ServiceFabricClient#reportDeployedServicePackageHealth'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      reportDeployedServicePackageHealth(nodeName, applicationId,
      servicePackageName, healthInformation, options, optionalCallback)
    summary: >-
      Sends a health report on the Service Fabric deployed service

      package.


      Reports health state of the service package of the application deployed on
      a

      Service Fabric node. The report must contain the information about the

      source of the health report and property on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to

      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store

      after extra validation.

      For example, the health store may reject the report because of an invalid

      parameter, like a stale sequence number.

      To see whether the report was applied in the health store, get deployed

      service package health and check that the report appears in the
      HealthEvents

      section.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth(nodeName,
      applicationId, servicePackageName, healthInformation, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: servicePackageName
          type:
            - string
          description: The name of the service package.
        - id: healthInformation
          type:
            - object
          description: >-
            Describes the health information for the

            health report. This information needs to be present in all of the
            health

            reports sent to the health manager.
        - id: healthInformation.sourceId
          type:
            - string
          description: >-
            The source name which identifies

            the client/watchdog/system component which generated the health
            information.
        - id: healthInformation.property
          type:
            - string
          description: >-
            The property of the health

            information. An entity can have health reports for different
            properties.

            The property is a string and not a fixed enumeration to allow the
            reporter

            flexibility to categorize the state condition that triggers the
            report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor
            the state

            of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can
            report a

            property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health
            events for

            the specified node.


            Together with the SourceId, the property uniquely identifies the
            health

            information.
        - id: healthInformation.healthState
          type:
            - string
          description: |-
            Possible values include:
            'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
        - id: healthInformation.timeToLiveInMilliSeconds
          type:
            - azure-servicefabric.moment.duration
          description: >-
            The

            duration for which this health report is valid. This field is using
            ISO8601

            format for specifying the duration.

            When clients report periodically, they should send reports with
            higher

            frequency than time to live.

            If clients report on transition, they can set the time to live to
            infinite.

            When time to live expires, the health event that contains the health

            information

            is either removed from health store, if RemoveWhenExpired is true,
            or

            evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          optional: true
        - id: healthInformation.description
          type:
            - string
          description: >-
            The description of the

            health information. It represents free text used to add human
            readable

            information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically
            truncated.

            When truncated, the last characters of the description contain a
            marker

            "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation
            occurred.

            Note that when truncated, the description has less than 4096
            characters from

            the original string.
          optional: true
        - id: healthInformation.sequenceNumber
          type:
            - string
          description: >-
            The sequence number for

            this health report as a numeric string.

            The report sequence number is used by the health store to detect
            stale

            reports.

            If not specified, a sequence number is auto-generated by the health
            client

            when a report is added.
          optional: true
        - id: healthInformation.removeWhenExpired
          type:
            - boolean
          description: >-
            Value that indicates

            whether the report is removed from health store when it expires.

            If set to true, the report is remopved from the health store after
            it

            expires.

            If set to false, the report is treated as an error when expired. The
            value

            of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired
            false

            (default).

            This way, is the reporter has issues (eg. deadlock) and can't
            report, the

            entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.immediate
          type:
            - boolean
          description: >-
            A flag which indicates whether the

            report should be sent immediately.

            A health report is sent to a Service Fabric gateway Application,
            which

            forwards to the health store.

            If Immediate is set to true, the report is sent immediately from
            Http

            Gateway to the health store, regardless of the fabric client
            settings that

            the Http Gateway Application is using.

            This is useful for critical reports that should be sent as soon as
            possible.

            Depending on timing and other conditions, sending the report may
            still fail,

            for example if the Http Gateway is closed or the message doesn't
            reach the

            Gateway.

            If Immediate is set to false, the report is sent based on the health
            client

            settings from the Http Gateway. Therefore, it will be batched
            according to

            the HealthReportSendInterval configuration.

            This is the recommended setting because it allows the health client
            to

            optimize health reporting messages to health store as well as health
            report

            processing.

            By default, reports are not sent immediately.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function reportDeployedServicePackageHealth(nodeName, applicationId,
        servicePackageName, healthInformation, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#deployedServicePackageToNodeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#deployedServicePackageToNodeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      deployedServicePackageToNodeWithHttpOperationResponse(nodeName,
      deployServicePackageToNodeDescription, options)
    summary: >-
      Downloads packages associated with specified service manifest to

      image cache on specified node.


      Downloads packages associated with specified service manifest to image
      cache

      on specified node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deployedServicePackageToNodeWithHttpOperationResponse(nodeName,
      deployServicePackageToNodeDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type:
            - object
          description: |-
            Describes information
            for deploying a service package to a Service Fabric node.
        - id: deployServicePackageToNodeDescription.serviceManifestName
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.applicationTypeName
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.applicationTypeVersion
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.nodeName
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.packageSharingPolicy
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function deployedServicePackageToNodeWithHttpOperationResponse(nodeName,
        deployServicePackageToNodeDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#deployedServicePackageToNode'
    id: 'azure-servicefabric.ServiceFabricClient#deployedServicePackageToNode'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      deployedServicePackageToNode(nodeName,
      deployServicePackageToNodeDescription, options, optionalCallback)
    summary: >-
      Downloads packages associated with specified service manifest to

      image cache on specified node.


      Downloads packages associated with specified service manifest to image
      cache

      on specified node.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deployedServicePackageToNode(nodeName,
      deployServicePackageToNodeDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type:
            - object
          description: |-
            Describes information
            for deploying a service package to a Service Fabric node.
        - id: deployServicePackageToNodeDescription.serviceManifestName
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.applicationTypeName
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.applicationTypeVersion
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.nodeName
          type:
            - string
          description: ''
        - id: deployServicePackageToNodeDescription.packageSharingPolicy
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function deployedServicePackageToNode(nodeName,
        deployServicePackageToNodeDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDeployedCodePackageInfoListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDeployedCodePackageInfoListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedCodePackageInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    summary: |-
      Gets the list of code packages deployed on a Service Fabric node.

      Gets the list of code packages deployed on a Service Fabric node for the
      given application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedCodePackageInfoListWithHttpOperationResponse(nodeName,
      applicationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of a service manifest

            registered as part of an application type in a Service Fabric
            cluster.
          optional: true
        - id: options.codePackageName
          type:
            - string
          description: >-
            The name of code package specified

            in service manifest registered as part of an application type in a
            Service

            Fabric cluster.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getDeployedCodePackageInfoListWithHttpOperationResponse(nodeName,
        applicationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDeployedCodePackageInfoList'
    id: 'azure-servicefabric.ServiceFabricClient#getDeployedCodePackageInfoList'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDeployedCodePackageInfoList(nodeName, applicationId, options,
      optionalCallback)
    summary: |-
      Gets the list of code packages deployed on a Service Fabric node.

      Gets the list of code packages deployed on a Service Fabric node for the
      given application.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList(nodeName,
      applicationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceManifestName
          type:
            - string
          description: >-
            The name of a service manifest

            registered as part of an application type in a Service Fabric
            cluster.
          optional: true
        - id: options.codePackageName
          type:
            - string
          description: >-
            The name of code package specified

            in service manifest registered as part of an application type in a
            Service

            Fabric cluster.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDeployedCodePackageInfoList(nodeName, applicationId,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#restartDeployedCodePackageWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#restartDeployedCodePackageWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      restartDeployedCodePackageWithHttpOperationResponse(nodeName,
      applicationId, restartDeployedCodePackageDescription, options)
    summary: >-
      Restarts a code package deployed on a Service Fabric node in a

      cluster.


      Restarts a code package deployed on a Service Fabric node in a cluster.
      This

      aborts the code package process, which will restart all the user service

      replicas hosted in that process.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.restartDeployedCodePackageWithHttpOperationResponse(nodeName,
      applicationId, restartDeployedCodePackageDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: restartDeployedCodePackageDescription
          type:
            - object
          description: |-
            Describes the deployed
            code package on Service Fabric node to restart.
        - id: restartDeployedCodePackageDescription.serviceManifestName
          type:
            - string
          description: ''
        - id: restartDeployedCodePackageDescription.servicePackageActivationId
          type:
            - string
          description: ''
          optional: true
        - id: restartDeployedCodePackageDescription.codePackageName
          type:
            - string
          description: ''
        - id: restartDeployedCodePackageDescription.codePackageInstanceId
          type:
            - string
          description: ''
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function restartDeployedCodePackageWithHttpOperationResponse(nodeName,
        applicationId, restartDeployedCodePackageDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#restartDeployedCodePackage'
    id: 'azure-servicefabric.ServiceFabricClient#restartDeployedCodePackage'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      restartDeployedCodePackage(nodeName, applicationId,
      restartDeployedCodePackageDescription, options, optionalCallback)
    summary: >-
      Restarts a code package deployed on a Service Fabric node in a

      cluster.


      Restarts a code package deployed on a Service Fabric node in a cluster.
      This

      aborts the code package process, which will restart all the user service

      replicas hosted in that process.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.restartDeployedCodePackage(nodeName,
      applicationId, restartDeployedCodePackageDescription, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: applicationId
          type:
            - string
          description: >-
            The identity of the application. This is

            typically the full name of the application without the 'fabric:' URI
            scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~"

            character. For example, if the application name is
            "fabric://myapp/app1",

            the application identity would be "myapp~app1" in 6.0+ and
            "myapp/app1" in

            previous versions.
        - id: restartDeployedCodePackageDescription
          type:
            - object
          description: |-
            Describes the deployed
            code package on Service Fabric node to restart.
        - id: restartDeployedCodePackageDescription.serviceManifestName
          type:
            - string
          description: ''
        - id: restartDeployedCodePackageDescription.servicePackageActivationId
          type:
            - string
          description: ''
          optional: true
        - id: restartDeployedCodePackageDescription.codePackageName
          type:
            - string
          description: ''
        - id: restartDeployedCodePackageDescription.codePackageInstanceId
          type:
            - string
          description: ''
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function restartDeployedCodePackage(nodeName, applicationId,
        restartDeployedCodePackageDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#createComposeDeploymentWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#createComposeDeploymentWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createComposeDeploymentWithHttpOperationResponse(createComposeDeploymentDescription,
      options)
    summary: |-
      Creates a Service Fabric compose deployment.

      Creates a Service Fabric compose deployment.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createComposeDeploymentWithHttpOperationResponse(createComposeDeploymentDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - object
          description: |-
            Describes the compose
            deployment that needs to be created.
        - id: createComposeDeploymentDescription.deploymentName
          type:
            - string
          description: ''
        - id: createComposeDeploymentDescription.composeFileContent
          type:
            - string
          description: |-
            The
            content of the compose file that describes the deployment to create.
        - id: createComposeDeploymentDescription.registryCredential
          type:
            - object
          description: ''
          optional: true
        - id: >-
            createComposeDeploymentDescription.registryCredential.registryUserName
          type:
            - string
          description: |-
            The
            user name to connect to container registry.
          optional: true
        - id: >-
            createComposeDeploymentDescription.registryCredential.registryPassword
          type:
            - string
          description: |-
            The
            password for supplied username to connect to container registry.
          optional: true
        - id: >-
            createComposeDeploymentDescription.registryCredential.passwordEncrypted
          type:
            - boolean
          description: Indicates that supplied container registry password is encrypted.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        createComposeDeploymentWithHttpOperationResponse(createComposeDeploymentDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#createComposeDeployment'
    id: 'azure-servicefabric.ServiceFabricClient#createComposeDeployment'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      createComposeDeployment(createComposeDeploymentDescription, options,
      optionalCallback)
    summary: |-
      Creates a Service Fabric compose deployment.

      Creates a Service Fabric compose deployment.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.createComposeDeployment(createComposeDeploymentDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: createComposeDeploymentDescription
          type:
            - object
          description: |-
            Describes the compose
            deployment that needs to be created.
        - id: createComposeDeploymentDescription.deploymentName
          type:
            - string
          description: ''
        - id: createComposeDeploymentDescription.composeFileContent
          type:
            - string
          description: |-
            The
            content of the compose file that describes the deployment to create.
        - id: createComposeDeploymentDescription.registryCredential
          type:
            - object
          description: ''
          optional: true
        - id: >-
            createComposeDeploymentDescription.registryCredential.registryUserName
          type:
            - string
          description: |-
            The
            user name to connect to container registry.
          optional: true
        - id: >-
            createComposeDeploymentDescription.registryCredential.registryPassword
          type:
            - string
          description: |-
            The
            password for supplied username to connect to container registry.
          optional: true
        - id: >-
            createComposeDeploymentDescription.registryCredential.passwordEncrypted
          type:
            - boolean
          description: Indicates that supplied container registry password is encrypted.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatusWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatusWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getComposeDeploymentStatusWithHttpOperationResponse(deploymentName,
      options)
    summary: >-
      Gets information about a Service Fabric compose deployment.


      Returns the status of the compose deployment that was created or in the

      process of being created in the Service Fabric cluster and whose name

      matches the one specified as the parameter. The response includes the
      name,

      status and other details about the deployment.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getComposeDeploymentStatusWithHttpOperationResponse(deploymentName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ComposeDeploymentStatusInfo>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<ComposeDeploymentStatusInfo>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getComposeDeploymentStatusWithHttpOperationResponse(deploymentName,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatus'
    id: 'azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatus'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getComposeDeploymentStatus(deploymentName, options, optionalCallback)'
    summary: >-
      Gets information about a Service Fabric compose deployment.


      Returns the status of the compose deployment that was created or in the

      process of being created in the Service Fabric cluster and whose name

      matches the one specified as the parameter. The response includes the
      name,

      status and other details about the deployment.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getComposeDeploymentStatus(deploymentName,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ComposeDeploymentStatusInfo} - The deserialized result object.'
        value: '{ComposeDeploymentStatusInfo} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ComposeDeploymentStatusInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ComposeDeploymentStatusInfo} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getComposeDeploymentStatus(deploymentName, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatusListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatusListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getComposeDeploymentStatusListWithHttpOperationResponse(options)
    summary: |-
      Gets the list of compose deployments created in the Service Fabric
      cluster.

      Gets the status about the compose deployments that were created or in the
      process of being created in the Service Fabric cluster. The response
      includes the name, status and other details about the compose deployments.
      If the list of deployments do not fit in a page, one page of results is
      returned as well as a continuation token which can be used to get the next
      page.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getComposeDeploymentStatusListWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PagedComposeDeploymentStatusInfoList>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<PagedComposeDeploymentStatusInfoList>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.maxResults
          type:
            - number
          description: >-
            The maximum number of results to be

            returned as part of the paged queries. This parameter defines the
            upper

            bound on the number of results returned. The results returned can be
            less

            than the specified maximum results if they do not fit in the message
            as per

            the max message size restrictions defined in the configuration. If
            this

            parameter is zero or not specified, the paged queries includes as
            much

            results as possible that fit in the return message.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getComposeDeploymentStatusListWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatusList'
    id: 'azure-servicefabric.ServiceFabricClient#getComposeDeploymentStatusList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getComposeDeploymentStatusList(options, optionalCallback)'
    summary: |-
      Gets the list of compose deployments created in the Service Fabric
      cluster.

      Gets the status about the compose deployments that were created or in the
      process of being created in the Service Fabric cluster. The response
      includes the name, status and other details about the compose deployments.
      If the list of deployments do not fit in a page, one page of results is
      returned as well as a continuation token which can be used to get the next
      page.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getComposeDeploymentStatusList(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {PagedComposeDeploymentStatusInfoList} - The deserialized result
          object.
        value: >-
          {PagedComposeDeploymentStatusInfoList} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedComposeDeploymentStatusInfoList} for
                               more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PagedComposeDeploymentStatusInfoList} for
                               more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.maxResults
          type:
            - number
          description: >-
            The maximum number of results to be

            returned as part of the paged queries. This parameter defines the
            upper

            bound on the number of results returned. The results returned can be
            less

            than the specified maximum results if they do not fit in the message
            as per

            the max message size restrictions defined in the configuration. If
            this

            parameter is zero or not specified, the paged queries includes as
            much

            results as possible that fit in the return message.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getComposeDeploymentStatusList(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentUpgradeProgressWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentUpgradeProgressWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getComposeDeploymentUpgradeProgressWithHttpOperationResponse(deploymentName,
      options)
    summary: |-
      Gets details for the latest upgrade performed on this Service
      Fabric compose deployment.

      Returns the information about the state of the compose deployment upgrade
      along with details to aid debugging application health issues.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgressWithHttpOperationResponse(deploymentName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ComposeDeploymentUpgradeProgressInfo>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<ComposeDeploymentUpgradeProgressInfo>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        getComposeDeploymentUpgradeProgressWithHttpOperationResponse(deploymentName,
        options)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentUpgradeProgress
    id: >-
      azure-servicefabric.ServiceFabricClient#getComposeDeploymentUpgradeProgress
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getComposeDeploymentUpgradeProgress(deploymentName, options,
      optionalCallback)
    summary: |-
      Gets details for the latest upgrade performed on this Service
      Fabric compose deployment.

      Returns the information about the state of the compose deployment upgrade
      along with details to aid debugging application health issues.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress(deploymentName,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {ComposeDeploymentUpgradeProgressInfo} - The deserialized result
          object.
        value: >-
          {ComposeDeploymentUpgradeProgressInfo} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ComposeDeploymentUpgradeProgressInfo} for
                               more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ComposeDeploymentUpgradeProgressInfo} for
                               more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#removeComposeDeploymentWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#removeComposeDeploymentWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'removeComposeDeploymentWithHttpOperationResponse(deploymentName, options)'
    summary: |-
      Deletes an existing Service Fabric compose deployment from cluster.

      Deletes an existing Service Fabric compose deployment.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.removeComposeDeploymentWithHttpOperationResponse(deploymentName,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        removeComposeDeploymentWithHttpOperationResponse(deploymentName,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#removeComposeDeployment'
    id: 'azure-servicefabric.ServiceFabricClient#removeComposeDeployment'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'removeComposeDeployment(deploymentName, options, optionalCallback)'
    summary: |-
      Deletes an existing Service Fabric compose deployment from cluster.

      Deletes an existing Service Fabric compose deployment.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.removeComposeDeployment(deploymentName,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function removeComposeDeployment(deploymentName, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startComposeDeploymentUpgradeWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startComposeDeploymentUpgradeWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startComposeDeploymentUpgradeWithHttpOperationResponse(deploymentName,
      composeDeploymentUpgradeDescription, options)
    summary: |-
      Starts upgrading a compose deployment in the Service Fabric
      cluster.

      Validates the supplied upgrade parameters and starts upgrading the
      deployment if the parameters are valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startComposeDeploymentUpgradeWithHttpOperationResponse(deploymentName,
      composeDeploymentUpgradeDescription, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type:
            - object
          description: |-
            Parameters for upgrading
            compose deployment.
        - id: composeDeploymentUpgradeDescription.deploymentName
          type:
            - string
          description: ''
        - id: composeDeploymentUpgradeDescription.composeFileContent
          type:
            - string
          description: |-
            The
            content of the compose file that describes the deployment to create.
        - id: composeDeploymentUpgradeDescription.registryCredential
          type:
            - object
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.registryCredential.registryUserName
          type:
            - string
          description: The user name to connect to container registry.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.registryCredential.registryPassword
          type:
            - string
          description: The password for supplied username to connect to container registry.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.registryCredential.passwordEncrypted
          type:
            - boolean
          description: Indicates that supplied container registry password is encrypted.
          optional: true
        - id: composeDeploymentUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rolling'
        - id: composeDeploymentUpgradeDescription.rollingUpgradeMode
          type:
            - string
          description: >-
            Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual',

            'Monitored'
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds
          type:
            - number
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.monitoringPolicy
          type:
            - object
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.monitoringPolicy.failureAction
          type:
            - string
          description: 'Possible values include: ''Invalid'', ''Rollback'', ''Manual'''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.applicationHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        startComposeDeploymentUpgradeWithHttpOperationResponse(deploymentName,
        composeDeploymentUpgradeDescription, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startComposeDeploymentUpgrade'
    id: 'azure-servicefabric.ServiceFabricClient#startComposeDeploymentUpgrade'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startComposeDeploymentUpgrade(deploymentName,
      composeDeploymentUpgradeDescription, options, optionalCallback)
    summary: |-
      Starts upgrading a compose deployment in the Service Fabric
      cluster.

      Validates the supplied upgrade parameters and starts upgrading the
      deployment if the parameters are valid.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade(deploymentName,
      composeDeploymentUpgradeDescription, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: deploymentName
          type:
            - string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type:
            - object
          description: |-
            Parameters for upgrading
            compose deployment.
        - id: composeDeploymentUpgradeDescription.deploymentName
          type:
            - string
          description: ''
        - id: composeDeploymentUpgradeDescription.composeFileContent
          type:
            - string
          description: |-
            The
            content of the compose file that describes the deployment to create.
        - id: composeDeploymentUpgradeDescription.registryCredential
          type:
            - object
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.registryCredential.registryUserName
          type:
            - string
          description: The user name to connect to container registry.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.registryCredential.registryPassword
          type:
            - string
          description: The password for supplied username to connect to container registry.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.registryCredential.passwordEncrypted
          type:
            - boolean
          description: Indicates that supplied container registry password is encrypted.
          optional: true
        - id: composeDeploymentUpgradeDescription.upgradeKind
          type:
            - string
          description: |-
            Possible
            values include: 'Invalid', 'Rolling'
        - id: composeDeploymentUpgradeDescription.rollingUpgradeMode
          type:
            - string
          description: >-
            Possible values include: 'Invalid', 'UnmonitoredAuto',
            'UnmonitoredManual',

            'Monitored'
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds
          type:
            - number
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.forceRestart
          type:
            - boolean
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.monitoringPolicy
          type:
            - object
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.monitoringPolicy.failureAction
          type:
            - string
          description: 'Possible values include: ''Invalid'', ''Rollback'', ''Manual'''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds
          type:
            - string
          description: ''
          optional: true
        - id: composeDeploymentUpgradeDescription.applicationHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: >-
            Indicates whether warnings are treated with the same severity as
            errors.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed

            values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of
            deployed

            applications that can be unhealthy before the application is
            considered in

            error.

            This is calculated by dividing the number of unhealthy deployed
            applications

            over the number of nodes where the application is currently deployed
            on in

            the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed

            values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of
            partitions

            that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy

            partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            partitions

            over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers
            of

            partitions. Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
          type:
            - number
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed

            values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            replicas that

            can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy
            replica,

            the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            replicas

            over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers
            of

            replicas. Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices
          type:
            - number
          description: >-
            The maximum maximum allowed percentage of unhealthy services.
            Allowed values

            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of
            services that

            can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy
            service,

            the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of
            the

            specific service type over the total number of services of the
            specific

            service type.

            The computation rounds up to tolerate one failure on small numbers
            of

            services. Default percentage is zero.
          optional: true
        - id: >-
            composeDeploymentUpgradeDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startComposeDeploymentUpgrade(deploymentName,
        composeDeploymentUpgradeDescription, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startChaosWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startChaosWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'startChaosWithHttpOperationResponse(chaosParameters, options)'
    summary: >-
      Starts Chaos in the cluster.


      If Chaos is not already running in the cluster, it starts Chaos with the

      passed in Chaos parameters.

      If Chaos is already running when this call is made, the call fails with
      the

      error code FABRIC_E_CHAOS_ALREADY_RUNNING.

      Please refer to the article [Induce controlled Chaos in Service Fabric

      clusters](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-controlled-chaos)

      for more details.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startChaosWithHttpOperationResponse(chaosParameters,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: chaosParameters
          type:
            - object
          description: |-
            Describes all the parameters to configure a
            Chaos run.
        - id: chaosParameters.timeToRunInSeconds
          type:
            - string
          description: >-
            Total time (in seconds)

            for which Chaos will run before automatically stopping. The maximum
            allowed

            value is 4,294,967,295 (System.UInt32.MaxValue).
          optional: true
        - id: chaosParameters.maxClusterStabilizationTimeoutInSeconds
          type:
            - number
          description: >-
            The maximum amount of time to wait for all cluster entities to
            become stable

            and healthy. Chaos executes in iterations and at the start of each
            iteration

            it validates the health of cluster entities.

            During validation if a cluster entity is not stable and healthy
            within

            MaxClusterStabilizationTimeoutInSeconds, Chaos generates a
            validation failed

            event.
          optional: true
        - id: chaosParameters.maxConcurrentFaults
          type:
            - number
          description: >-
            MaxConcurrentFaults is

            the maximum number of concurrent faults induced per iteration.

            Chaos executes in iterations and two consecutive iterations are
            separated by

            a validation phase.

            The higher the concurrency, the more aggressive the injection of
            faults --

            inducing more complex series of states to uncover bugs.

            The recommendation is to start with a value of 2 or 3 and to
            exercise

            caution while moving up.
          optional: true
        - id: chaosParameters.enableMoveReplicaFaults
          type:
            - boolean
          description: |-
            Enables or
            disables the move primary and move secondary faults.
          optional: true
        - id: chaosParameters.waitTimeBetweenFaultsInSeconds
          type:
            - number
          description: >-
            Wait time

            (in seconds) between consecutive faults within a single iteration.

            The larger the value, the lower the overlapping between faults and
            the

            simpler the sequence of state transitions that the cluster goes
            through.

            The recommendation is to start with a value between 1 and 5 and
            exercise

            caution while moving up.
          optional: true
        - id: chaosParameters.waitTimeBetweenIterationsInSeconds
          type:
            - number
          description: >-
            Time-separation (in seconds) between two consecutive iterations of
            Chaos.

            The larger the value, the lower the fault injection rate.
          optional: true
        - id: chaosParameters.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: chaosParameters.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: |-
            Indicates
            whether warnings are treated with the same severity as errors.
          optional: true
        - id: chaosParameters.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum

            allowed percentage of unhealthy nodes before reporting an error. For

            example, to allow 10% of nodes to be unhealthy, this value would be
            10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: chaosParameters.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: chaosParameters.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: chaosParameters.context
          type:
            - object
          description: ''
          optional: true
        - id: chaosParameters.context.map
          type:
            - object
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function startChaosWithHttpOperationResponse(chaosParameters, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startChaos'
    id: 'azure-servicefabric.ServiceFabricClient#startChaos'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'startChaos(chaosParameters, options, optionalCallback)'
    summary: >-
      Starts Chaos in the cluster.


      If Chaos is not already running in the cluster, it starts Chaos with the

      passed in Chaos parameters.

      If Chaos is already running when this call is made, the call fails with
      the

      error code FABRIC_E_CHAOS_ALREADY_RUNNING.

      Please refer to the article [Induce controlled Chaos in Service Fabric

      clusters](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-controlled-chaos)

      for more details.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startChaos(chaosParameters,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: chaosParameters
          type:
            - object
          description: |-
            Describes all the parameters to configure a
            Chaos run.
        - id: chaosParameters.timeToRunInSeconds
          type:
            - string
          description: >-
            Total time (in seconds)

            for which Chaos will run before automatically stopping. The maximum
            allowed

            value is 4,294,967,295 (System.UInt32.MaxValue).
          optional: true
        - id: chaosParameters.maxClusterStabilizationTimeoutInSeconds
          type:
            - number
          description: >-
            The maximum amount of time to wait for all cluster entities to
            become stable

            and healthy. Chaos executes in iterations and at the start of each
            iteration

            it validates the health of cluster entities.

            During validation if a cluster entity is not stable and healthy
            within

            MaxClusterStabilizationTimeoutInSeconds, Chaos generates a
            validation failed

            event.
          optional: true
        - id: chaosParameters.maxConcurrentFaults
          type:
            - number
          description: >-
            MaxConcurrentFaults is

            the maximum number of concurrent faults induced per iteration.

            Chaos executes in iterations and two consecutive iterations are
            separated by

            a validation phase.

            The higher the concurrency, the more aggressive the injection of
            faults --

            inducing more complex series of states to uncover bugs.

            The recommendation is to start with a value of 2 or 3 and to
            exercise

            caution while moving up.
          optional: true
        - id: chaosParameters.enableMoveReplicaFaults
          type:
            - boolean
          description: |-
            Enables or
            disables the move primary and move secondary faults.
          optional: true
        - id: chaosParameters.waitTimeBetweenFaultsInSeconds
          type:
            - number
          description: >-
            Wait time

            (in seconds) between consecutive faults within a single iteration.

            The larger the value, the lower the overlapping between faults and
            the

            simpler the sequence of state transitions that the cluster goes
            through.

            The recommendation is to start with a value between 1 and 5 and
            exercise

            caution while moving up.
          optional: true
        - id: chaosParameters.waitTimeBetweenIterationsInSeconds
          type:
            - number
          description: >-
            Time-separation (in seconds) between two consecutive iterations of
            Chaos.

            The larger the value, the lower the fault injection rate.
          optional: true
        - id: chaosParameters.clusterHealthPolicy
          type:
            - object
          description: ''
          optional: true
        - id: chaosParameters.clusterHealthPolicy.considerWarningAsError
          type:
            - boolean
          description: |-
            Indicates
            whether warnings are treated with the same severity as errors.
          optional: true
        - id: chaosParameters.clusterHealthPolicy.maxPercentUnhealthyNodes
          type:
            - number
          description: >-
            The maximum

            allowed percentage of unhealthy nodes before reporting an error. For

            example, to allow 10% of nodes to be unhealthy, this value would be
            10.


            The percentage represents the maximum tolerated percentage of nodes
            that can

            be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy
            node, the

            health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy
            nodes over

            the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers
            of nodes.

            Default percentage is zero.


            In large clusters, some nodes will always be down or out for
            repairs, so

            this percentage should be configured to tolerate that.
          optional: true
        - id: chaosParameters.clusterHealthPolicy.maxPercentUnhealthyApplications
          type:
            - number
          description: >-
            The

            maximum allowed percentage of unhealthy applications before
            reporting an

            error. For example, to allow 10% of applications to be unhealthy,
            this value

            would be 10.


            The percentage represents the maximum tolerated percentage of
            applications

            that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy

            application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications
            over the

            total number of application instances in the cluster, excluding
            applications

            of application types that are included in the

            ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers
            of

            applications. Default percentage is zero.
          optional: true
        - id: chaosParameters.clusterHealthPolicy.applicationTypeHealthPolicyMap
          type:
            - array
          description: ''
          optional: true
        - id: chaosParameters.context
          type:
            - object
          description: ''
          optional: true
        - id: chaosParameters.context.map
          type:
            - object
          description: ''
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function startChaos(chaosParameters, options, optionalCallback)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#stopChaosWithHttpOperationResponse'
    id: 'azure-servicefabric.ServiceFabricClient#stopChaosWithHttpOperationResponse'
    parent: azure-servicefabric.ServiceFabricClient
    name: stopChaosWithHttpOperationResponse(options)
    summary: |-
      Stops Chaos in the cluster if it is already running, otherwise it
      does nothing.

      Stops Chaos from scheduling further faults; but, the in-flight faults are
      not affected.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.stopChaosWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function stopChaosWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#stopChaos'
    id: 'azure-servicefabric.ServiceFabricClient#stopChaos'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'stopChaos(options, optionalCallback)'
    summary: |-
      Stops Chaos in the cluster if it is already running, otherwise it
      does nothing.

      Stops Chaos from scheduling further faults; but, the in-flight faults are
      not affected.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.stopChaos(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function stopChaos(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getChaosReportWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getChaosReportWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getChaosReportWithHttpOperationResponse(options)
    summary: >-
      Gets the next segment of the Chaos report based on the passed-in

      continuation token or the passed-in time-range.


      You can either specify the ContinuationToken to get the next segment of
      the

      Chaos report or you can specify the time-range

      through StartTimeUtc and EndTimeUtc, but you cannot specify both the

      ContinuationToken and the time-range in the same call.

      When there are more than 100 Chaos events, the Chaos report is returned in

      segments where a segment contains no more than 100 Chaos events.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getChaosReportWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<ChaosReport>} - The deserialized result object.'
        value: '{HttpOperationResponse<ChaosReport>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.startTimeUtc
          type:
            - string
          description: >-
            The count of ticks representing the

            start time of the time range for which a Chaos report is to be
            generated.

            Please consult [DateTime.Ticks

            Property](https://msdn.microsoft.com/en-us/library/system.datetime.ticks%28v=vs.110%29)

            for details about tick.
          optional: true
        - id: options.endTimeUtc
          type:
            - string
          description: >-
            The count of ticks representing the end

            time of the time range for which a Chaos report is to be generated.
            Please

            consult [DateTime.Ticks

            Property](https://msdn.microsoft.com/en-us/library/system.datetime.ticks%28v=vs.110%29)

            for details about tick.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getChaosReportWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getChaosReport'
    id: 'azure-servicefabric.ServiceFabricClient#getChaosReport'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getChaosReport(options, optionalCallback)'
    summary: >-
      Gets the next segment of the Chaos report based on the passed-in

      continuation token or the passed-in time-range.


      You can either specify the ContinuationToken to get the next segment of
      the

      Chaos report or you can specify the time-range

      through StartTimeUtc and EndTimeUtc, but you cannot specify both the

      ContinuationToken and the time-range in the same call.

      When there are more than 100 Chaos events, the Chaos report is returned in

      segments where a segment contains no more than 100 Chaos events.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getChaosReport(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ChaosReport} - The deserialized result object.'
        value: '{ChaosReport} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ChaosReport} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ChaosReport} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.continuationToken
          type:
            - string
          description: >-
            The continuation token parameter

            is used to obtain next set of results. A continuation token with a
            non empty

            value is included in the response of the API when the results from
            the

            system do not fit in a single response. When this value is passed to
            the

            next API call, the API returns next set of results. If there are no
            further

            results then the continuation token does not contain a value. The
            value of

            this parameter should not be URL encoded.
          optional: true
        - id: options.startTimeUtc
          type:
            - string
          description: >-
            The count of ticks representing the

            start time of the time range for which a Chaos report is to be
            generated.

            Please consult [DateTime.Ticks

            Property](https://msdn.microsoft.com/en-us/library/system.datetime.ticks%28v=vs.110%29)

            for details about tick.
          optional: true
        - id: options.endTimeUtc
          type:
            - string
          description: >-
            The count of ticks representing the end

            time of the time range for which a Chaos report is to be generated.
            Please

            consult [DateTime.Ticks

            Property](https://msdn.microsoft.com/en-us/library/system.datetime.ticks%28v=vs.110%29)

            for details about tick.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getChaosReport(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#uploadFileWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#uploadFileWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'uploadFileWithHttpOperationResponse(contentPath, options)'
    summary: >-
      Uploads contents of the file to the image store.


      Uploads contents of the file to the image store. Use this API if the file
      is

      small enough to upload again if the connection fails. The file's data
      needs

      to be added to the request body. The contents will be uploaded to the

      specified path. Image store service uses a mark file to indicate the

      availability of the folder. The mark file is an empty file named "_.dir".

      The mark file is generated by the image store service when all files in a

      folder are uploaded. When using File-by-File approach to upload
      application

      package in REST, the image store service isn't aware of the file hierarchy

      of the application package; you need to create a mark file per folder and

      upload it last, to let the image store service know that the folder is

      complete.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.uploadFileWithHttpOperationResponse(contentPath,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: contentPath
          type:
            - string
          description: |-
            Relative path to file or folder in the image
            store from its root.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function uploadFileWithHttpOperationResponse(contentPath, options)'
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#uploadFile'
    id: 'azure-servicefabric.ServiceFabricClient#uploadFile'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'uploadFile(contentPath, options, optionalCallback)'
    summary: >-
      Uploads contents of the file to the image store.


      Uploads contents of the file to the image store. Use this API if the file
      is

      small enough to upload again if the connection fails. The file's data
      needs

      to be added to the request body. The contents will be uploaded to the

      specified path. Image store service uses a mark file to indicate the

      availability of the folder. The mark file is an empty file named "_.dir".

      The mark file is generated by the image store service when all files in a

      folder are uploaded. When using File-by-File approach to upload
      application

      package in REST, the image store service isn't aware of the file hierarchy

      of the application package; you need to create a mark file per folder and

      upload it last, to let the image store service know that the folder is

      complete.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.uploadFile(contentPath, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: contentPath
          type:
            - string
          description: |-
            Relative path to file or folder in the image
            store from its root.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function uploadFile(contentPath, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getImageStoreContentWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getImageStoreContentWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getImageStoreContentWithHttpOperationResponse(contentPath, options)'
    summary: |-
      Gets the image store content information.

      Returns the information about the image store content at the specified
      contentPath relative to the root of the image store.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getImageStoreContentWithHttpOperationResponse(contentPath,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ImageStoreContent>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ImageStoreContent>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: contentPath
          type:
            - string
          description: |-
            Relative path to file or folder in the image
            store from its root.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getImageStoreContentWithHttpOperationResponse(contentPath,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getImageStoreContent'
    id: 'azure-servicefabric.ServiceFabricClient#getImageStoreContent'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getImageStoreContent(contentPath, options, optionalCallback)'
    summary: |-
      Gets the image store content information.

      Returns the information about the image store content at the specified
      contentPath relative to the root of the image store.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getImageStoreContent(contentPath,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ImageStoreContent} - The deserialized result object.'
        value: '{ImageStoreContent} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ImageStoreContent} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ImageStoreContent} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: contentPath
          type:
            - string
          description: |-
            Relative path to file or folder in the image
            store from its root.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getImageStoreContent(contentPath, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#deleteImageStoreContentWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#deleteImageStoreContentWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteImageStoreContentWithHttpOperationResponse(contentPath, options)'
    summary: |-
      Deletes existing image store content.

      Deletes existing image store content being found within the given image
      store relative path. This can be used to delete uploaded application
      packages once they are provisioned.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteImageStoreContentWithHttpOperationResponse(contentPath,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: contentPath
          type:
            - string
          description: |-
            Relative path to file or folder in the image
            store from its root.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function deleteImageStoreContentWithHttpOperationResponse(contentPath,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#deleteImageStoreContent'
    id: 'azure-servicefabric.ServiceFabricClient#deleteImageStoreContent'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'deleteImageStoreContent(contentPath, options, optionalCallback)'
    summary: |-
      Deletes existing image store content.

      Deletes existing image store content being found within the given image
      store relative path. This can be used to delete uploaded application
      packages once they are provisioned.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.deleteImageStoreContent(contentPath,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: contentPath
          type:
            - string
          description: |-
            Relative path to file or folder in the image
            store from its root.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function deleteImageStoreContent(contentPath, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getImageStoreRootContentWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getImageStoreRootContentWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: getImageStoreRootContentWithHttpOperationResponse(options)
    summary: |-
      Gets the content information at the root of the image store.

      Returns the information about the image store content at the root of the
      image store.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getImageStoreRootContentWithHttpOperationResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ImageStoreContent>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ImageStoreContent>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: function getImageStoreRootContentWithHttpOperationResponse(options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getImageStoreRootContent'
    id: 'azure-servicefabric.ServiceFabricClient#getImageStoreRootContent'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getImageStoreRootContent(options, optionalCallback)'
    summary: |-
      Gets the content information at the root of the image store.

      Returns the information about the image store content at the root of the
      image store.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getImageStoreRootContent(options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ImageStoreContent} - The deserialized result object.'
        value: '{ImageStoreContent} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ImageStoreContent} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ImageStoreContent} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function getImageStoreRootContent(options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#copyImageStoreContentWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#copyImageStoreContentWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      copyImageStoreContentWithHttpOperationResponse(imageStoreCopyDescription,
      options)
    summary: >-
      Copies image store content internally


      Copies the image store content from the source image store relative path
      to

      the destination image store relative path.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.copyImageStoreContentWithHttpOperationResponse(imageStoreCopyDescription,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: imageStoreCopyDescription
          type:
            - object
          description: |-
            Describes the copy description for
            the image store.
        - id: imageStoreCopyDescription.remoteSource
          type:
            - string
          description: |-
            The relative path of
            source image store content to be copied from.
        - id: imageStoreCopyDescription.remoteDestination
          type:
            - string
          description: |-
            The relative
            path of destination image store content to be copied to.
        - id: imageStoreCopyDescription.skipFiles
          type:
            - array
          description: |-
            The list of the file
            names to be skipped for copying.
          optional: true
        - id: imageStoreCopyDescription.checkMarkFile
          type:
            - boolean
          description: >-
            Indicates whether

            to check mark file during copying. The property is true if checking
            mark

            file is required, false otherwise. The mark file is used to check
            whether

            the folder is well constructed. If the property is true and mark
            file does

            not exist, the copy is skipped.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function
        copyImageStoreContentWithHttpOperationResponse(imageStoreCopyDescription,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#copyImageStoreContent'
    id: 'azure-servicefabric.ServiceFabricClient#copyImageStoreContent'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      copyImageStoreContent(imageStoreCopyDescription, options,
      optionalCallback)
    summary: >-
      Copies image store content internally


      Copies the image store content from the source image store relative path
      to

      the destination image store relative path.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.copyImageStoreContent(imageStoreCopyDescription,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: imageStoreCopyDescription
          type:
            - object
          description: |-
            Describes the copy description for
            the image store.
        - id: imageStoreCopyDescription.remoteSource
          type:
            - string
          description: |-
            The relative path of
            source image store content to be copied from.
        - id: imageStoreCopyDescription.remoteDestination
          type:
            - string
          description: |-
            The relative
            path of destination image store content to be copied to.
        - id: imageStoreCopyDescription.skipFiles
          type:
            - array
          description: |-
            The list of the file
            names to be skipped for copying.
          optional: true
        - id: imageStoreCopyDescription.checkMarkFile
          type:
            - boolean
          description: >-
            Indicates whether

            to check mark file during copying. The property is true if checking
            mark

            file is required, false otherwise. The mark file is used to check
            whether

            the folder is well constructed. If the property is true and mark
            file does

            not exist, the copy is skipped.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#invokeInfrastructureCommandWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#invokeInfrastructureCommandWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'invokeInfrastructureCommandWithHttpOperationResponse(command, options)'
    summary: |-
      Invokes an administrative command on the given Infrastructure
      Service instance.

      For clusters that have one or more instances of the Infrastructure Service
      configured,
      this API provides a way to send infrastructure-specific commands to a
      particular
      instance of the Infrastructure Service.

      Available commands and their corresponding response formats vary depending
      upon
      the infrastructure on which the cluster is running.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.invokeInfrastructureCommandWithHttpOperationResponse(command,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<String>} - The deserialized result object.'
        value: '{HttpOperationResponse<String>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content
            of the command is infrastructure-specific.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceId
          type:
            - string
          description: >-
            The identity of the infrastructure

            service. This is  the full name of the infrastructure service
            without the

            'fabric:' URI scheme. This parameter required only for the cluster
            that have

            more than one instance of infrastructure service running.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function invokeInfrastructureCommandWithHttpOperationResponse(command,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#invokeInfrastructureCommand'
    id: 'azure-servicefabric.ServiceFabricClient#invokeInfrastructureCommand'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'invokeInfrastructureCommand(command, options, optionalCallback)'
    summary: |-
      Invokes an administrative command on the given Infrastructure
      Service instance.

      For clusters that have one or more instances of the Infrastructure Service
      configured,
      this API provides a way to send infrastructure-specific commands to a
      particular
      instance of the Infrastructure Service.

      Available commands and their corresponding response formats vary depending
      upon
      the infrastructure on which the cluster is running.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.invokeInfrastructureCommand(command,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{String} - The deserialized result object.'
        value: '{String} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {string} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {string} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content
            of the command is infrastructure-specific.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceId
          type:
            - string
          description: >-
            The identity of the infrastructure

            service. This is  the full name of the infrastructure service
            without the

            'fabric:' URI scheme. This parameter required only for the cluster
            that have

            more than one instance of infrastructure service running.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function invokeInfrastructureCommand(command, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#invokeInfrastructureQueryWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#invokeInfrastructureQueryWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'invokeInfrastructureQueryWithHttpOperationResponse(command, options)'
    summary: |-
      Invokes a read-only query on the given infrastructure service
      instance.

      For clusters that have one or more instances of the Infrastructure Service
      configured,
      this API provides a way to send infrastructure-specific queries to a
      particular
      instance of the Infrastructure Service.

      Available commands and their corresponding response formats vary depending
      upon
      the infrastructure on which the cluster is running.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.invokeInfrastructureQueryWithHttpOperationResponse(command,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<String>} - The deserialized result object.'
        value: '{HttpOperationResponse<String>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content
            of the command is infrastructure-specific.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceId
          type:
            - string
          description: >-
            The identity of the infrastructure

            service. This is  the full name of the infrastructure service
            without the

            'fabric:' URI scheme. This parameter required only for the cluster
            that have

            more than one instance of infrastructure service running.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function invokeInfrastructureQueryWithHttpOperationResponse(command,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#invokeInfrastructureQuery'
    id: 'azure-servicefabric.ServiceFabricClient#invokeInfrastructureQuery'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'invokeInfrastructureQuery(command, options, optionalCallback)'
    summary: |-
      Invokes a read-only query on the given infrastructure service
      instance.

      For clusters that have one or more instances of the Infrastructure Service
      configured,
      this API provides a way to send infrastructure-specific queries to a
      particular
      instance of the Infrastructure Service.

      Available commands and their corresponding response formats vary depending
      upon
      the infrastructure on which the cluster is running.

      This API supports the Service Fabric platform; it is not meant to be used
      directly from your code.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.invokeInfrastructureQuery(command,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{String} - The deserialized result object.'
        value: '{String} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {string} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {string} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: command
          type:
            - string
          description: |-
            The text of the command to be invoked. The content
            of the command is infrastructure-specific.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.serviceId
          type:
            - string
          description: >-
            The identity of the infrastructure

            service. This is  the full name of the infrastructure service
            without the

            'fabric:' URI scheme. This parameter required only for the cluster
            that have

            more than one instance of infrastructure service running.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function invokeInfrastructureQuery(command, options, optionalCallback)'
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startDataLossWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startDataLossWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startDataLossWithHttpOperationResponse(serviceId, partitionId,
      operationId, dataLossMode, options)
    summary: >-
      This API will induce data loss for the specified partition. It will

      trigger a call to the OnDataLossAsync API of the partition.


      This API will induce data loss for the specified partition. It will
      trigger

      a call to the OnDataLoss API of the partition.

      Actual data loss will depend on the specified DataLossMode

      PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is

      triggered for the partition but actual data loss depends on the presence
      of

      in-flight replication.

      FullDataLoss - All replicas are removed hence all data is lost and

      OnDataLoss is triggered.


      This API should only be called with a stateful service as the target.


      Calling this API with a system service as the target is not advised.


      Note:  Once this API has been called, it cannot be reversed. Calling

      CancelOperation will only stop execution and clean up internal system
      state.

      It will not restore data if the command has progressed far enough to cause

      data loss.


      Call the GetDataLossProgress API with the same OperationId to return

      information on the operation started with this API.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startDataLossWithHttpOperationResponse(serviceId,
      partitionId, operationId, dataLossMode, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: dataLossMode
          type:
            - string
          description: >-
            This enum is passed to the StartDataLoss API to

            indicate what type of data loss to induce.

            - Invalid - Reserved.  Do not pass into API.

            - PartialDataLoss - PartialDataLoss option will cause a quorum of
            replicas

            to go down, triggering an OnDataLoss event in the system for the
            given

            partition.

            - FullDataLoss - FullDataLoss option will drop all the replicas
            which means

            that all the data will be lost.

            . Possible values include: 'Invalid', 'PartialDataLoss',
            'FullDataLoss'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function startDataLossWithHttpOperationResponse(serviceId, partitionId,
        operationId, dataLossMode, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startDataLoss'
    id: 'azure-servicefabric.ServiceFabricClient#startDataLoss'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startDataLoss(serviceId, partitionId, operationId, dataLossMode, options,
      optionalCallback)
    summary: >-
      This API will induce data loss for the specified partition. It will

      trigger a call to the OnDataLossAsync API of the partition.


      This API will induce data loss for the specified partition. It will
      trigger

      a call to the OnDataLoss API of the partition.

      Actual data loss will depend on the specified DataLossMode

      PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is

      triggered for the partition but actual data loss depends on the presence
      of

      in-flight replication.

      FullDataLoss - All replicas are removed hence all data is lost and

      OnDataLoss is triggered.


      This API should only be called with a stateful service as the target.


      Calling this API with a system service as the target is not advised.


      Note:  Once this API has been called, it cannot be reversed. Calling

      CancelOperation will only stop execution and clean up internal system
      state.

      It will not restore data if the command has progressed far enough to cause

      data loss.


      Call the GetDataLossProgress API with the same OperationId to return

      information on the operation started with this API.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startDataLoss(serviceId,
      partitionId, operationId, dataLossMode, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: dataLossMode
          type:
            - string
          description: >-
            This enum is passed to the StartDataLoss API to

            indicate what type of data loss to induce.

            - Invalid - Reserved.  Do not pass into API.

            - PartialDataLoss - PartialDataLoss option will cause a quorum of
            replicas

            to go down, triggering an OnDataLoss event in the system for the
            given

            partition.

            - FullDataLoss - FullDataLoss option will drop all the replicas
            which means

            that all the data will be lost.

            . Possible values include: 'Invalid', 'PartialDataLoss',
            'FullDataLoss'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startDataLoss(serviceId, partitionId, operationId,
        dataLossMode, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getDataLossProgressWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getDataLossProgressWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDataLossProgressWithHttpOperationResponse(serviceId, partitionId,
      operationId, options)
    summary: >-
      Gets the progress of a partition data loss operation started using

      the StartDataLoss API.


      Gets the progress of a data loss operation started with StartDataLoss,
      using

      the OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDataLossProgressWithHttpOperationResponse(serviceId,
      partitionId, operationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PartitionDataLossProgress>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<PartitionDataLossProgress>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getDataLossProgressWithHttpOperationResponse(serviceId,
        partitionId, operationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getDataLossProgress'
    id: 'azure-servicefabric.ServiceFabricClient#getDataLossProgress'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getDataLossProgress(serviceId, partitionId, operationId, options,
      optionalCallback)
    summary: >-
      Gets the progress of a partition data loss operation started using

      the StartDataLoss API.


      Gets the progress of a data loss operation started with StartDataLoss,
      using

      the OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getDataLossProgress(serviceId,
      partitionId, operationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PartitionDataLossProgress} - The deserialized result object.'
        value: '{PartitionDataLossProgress} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionDataLossProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionDataLossProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getDataLossProgress(serviceId, partitionId, operationId,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startQuorumLossWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startQuorumLossWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startQuorumLossWithHttpOperationResponse(serviceId, partitionId,
      operationId, quorumLossMode, quorumLossDuration, options)
    summary: |-
      Induces quorum loss for a given stateful service partition.

      Induces quorum loss for a given stateful service partition.  This API is
      useful for a temporary quorum loss situation on your service.

      Call the GetQuorumLossProgress API with the same OperationId to return
      information on the operation started with this API.

      This can only be called on stateful persisted (HasPersistedState==true)
      services.  Do not use this API on stateless services or stateful in-memory
      only services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startQuorumLossWithHttpOperationResponse(serviceId,
      partitionId, operationId, quorumLossMode, quorumLossDuration, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: quorumLossMode
          type:
            - string
          description: >-
            This enum is passed to the StartQuorumLoss

            API to indicate what type of quorum loss to induce.

            - Invalid - Reserved.  Do not pass into API.

            - QuorumReplicas - Partial Quorum loss mode : Minimum number of
            replicas for

            a partition will be down that will cause a quorum loss.

            - AllReplicas- Full Quorum loss mode : All replicas for a partition
            will be

            down that will cause a quorum loss.

            . Possible values include: 'Invalid', 'QuorumReplicas',
            'AllReplicas'
        - id: quorumLossDuration
          type:
            - number
          description: >-
            The amount of time for which the

            partition will be kept in quorum loss.  This must be specified in
            seconds.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function startQuorumLossWithHttpOperationResponse(serviceId,
        partitionId, operationId, quorumLossMode, quorumLossDuration, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startQuorumLoss'
    id: 'azure-servicefabric.ServiceFabricClient#startQuorumLoss'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startQuorumLoss(serviceId, partitionId, operationId, quorumLossMode,
      quorumLossDuration, options, optionalCallback)
    summary: |-
      Induces quorum loss for a given stateful service partition.

      Induces quorum loss for a given stateful service partition.  This API is
      useful for a temporary quorum loss situation on your service.

      Call the GetQuorumLossProgress API with the same OperationId to return
      information on the operation started with this API.

      This can only be called on stateful persisted (HasPersistedState==true)
      services.  Do not use this API on stateless services or stateful in-memory
      only services.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startQuorumLoss(serviceId,
      partitionId, operationId, quorumLossMode, quorumLossDuration, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: quorumLossMode
          type:
            - string
          description: >-
            This enum is passed to the StartQuorumLoss

            API to indicate what type of quorum loss to induce.

            - Invalid - Reserved.  Do not pass into API.

            - QuorumReplicas - Partial Quorum loss mode : Minimum number of
            replicas for

            a partition will be down that will cause a quorum loss.

            - AllReplicas- Full Quorum loss mode : All replicas for a partition
            will be

            down that will cause a quorum loss.

            . Possible values include: 'Invalid', 'QuorumReplicas',
            'AllReplicas'
        - id: quorumLossDuration
          type:
            - number
          description: >-
            The amount of time for which the

            partition will be kept in quorum loss.  This must be specified in
            seconds.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startQuorumLoss(serviceId, partitionId, operationId,
        quorumLossMode, quorumLossDuration, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getQuorumLossProgressWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getQuorumLossProgressWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getQuorumLossProgressWithHttpOperationResponse(serviceId, partitionId,
      operationId, options)
    summary: |-
      Gets the progress of a quorum loss operation on a partition started
      using the StartQuorumLoss API.

      Gets the progress of a quorum loss operation started with StartQuorumLoss,
      using the provided OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getQuorumLossProgressWithHttpOperationResponse(serviceId,
      partitionId, operationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PartitionQuorumLossProgress>} - The
          deserialized result object.
        value: >-
          {HttpOperationResponse<PartitionQuorumLossProgress>} - The
          deserialized result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getQuorumLossProgressWithHttpOperationResponse(serviceId,
        partitionId, operationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getQuorumLossProgress'
    id: 'azure-servicefabric.ServiceFabricClient#getQuorumLossProgress'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getQuorumLossProgress(serviceId, partitionId, operationId, options,
      optionalCallback)
    summary: |-
      Gets the progress of a quorum loss operation on a partition started
      using the StartQuorumLoss API.

      Gets the progress of a quorum loss operation started with StartQuorumLoss,
      using the provided OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getQuorumLossProgress(serviceId,
      partitionId, operationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PartitionQuorumLossProgress} - The deserialized result object.'
        value: '{PartitionQuorumLossProgress} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionQuorumLossProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionQuorumLossProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getQuorumLossProgress(serviceId, partitionId, operationId,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startPartitionRestartWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startPartitionRestartWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startPartitionRestartWithHttpOperationResponse(serviceId, partitionId,
      operationId, restartPartitionMode, options)
    summary: |-
      This API will restart some or all replicas or instances of the
      specified partition.

      This API is useful for testing failover.

      If used to target a stateless service partition, RestartPartitionMode must
      be AllReplicasOrInstances.

      Call the GetPartitionRestartProgress API using the same OperationId to get
      the progress.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startPartitionRestartWithHttpOperationResponse(serviceId,
      partitionId, operationId, restartPartitionMode, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: restartPartitionMode
          type:
            - string
          description: >-
            Invalid - Reserved.  Do not pass into

            API.

            - AllReplicasOrInstances - All replicas or instances in the
            partition are

            restarted at once.

            - OnlyActiveSecondaries - Only the secondary replicas are restarted.

            . Possible values include: 'Invalid', 'AllReplicasOrInstances',

            'OnlyActiveSecondaries'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function startPartitionRestartWithHttpOperationResponse(serviceId,
        partitionId, operationId, restartPartitionMode, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startPartitionRestart'
    id: 'azure-servicefabric.ServiceFabricClient#startPartitionRestart'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startPartitionRestart(serviceId, partitionId, operationId,
      restartPartitionMode, options, optionalCallback)
    summary: |-
      This API will restart some or all replicas or instances of the
      specified partition.

      This API is useful for testing failover.

      If used to target a stateless service partition, RestartPartitionMode must
      be AllReplicasOrInstances.

      Call the GetPartitionRestartProgress API using the same OperationId to get
      the progress.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startPartitionRestart(serviceId,
      partitionId, operationId, restartPartitionMode, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: restartPartitionMode
          type:
            - string
          description: >-
            Invalid - Reserved.  Do not pass into

            API.

            - AllReplicasOrInstances - All replicas or instances in the
            partition are

            restarted at once.

            - OnlyActiveSecondaries - Only the secondary replicas are restarted.

            . Possible values include: 'Invalid', 'AllReplicasOrInstances',

            'OnlyActiveSecondaries'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startPartitionRestart(serviceId, partitionId, operationId,
        restartPartitionMode, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getPartitionRestartProgressWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getPartitionRestartProgressWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getPartitionRestartProgressWithHttpOperationResponse(serviceId,
      partitionId, operationId, options)
    summary: |-
      Gets the progress of a PartitionRestart operation started using
      StartPartitionRestart.

      Gets the progress of a PartitionRestart started with StartPartitionRestart
      using the provided OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionRestartProgressWithHttpOperationResponse(serviceId,
      partitionId, operationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<PartitionRestartProgress>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<PartitionRestartProgress>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getPartitionRestartProgressWithHttpOperationResponse(serviceId,
        partitionId, operationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getPartitionRestartProgress'
    id: 'azure-servicefabric.ServiceFabricClient#getPartitionRestartProgress'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getPartitionRestartProgress(serviceId, partitionId, operationId, options,
      optionalCallback)
    summary: |-
      Gets the progress of a PartitionRestart operation started using
      StartPartitionRestart.

      Gets the progress of a PartitionRestart started with StartPartitionRestart
      using the provided OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getPartitionRestartProgress(serviceId,
      partitionId, operationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{PartitionRestartProgress} - The deserialized result object.'
        value: '{PartitionRestartProgress} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionRestartProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link PartitionRestartProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: serviceId
          type:
            - string
          description: >-
            The identity of the service. This is typically the

            full name of the service without the 'fabric:' URI scheme. Starting
            from

            version 6.0, hierarchical names are delimited with the "~"
            character. For

            example, if the service name is "fabric://myapp/app1/svc1", the
            service

            identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in

            previous versions.
        - id: partitionId
          type:
            - azure-servicefabric.uuid
          description: The identity of the partition.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getPartitionRestartProgress(serviceId, partitionId,
        operationId, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#startNodeTransitionWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#startNodeTransitionWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startNodeTransitionWithHttpOperationResponse(nodeName, operationId,
      nodeTransitionType, nodeInstanceId, stopDurationInSeconds, options)
    summary: >-
      Starts or stops a cluster node.


      Starts or stops a cluster node.  A cluster node is a process, not the OS

      instance itself.  To start a node, pass in "Start" for the

      NodeTransitionType parameter.

      To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This

      API starts the operation - when the API returns the node may not have

      finished transitioning yet.

      Call GetNodeTransitionProgress with the same OperationId to get the
      progress

      of the operation.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startNodeTransitionWithHttpOperationResponse(nodeName,
      operationId, nodeTransitionType, nodeInstanceId, stopDurationInSeconds,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: nodeTransitionType
          type:
            - string
          description: |-
            Indicates the type of transition to
            perform.  NodeTransitionType.Start will start a stopped node.
            NodeTransitionType.Stop will stop a node that is up.
            - Invalid - Reserved.  Do not pass into API.
            - Start - Transition a stopped node to up.
            - Stop - Transition an up node to stopped.
            . Possible values include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type:
            - string
          description: |-
            The node instance ID of the target node.
            This can be determined through GetNodeInfo API.
        - id: stopDurationInSeconds
          type:
            - number
          description: >-
            The duration, in seconds, to keep the

            node stopped.  The minimum value is 600, the maximum is 14400. 
            After this

            time expires, the node will automatically come back up.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function startNodeTransitionWithHttpOperationResponse(nodeName,
        operationId, nodeTransitionType, nodeInstanceId, stopDurationInSeconds,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#startNodeTransition'
    id: 'azure-servicefabric.ServiceFabricClient#startNodeTransition'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      startNodeTransition(nodeName, operationId, nodeTransitionType,
      nodeInstanceId, stopDurationInSeconds, options, optionalCallback)
    summary: >-
      Starts or stops a cluster node.


      Starts or stops a cluster node.  A cluster node is a process, not the OS

      instance itself.  To start a node, pass in "Start" for the

      NodeTransitionType parameter.

      To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This

      API starts the operation - when the API returns the node may not have

      finished transitioning yet.

      Call GetNodeTransitionProgress with the same OperationId to get the
      progress

      of the operation.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.startNodeTransition(nodeName,
      operationId, nodeTransitionType, nodeInstanceId, stopDurationInSeconds,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: nodeTransitionType
          type:
            - string
          description: |-
            Indicates the type of transition to
            perform.  NodeTransitionType.Start will start a stopped node.
            NodeTransitionType.Stop will stop a node that is up.
            - Invalid - Reserved.  Do not pass into API.
            - Start - Transition a stopped node to up.
            - Stop - Transition an up node to stopped.
            . Possible values include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type:
            - string
          description: |-
            The node instance ID of the target node.
            This can be determined through GetNodeInfo API.
        - id: stopDurationInSeconds
          type:
            - number
          description: >-
            The duration, in seconds, to keep the

            node stopped.  The minimum value is 600, the maximum is 14400. 
            After this

            time expires, the node will automatically come back up.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function startNodeTransition(nodeName, operationId, nodeTransitionType,
        nodeInstanceId, stopDurationInSeconds, options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getNodeTransitionProgressWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getNodeTransitionProgressWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getNodeTransitionProgressWithHttpOperationResponse(nodeName, operationId,
      options)
    summary: >-
      Gets the progress of an operation started using

      StartNodeTransition.


      Gets the progress of an operation started with StartNodeTransition using
      the

      provided OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeTransitionProgressWithHttpOperationResponse(nodeName,
      operationId, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<NodeTransitionProgress>} - The deserialized
          result object.
        value: >-
          {HttpOperationResponse<NodeTransitionProgress>} - The deserialized
          result object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getNodeTransitionProgressWithHttpOperationResponse(nodeName,
        operationId, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getNodeTransitionProgress'
    id: 'azure-servicefabric.ServiceFabricClient#getNodeTransitionProgress'
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getNodeTransitionProgress(nodeName, operationId, options,
      optionalCallback)
    summary: >-
      Gets the progress of an operation started using

      StartNodeTransition.


      Gets the progress of an operation started with StartNodeTransition using
      the

      provided OperationId.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getNodeTransitionProgress(nodeName,
      operationId, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{NodeTransitionProgress} - The deserialized result object.'
        value: '{NodeTransitionProgress} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeTransitionProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link NodeTransitionProgress} for more
                               information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nodeName
          type:
            - string
          description: The name of the node.
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getNodeTransitionProgress(nodeName, operationId, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#getFaultOperationListWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#getFaultOperationListWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: >-
      getFaultOperationListWithHttpOperationResponse(typeFilter, stateFilter,
      options)
    summary: >-
      Gets a list of user-induced fault operations filtered by provided

      input.


      Gets the a list of user-induced fault operations filtered by provided
      input.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getFaultOperationListWithHttpOperationResponse(typeFilter,
      stateFilter, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Array>} - The deserialized result object.'
        value: '{HttpOperationResponse<Array>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Used to filter on OperationType for user-induced
            operations.
            65535 - select all
            1     - select PartitionDataLoss.
            2     - select PartitionQuorumLoss.
            4     - select PartitionRestart.
            8     - select NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Used to filter on OperationState's for
            user-induced operations.
            65535 - select All
            1     - select Running
            2     - select RollingBack
            8     - select Completed
            16    - select Faulted
            32    - select Cancelled
            64    - select ForceCancelled
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getFaultOperationListWithHttpOperationResponse(typeFilter,
        stateFilter, options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#getFaultOperationList'
    id: 'azure-servicefabric.ServiceFabricClient#getFaultOperationList'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'getFaultOperationList(typeFilter, stateFilter, options, optionalCallback)'
    summary: >-
      Gets a list of user-induced fault operations filtered by provided

      input.


      Gets the a list of user-induced fault operations filtered by provided
      input.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.getFaultOperationList(typeFilter,
      stateFilter, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Array} - The deserialized result object.'
        value: '{Array} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {array} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: typeFilter
          type:
            - number
          description: |-
            Used to filter on OperationType for user-induced
            operations.
            65535 - select all
            1     - select PartitionDataLoss.
            2     - select PartitionQuorumLoss.
            4     - select PartitionRestart.
            8     - select NodeTransition.
        - id: stateFilter
          type:
            - number
          description: |-
            Used to filter on OperationState's for
            user-induced operations.
            65535 - select All
            1     - select Running
            2     - select RollingBack
            8     - select Completed
            16    - select Faulted
            32    - select Cancelled
            64    - select ForceCancelled
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getFaultOperationList(typeFilter, stateFilter, options,
        optionalCallback)
    langs:
      - js
  - uid: >-
      azure-servicefabric.ServiceFabricClient#cancelOperationWithHttpOperationResponse
    id: >-
      azure-servicefabric.ServiceFabricClient#cancelOperationWithHttpOperationResponse
    parent: azure-servicefabric.ServiceFabricClient
    name: 'cancelOperationWithHttpOperationResponse(operationId, force, options)'
    summary: >-
      Cancels a user-induced fault operation.


      The following is a list of APIs that start fault operations that may be

      cancelled using CancelOperation -

      - StartDataLoss

      - StartQuorumLoss

      - StartPartitionRestart

      - StartNodeTransition


      If force is false, then the specified user-induced operation will be

      gracefully stopped and cleaned up.  If force is true, the command will be

      aborted, and some internal state

      may be left behind.  Specifying force as true should be used with care.

      Calling this API with force set to true is not allowed until this API has

      already

      been called on the same test command with force set to false first, or

      unless the test command already has an OperationState of

      OperationState.RollingBack.

      Clarification: OperationState.RollingBack means that the system will/is be

      cleaning up internal system state caused by executing the command.  It
      will

      not restore data if the

      test command was to cause data loss.  For example, if you call
      StartDataLoss

      then call this API, the system will only clean up internal state from

      running the command.

      It will not restore the target partition's data, if the command progressed

      far enough to cause data loss.


      Important note:  if this API is invoked with force==true, internal state
      may

      be left behind.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.cancelOperationWithHttpOperationResponse(operationId,
      force, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: force
          type:
            - boolean
          description: >-
            Indicates whether to gracefully rollback and clean up

            internal system state modified by executing the user-induced
            operation.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function cancelOperationWithHttpOperationResponse(operationId, force,
        options)
    langs:
      - js
  - uid: 'azure-servicefabric.ServiceFabricClient#cancelOperation'
    id: 'azure-servicefabric.ServiceFabricClient#cancelOperation'
    parent: azure-servicefabric.ServiceFabricClient
    name: 'cancelOperation(operationId, force, options, optionalCallback)'
    summary: >-
      Cancels a user-induced fault operation.


      The following is a list of APIs that start fault operations that may be

      cancelled using CancelOperation -

      - StartDataLoss

      - StartQuorumLoss

      - StartPartitionRestart

      - StartNodeTransition


      If force is false, then the specified user-induced operation will be

      gracefully stopped and cleaned up.  If force is true, the command will be

      aborted, and some internal state

      may be left behind.  Specifying force as true should be used with care.

      Calling this API with force set to true is not allowed until this API has

      already

      been called on the same test command with force set to false first, or

      unless the test command already has an OperationState of

      OperationState.RollingBack.

      Clarification: OperationState.RollingBack means that the system will/is be

      cleaning up internal system state caused by executing the command.  It
      will

      not restore data if the

      test command was to cause data loss.  For example, if you call
      StartDataLoss

      then call this API, the system will only clean up internal state from

      running the command.

      It will not restore the target partition's data, if the command progressed

      far enough to cause data loss.


      Important note:  if this API is invoked with force==true, internal state
      may

      be left behind.
    fullName: >-
      azure-servicefabric.ServiceFabricClient.cancelOperation(operationId,
      force, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: operationId
          type:
            - azure-servicefabric.uuid
          description: |-
            A GUID that identifies a call of this API.  This
            is passed into the corresponding GetProgress API
        - id: force
          type:
            - boolean
          description: >-
            Indicates whether to gracefully rollback and clean up

            internal system state modified by executing the user-induced
            operation.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.timeout
          type:
            - number
          description: >-
            The server timeout for performing the

            operation in seconds. This specifies the time duration that the
            client is

            willing to wait for the requested operation to complete. The default
            value

            for this parameter is 60 seconds.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function cancelOperation(operationId, force, options, optionalCallback)'
    langs:
      - js
