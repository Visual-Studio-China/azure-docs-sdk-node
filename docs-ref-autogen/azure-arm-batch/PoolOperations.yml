### YamlMime:UniversalReference
items:
  - uid: azure-arm-batch.PoolOperations
    id: azure-arm-batch.PoolOperations
    name: PoolOperations
    summary: Class representing a PoolOperations.
    fullName: azure-arm-batch.PoolOperations
    type: Class
    children:
      - 'azure-arm-batch.PoolOperations.#ctor'
    langs:
      - js
  - id: 'azure-arm-batch.PoolOperations.#ctor'
    uid: 'azure-arm-batch.PoolOperations.#ctor'
    parent: azure-arm-batch.PoolOperations
    name: PoolOperations(client)
    fullName: azure-arm-batch.PoolOperations.PoolOperations(client)
    summary: Create a PoolOperations.
    type: Constructor
    syntax:
      parameters:
        - id: client
          type:
            - azure-arm-batch.BatchManagementClient
          description: Reference to the service client.
      content: new PoolOperations(client)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#listByBatchAccountWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#listByBatchAccountWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      listByBatchAccountWithHttpOperationResponse(resourceGroupName,
      accountName, options)
    summary: Lists all of the pools in the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.listByBatchAccountWithHttpOperationResponse(resourceGroupName,
      accountName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ListPoolsResult>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ListPoolsResult>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.maxresults
          type:
            - number
          description: |-
            The maximum number of items to return
            in the response.
          optional: true
        - id: options.select
          type:
            - string
          description: >-
            Comma separated list of properties that

            should be returned. e.g. "properties/provisioningState". Only top
            level

            properties under properties/ are valid for selection.
          optional: true
        - id: options.filter
          type:
            - string
          description: |-
            OData filter expression. Valid properties
            for filtering are:

            name
            properties/allocationState
            properties/allocationStateTransitionTime
            properties/creationTime
            properties/provisioningState
            properties/provisioningStateTransitionTime
            properties/lastModified
            properties/vmSize
            properties/interNodeCommunication
            properties/scaleSettings/autoScale
            properties/scaleSettings/fixedScale
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function listByBatchAccountWithHttpOperationResponse(resourceGroupName,
        accountName, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#listByBatchAccount'
    id: 'azure-arm-batch.PoolOperations#listByBatchAccount'
    parent: azure-arm-batch.PoolOperations
    name: >-
      listByBatchAccount(resourceGroupName, accountName, options,
      optionalCallback)
    summary: Lists all of the pools in the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.listByBatchAccount(resourceGroupName,
      accountName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ListPoolsResult} - The deserialized result object.'
        value: '{ListPoolsResult} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ListPoolsResult} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ListPoolsResult} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.maxresults
          type:
            - number
          description: |-
            The maximum number of items to return
            in the response.
          optional: true
        - id: options.select
          type:
            - string
          description: >-
            Comma separated list of properties that

            should be returned. e.g. "properties/provisioningState". Only top
            level

            properties under properties/ are valid for selection.
          optional: true
        - id: options.filter
          type:
            - string
          description: |-
            OData filter expression. Valid properties
            for filtering are:

            name
            properties/allocationState
            properties/allocationStateTransitionTime
            properties/creationTime
            properties/provisioningState
            properties/provisioningStateTransitionTime
            properties/lastModified
            properties/vmSize
            properties/interNodeCommunication
            properties/scaleSettings/autoScale
            properties/scaleSettings/fixedScale
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function listByBatchAccount(resourceGroupName, accountName, options,
        optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#createWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#createWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      createWithHttpOperationResponse(resourceGroupName, accountName, poolName,
      parameters, options)
    summary: Creates a new pool inside the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.createWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, parameters, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Pool>} - The deserialized result object.'
        value: '{HttpOperationResponse<Pool>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: parameters
          type:
            - object
          description: Additional parameters for pool creation.
        - id: parameters.displayName
          type:
            - string
          description: >-
            The display name for the pool. The

            display name need not be unique and can contain any Unicode
            characters up to

            a maximum length of 1024.
          optional: true
        - id: parameters.vmSize
          type:
            - string
          description: >-
            The size of virtual machines in the

            pool. All VMs in a pool are the same size. For information about
            available

            sizes of virtual machines for Cloud Services pools (pools created
            with

            cloudServiceConfiguration), see Sizes for Cloud Services

            (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).

            Batch supports all Cloud Services VM sizes except ExtraSmall. For

            information about available VM sizes for pools using images from the
            Virtual

            Machines Marketplace (pools created with
            virtualMachineConfiguration) see

            Sizes for Virtual Machines (Linux)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)

            or Sizes for Virtual Machines (Windows)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).

            Batch supports all Azure VM sizes except STANDARD_A0 and those with
            premium

            storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
          optional: true
        - id: parameters.deploymentConfiguration
          type:
            - object
          description: >-
            This property describes

            how the pool nodes will be deployed - using Cloud Services or
            Virtual

            Machines. Using CloudServiceConfiguration specifies that the nodes
            should be

            creating using Azure Cloud Services (PaaS), while

            VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
          optional: true
        - id: parameters.deploymentConfiguration.cloudServiceConfiguration
          type:
            - object
          description: >-
            The cloud

            service configuration for the pool. This property and

            virtualMachineConfiguration are mutually exclusive and one of the
            properties

            must be specified. This property cannot be specified if the Batch
            account

            was created with its poolAllocationMode property set to
            'UserSubscription'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.osFamily
          type:
            - string
          description: >-
            The

            Azure Guest OS family to be installed on the virtual machines in the
            pool.

            Possible values are: 2 - OS Family 2, equivalent to Windows Server
            2008 R2

            SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS
            Family 4,

            equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to
            Windows

            Server 2016. For more information, see Azure Guest OS Releases

            (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.targetOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS version to be installed on the virtual machines
            in the

            pool. The default value is * which specifies the latest operating
            system

            version for the specified OS family.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.currentOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS Version currently installed on the virtual
            machines in

            the pool. This may differ from targetOSVersion if the pool state is

            Upgrading. In this case some virtual machines may be on the
            targetOSVersion

            and some may be on the currentOSVersion during the upgrade process.
            Once all

            virtual machines have upgraded, currentOSVersion is updated to be
            the same

            as targetOSVersion.
          optional: true
        - id: parameters.deploymentConfiguration.virtualMachineConfiguration
          type:
            - object
          description: >-
            The virtual

            machine configuration for the pool. This property and

            cloudServiceConfiguration are mutually exclusive and one of the
            properties

            must be specified.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference
          type:
            - object
          description: >-
            A reference to the Azure Virtual Machines Marketplace Image or the
            custom

            Virtual Machine Image to use.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.publisher
          type:
            - string
          description: >-
            The publisher of the Azure Virtual Machines Marketplace image. For
            example,

            Canonical or MicrosoftWindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.offer
          type:
            - string
          description: >-
            The offer type of the Azure Virtual Machines Marketplace image. For
            example,

            UbuntuServer or WindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.sku
          type:
            - string
          description: >-
            The SKU of the Azure Virtual Machines Marketplace image. For
            example,

            14.04.0-LTS or 2012-R2-Datacenter.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.version
          type:
            - string
          description: >-
            The version of the Azure Virtual Machines Marketplace image. A value
            of

            'latest' can be specified to select the latest version of an image.
            If

            omitted, the default is 'latest'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.id
          type:
            - string
          description: >-
            The ARM resource identifier of the virtual machine image. Computes
            nodes of

            the pool will be created using this custom image. This is of the
            form

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

            This property is mutually exclusive with other properties. The
            virtual

            machine image must be in the same region and subscription as the
            Azure Batch

            account. For information about the firewall settings for Batch node
            agent to

            communicate with Batch service see

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

            .
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk
          type:
            - object
          description: Settings for the operating system disk of the Virtual Machine.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk.caching
          type:
            - string
          description: >-
            The type of caching to be enabled for the data disks. none - The
            caching

            mode for the disk is not enabled. readOnly - The caching mode for
            the disk

            is read only. readWrite - The caching mode for the disk is read and
            write.

            Default value is none. Possible values include: 'None', 'ReadOnly',

            'ReadWrite'
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.nodeAgentSkuId
          type:
            - string
          description: >-
            The SKU of the Batch node agent to be provisioned on compute nodes
            in the

            pool. The Batch node agent is a program that runs on each node in
            the pool,

            and provides the command-and-control interface between the node and
            the

            Batch service. There are different implementations of the node
            agent, known

            as SKUs, for different operating systems. You must specify a node
            agent SKU

            which matches the selected image reference. To get the list of
            supported

            node agent SKUs along with their list of verified image references,
            see the

            'List supported node agent SKUs' operation.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration
          type:
            - object
          description: >-
            Windows operating system settings on the virtual machine. This
            property must

            not be specified if the imageReference specifies a Linux OS image.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates
          type:
            - boolean
          description: >-
            Whether automatic updates are enabled on the virtual machine. If
            omitted,

            the default value is true.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.dataDisks
          type:
            - array
          description: >-
            The configuration for data disks attached to the comptue nodes in
            the pool.

            This property must be specified if the compute nodes in the pool
            need to

            have empty data disks attached to them.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.licenseType
          type:
            - string
          description: >-
            The type of on-premises license to be used when deploying the
            operating

            system. This only applies to images that contain the Windows
            operating

            system, and should only be used when you hold valid on-premises
            licenses for

            the nodes which will be deployed. If omitted, no on-premises
            licensing

            discount is applied. Values are:


            Windows_Server - The on-premises license is for Windows Server.

            Windows_Client - The on-premises license is for Windows Client.
          optional: true
        - id: parameters.scaleSettings
          type:
            - object
          description: |-
            Settings which configure the
            number of nodes in the pool.
          optional: true
        - id: parameters.scaleSettings.fixedScale
          type:
            - object
          description: >-
            Fixed scale settings

            for the pool. This property and autoScale are mutually exclusive and
            one of

            the properties must be specified.
          optional: true
        - id: parameters.scaleSettings.fixedScale.resizeTimeout
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The timeout for allocation of compute nodes to the pool. The default
            value

            is 15 minutes. The minimum value is 5 minutes. If you specify a
            value less

            than 5 minutes, the Batch service rejects the request with an error;
            if you

            are calling the REST API directly, the HTTP status code is 400 (Bad

            Request).
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetDedicatedNodes
          type:
            - number
          description: >-
            The desired number of dedicated compute nodes in the pool. At least
            one of

            targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetLowPriorityNodes
          type:
            - number
          description: >-
            The desired number of low-priority compute nodes in the pool. At
            least one

            of targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.nodeDeallocationOption
          type:
            - string
          description: >-
            Determines what to do with a node and its running task(s) if the
            pool size

            is decreasing. If omitted, the default value is Requeue. Possible
            values

            include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
          optional: true
        - id: parameters.scaleSettings.autoScale
          type:
            - object
          description: >-
            AutoScale settings for

            the pool. This property and fixedScale are mutually exclusive and
            one of the

            properties must be specified.
          optional: true
        - id: parameters.scaleSettings.autoScale.formula
          type:
            - string
          description: |-
            A formula for the
            desired number of compute nodes in the pool.
        - id: parameters.scaleSettings.autoScale.evaluationInterval
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The time interval at

            which to automatically adjust the pool size according to the
            autoscale

            formula. If omitted, the default value is 15 minutes (PT15M).
          optional: true
        - id: parameters.interNodeCommunication
          type:
            - string
          description: >-
            Whether the pool permits

            direct communication between nodes. This imposes restrictions on
            which nodes

            can be assigned to the pool. Enabling this value can reduce the
            chance of

            the requested number of nodes to be allocated in the pool. If not
            specified,

            this value defaults to 'Disabled'. Possible values include:
            'Enabled',

            'Disabled'
          optional: true
        - id: parameters.networkConfiguration
          type:
            - object
          description: |-
            The network configuration
            for the pool.
          optional: true
        - id: parameters.networkConfiguration.subnetId
          type:
            - string
          description: >-
            The ARM resource

            identifier of the virtual network subnet which the compute nodes of
            the pool

            will join. This is of the form

            /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

            The virtual network must be in the same region and subscription as
            the Azure

            Batch account. The specified subnet should have enough free IP
            addresses to

            accommodate the number of nodes in the pool. If the subnet doesn't
            have

            enough free IP addresses, the pool will partially allocate compute
            nodes,

            and a resize error will occur. The 'MicrosoftAzureBatch' service
            principal

            must have the 'Classic Virtual Machine Contributor' Role-Based
            Access

            Control (RBAC) role for the specified VNet. The specified subnet
            must allow

            communication from the Azure Batch service to be able to schedule
            tasks on

            the compute nodes. This can be verified by checking if the specified
            VNet

            has any associated Network Security Groups (NSG). If communication
            to the

            compute nodes in the specified subnet is denied by an NSG, then the
            Batch

            service will set the state of the compute nodes to unusable. For
            pools

            created via virtualMachineConfiguration the Batch account must have

            poolAllocationMode userSubscription in order to use a VNet. If the
            specified

            VNet has any associated Network Security Groups (NSG), then a few
            reserved

            system ports must be enabled for inbound communication. For pools
            created

            with a virtual machine configuration, enable ports 29876 and 29877,
            as well

            as port 22 for Linux and port 3389 for Windows. For pools created
            with a

            cloud service configuration, enable ports 10100, 20100, and 30100.
            Also

            enable outbound connections to Azure Storage on port 443. For more
            details

            see:

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
          optional: true
        - id: parameters.networkConfiguration.endpointConfiguration
          type:
            - object
          description: |-
            The
            configuration for endpoints on compute nodes in the Batch pool. Pool
            endpoint configuration is only supported on pools with the
            virtualMachineConfiguration property.
          optional: true
        - id: >-
            parameters.networkConfiguration.endpointConfiguration.inboundNatPools
          type:
            - array
          description: >-
            A list

            of inbound NAT pools that can be used to address specific ports on
            an

            individual compute node externally. The maximum number of inbound
            NAT pools

            per Batch pool is 5. If the maximum number of inbound NAT pools is
            exceeded

            the request fails with HTTP status code 400.
        - id: parameters.maxTasksPerNode
          type:
            - number
          description: |-
            The maximum number of tasks
            that can run concurrently on a single compute node in the pool.
          optional: true
        - id: parameters.taskSchedulingPolicy
          type:
            - object
          description: |-
            How tasks are distributed
            across compute nodes in a pool.
          optional: true
        - id: parameters.taskSchedulingPolicy.nodeFillType
          type:
            - string
          description: |-
            How tasks
            should be distributed across compute nodes. Possible values include:
            'Spread', 'Pack'
        - id: parameters.userAccounts
          type:
            - array
          description: |-
            The list of user accounts to be
            created on each node in the pool.
          optional: true
        - id: parameters.metadata
          type:
            - array
          description: >-
            A list of name-value pairs associated

            with the pool as metadata. The Batch service does not assign any
            meaning to

            metadata; it is solely for the use of user code.
          optional: true
        - id: parameters.startTask
          type:
            - object
          description: >-
            A task specified to run on each

            compute node as it joins the pool. In an PATCH (update) operation,
            this

            property can be set to an empty object to remove the start task from
            the

            pool.
          optional: true
        - id: parameters.startTask.commandLine
          type:
            - string
          description: >-
            The command line of the

            start task. The command line does not run under a shell, and
            therefore

            cannot take advantage of shell features such as environment variable

            expansion. If you want to take advantage of such features, you
            should invoke

            the shell in the command line, for example using "cmd /c MyCommand"
            in

            Windows or "/bin/sh -c MyCommand" in Linux. Required if any other
            properties

            of the startTask are specified.
          optional: true
        - id: parameters.startTask.resourceFiles
          type:
            - array
          description: >-
            A list of files that the

            Batch service will download to the compute node before running the
            command

            line.
          optional: true
        - id: parameters.startTask.environmentSettings
          type:
            - array
          description: |-
            A list of
            environment variable settings for the start task.
          optional: true
        - id: parameters.startTask.userIdentity
          type:
            - object
          description: >-
            The user identity under

            which the start task runs. If omitted, the task runs as a
            non-administrative

            user unique to the task.
          optional: true
        - id: parameters.startTask.userIdentity.userName
          type:
            - string
          description: >-
            The name of the

            user identity under which the task is run. The userName and autoUser

            properties are mutually exclusive; you must specify one but not
            both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser
          type:
            - object
          description: >-
            The auto user

            under which the task is run. The userName and autoUser properties
            are

            mutually exclusive; you must specify one but not both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.scope
          type:
            - string
          description: >-
            The scope

            for the auto user pool - specifies that the task runs as the common
            auto

            user account which is created on every node in a pool. task -
            specifies that

            the service should create a new user for the task. The default value
            is

            task. Possible values include: 'Task', 'Pool'
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.elevationLevel
          type:
            - string
          description: >-
            The elevation level of the auto user. nonAdmin - The auto user is a
            standard

            user without elevated access. admin - The auto user is a user with
            elevated

            access and operates with full Administrator permissions. The default
            value

            is nonAdmin. Possible values include: 'NonAdmin', 'Admin'
          optional: true
        - id: parameters.startTask.maxTaskRetryCount
          type:
            - number
          description: >-
            The maximum number

            of times the task may be retried. The Batch service retries a task
            if its

            exit code is nonzero. Note that this value specifically controls the
            number

            of retries. The Batch service will try the task once, and may then
            retry up

            to this limit. For example, if the maximum retry count is 3, Batch
            tries the

            task up to 4 times (one initial try and 3 retries). If the maximum
            retry

            count is 0, the Batch service does not retry the task. If the
            maximum retry

            count is -1, the Batch service retries the task without limit.
          optional: true
        - id: parameters.startTask.waitForSuccess
          type:
            - boolean
          description: >-
            Whether the Batch

            service should wait for the start task to complete successfully
            (that is, to

            exit with exit code 0) before scheduling any tasks on the compute
            node. If

            true and the start task fails on a compute node, the Batch service
            retries

            the start task up to its maximum retry count (maxTaskRetryCount). If
            the

            task has still not completed successfully after all retries, then
            the Batch

            service marks the compute node unusable, and will not schedule tasks
            to it.

            This condition can be detected via the node state and scheduling
            error

            detail. If false, the Batch service will not wait for the start task
            to

            complete. In this case, other tasks can start executing on the
            compute node

            while the start task is still running; and even if the start task
            fails, new

            tasks will continue to be scheduled on the node. The default is
            false.
          optional: true
        - id: parameters.certificates
          type:
            - array
          description: >-
            The list of certificates to be

            installed on each compute node in the pool. For Windows compute
            nodes, the

            Batch service installs the certificates to the specified certificate
            store

            and location. For Linux compute nodes, the certificates are stored
            in a

            directory inside the task working directory and an environment
            variable

            AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this

            location. For certificates with visibility of 'remoteUser', a
            'certs'

            directory is created in the user's home directory (e.g.,

            /home/{user-name}/certs) and certificates are placed in that
            directory.
          optional: true
        - id: parameters.applicationPackages
          type:
            - array
          description: >-
            The list of application

            packages to be installed on each compute node in the pool. Changes
            to

            application packages affect all new compute nodes joining the pool,
            but do

            not affect compute nodes that are already in the pool until they are

            rebooted or reimaged.
          optional: true
        - id: parameters.applicationLicenses
          type:
            - array
          description: >-
            The list of application

            licenses the Batch service will make available on each compute node
            in the

            pool. The list of application licenses must be a subset of available
            Batch

            service application licenses. If a license is requested which is not

            supported, pool creation will fail.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.ifMatch
          type:
            - string
          description: >-
            The entity state (ETag) version of the

            pool to update. A value of "*" can be used to apply the operation
            only if

            the pool already exists. If omitted, this operation will always be
            applied.
          optional: true
        - id: options.ifNoneMatch
          type:
            - string
          description: >-
            Set to '*' to allow a new pool to be

            created, but to prevent updating an existing pool. Other values will
            be

            ignored.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function createWithHttpOperationResponse(resourceGroupName, accountName,
        poolName, parameters, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#create'
    id: 'azure-arm-batch.PoolOperations#create'
    parent: azure-arm-batch.PoolOperations
    name: >-
      create(resourceGroupName, accountName, poolName, parameters, options,
      optionalCallback)
    summary: Creates a new pool inside the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.create(resourceGroupName, accountName,
      poolName, parameters, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Pool} - The deserialized result object.'
        value: '{Pool} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: parameters
          type:
            - object
          description: Additional parameters for pool creation.
        - id: parameters.displayName
          type:
            - string
          description: >-
            The display name for the pool. The

            display name need not be unique and can contain any Unicode
            characters up to

            a maximum length of 1024.
          optional: true
        - id: parameters.vmSize
          type:
            - string
          description: >-
            The size of virtual machines in the

            pool. All VMs in a pool are the same size. For information about
            available

            sizes of virtual machines for Cloud Services pools (pools created
            with

            cloudServiceConfiguration), see Sizes for Cloud Services

            (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).

            Batch supports all Cloud Services VM sizes except ExtraSmall. For

            information about available VM sizes for pools using images from the
            Virtual

            Machines Marketplace (pools created with
            virtualMachineConfiguration) see

            Sizes for Virtual Machines (Linux)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)

            or Sizes for Virtual Machines (Windows)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).

            Batch supports all Azure VM sizes except STANDARD_A0 and those with
            premium

            storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
          optional: true
        - id: parameters.deploymentConfiguration
          type:
            - object
          description: >-
            This property describes

            how the pool nodes will be deployed - using Cloud Services or
            Virtual

            Machines. Using CloudServiceConfiguration specifies that the nodes
            should be

            creating using Azure Cloud Services (PaaS), while

            VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
          optional: true
        - id: parameters.deploymentConfiguration.cloudServiceConfiguration
          type:
            - object
          description: >-
            The cloud

            service configuration for the pool. This property and

            virtualMachineConfiguration are mutually exclusive and one of the
            properties

            must be specified. This property cannot be specified if the Batch
            account

            was created with its poolAllocationMode property set to
            'UserSubscription'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.osFamily
          type:
            - string
          description: >-
            The

            Azure Guest OS family to be installed on the virtual machines in the
            pool.

            Possible values are: 2 - OS Family 2, equivalent to Windows Server
            2008 R2

            SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS
            Family 4,

            equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to
            Windows

            Server 2016. For more information, see Azure Guest OS Releases

            (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.targetOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS version to be installed on the virtual machines
            in the

            pool. The default value is * which specifies the latest operating
            system

            version for the specified OS family.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.currentOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS Version currently installed on the virtual
            machines in

            the pool. This may differ from targetOSVersion if the pool state is

            Upgrading. In this case some virtual machines may be on the
            targetOSVersion

            and some may be on the currentOSVersion during the upgrade process.
            Once all

            virtual machines have upgraded, currentOSVersion is updated to be
            the same

            as targetOSVersion.
          optional: true
        - id: parameters.deploymentConfiguration.virtualMachineConfiguration
          type:
            - object
          description: >-
            The virtual

            machine configuration for the pool. This property and

            cloudServiceConfiguration are mutually exclusive and one of the
            properties

            must be specified.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference
          type:
            - object
          description: >-
            A reference to the Azure Virtual Machines Marketplace Image or the
            custom

            Virtual Machine Image to use.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.publisher
          type:
            - string
          description: >-
            The publisher of the Azure Virtual Machines Marketplace image. For
            example,

            Canonical or MicrosoftWindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.offer
          type:
            - string
          description: >-
            The offer type of the Azure Virtual Machines Marketplace image. For
            example,

            UbuntuServer or WindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.sku
          type:
            - string
          description: >-
            The SKU of the Azure Virtual Machines Marketplace image. For
            example,

            14.04.0-LTS or 2012-R2-Datacenter.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.version
          type:
            - string
          description: >-
            The version of the Azure Virtual Machines Marketplace image. A value
            of

            'latest' can be specified to select the latest version of an image.
            If

            omitted, the default is 'latest'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.id
          type:
            - string
          description: >-
            The ARM resource identifier of the virtual machine image. Computes
            nodes of

            the pool will be created using this custom image. This is of the
            form

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

            This property is mutually exclusive with other properties. The
            virtual

            machine image must be in the same region and subscription as the
            Azure Batch

            account. For information about the firewall settings for Batch node
            agent to

            communicate with Batch service see

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

            .
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk
          type:
            - object
          description: Settings for the operating system disk of the Virtual Machine.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk.caching
          type:
            - string
          description: >-
            The type of caching to be enabled for the data disks. none - The
            caching

            mode for the disk is not enabled. readOnly - The caching mode for
            the disk

            is read only. readWrite - The caching mode for the disk is read and
            write.

            Default value is none. Possible values include: 'None', 'ReadOnly',

            'ReadWrite'
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.nodeAgentSkuId
          type:
            - string
          description: >-
            The SKU of the Batch node agent to be provisioned on compute nodes
            in the

            pool. The Batch node agent is a program that runs on each node in
            the pool,

            and provides the command-and-control interface between the node and
            the

            Batch service. There are different implementations of the node
            agent, known

            as SKUs, for different operating systems. You must specify a node
            agent SKU

            which matches the selected image reference. To get the list of
            supported

            node agent SKUs along with their list of verified image references,
            see the

            'List supported node agent SKUs' operation.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration
          type:
            - object
          description: >-
            Windows operating system settings on the virtual machine. This
            property must

            not be specified if the imageReference specifies a Linux OS image.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates
          type:
            - boolean
          description: >-
            Whether automatic updates are enabled on the virtual machine. If
            omitted,

            the default value is true.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.dataDisks
          type:
            - array
          description: >-
            The configuration for data disks attached to the comptue nodes in
            the pool.

            This property must be specified if the compute nodes in the pool
            need to

            have empty data disks attached to them.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.licenseType
          type:
            - string
          description: >-
            The type of on-premises license to be used when deploying the
            operating

            system. This only applies to images that contain the Windows
            operating

            system, and should only be used when you hold valid on-premises
            licenses for

            the nodes which will be deployed. If omitted, no on-premises
            licensing

            discount is applied. Values are:


            Windows_Server - The on-premises license is for Windows Server.

            Windows_Client - The on-premises license is for Windows Client.
          optional: true
        - id: parameters.scaleSettings
          type:
            - object
          description: |-
            Settings which configure the
            number of nodes in the pool.
          optional: true
        - id: parameters.scaleSettings.fixedScale
          type:
            - object
          description: >-
            Fixed scale settings

            for the pool. This property and autoScale are mutually exclusive and
            one of

            the properties must be specified.
          optional: true
        - id: parameters.scaleSettings.fixedScale.resizeTimeout
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The timeout for allocation of compute nodes to the pool. The default
            value

            is 15 minutes. The minimum value is 5 minutes. If you specify a
            value less

            than 5 minutes, the Batch service rejects the request with an error;
            if you

            are calling the REST API directly, the HTTP status code is 400 (Bad

            Request).
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetDedicatedNodes
          type:
            - number
          description: >-
            The desired number of dedicated compute nodes in the pool. At least
            one of

            targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetLowPriorityNodes
          type:
            - number
          description: >-
            The desired number of low-priority compute nodes in the pool. At
            least one

            of targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.nodeDeallocationOption
          type:
            - string
          description: >-
            Determines what to do with a node and its running task(s) if the
            pool size

            is decreasing. If omitted, the default value is Requeue. Possible
            values

            include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
          optional: true
        - id: parameters.scaleSettings.autoScale
          type:
            - object
          description: >-
            AutoScale settings for

            the pool. This property and fixedScale are mutually exclusive and
            one of the

            properties must be specified.
          optional: true
        - id: parameters.scaleSettings.autoScale.formula
          type:
            - string
          description: |-
            A formula for the
            desired number of compute nodes in the pool.
        - id: parameters.scaleSettings.autoScale.evaluationInterval
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The time interval at

            which to automatically adjust the pool size according to the
            autoscale

            formula. If omitted, the default value is 15 minutes (PT15M).
          optional: true
        - id: parameters.interNodeCommunication
          type:
            - string
          description: >-
            Whether the pool permits

            direct communication between nodes. This imposes restrictions on
            which nodes

            can be assigned to the pool. Enabling this value can reduce the
            chance of

            the requested number of nodes to be allocated in the pool. If not
            specified,

            this value defaults to 'Disabled'. Possible values include:
            'Enabled',

            'Disabled'
          optional: true
        - id: parameters.networkConfiguration
          type:
            - object
          description: |-
            The network configuration
            for the pool.
          optional: true
        - id: parameters.networkConfiguration.subnetId
          type:
            - string
          description: >-
            The ARM resource

            identifier of the virtual network subnet which the compute nodes of
            the pool

            will join. This is of the form

            /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

            The virtual network must be in the same region and subscription as
            the Azure

            Batch account. The specified subnet should have enough free IP
            addresses to

            accommodate the number of nodes in the pool. If the subnet doesn't
            have

            enough free IP addresses, the pool will partially allocate compute
            nodes,

            and a resize error will occur. The 'MicrosoftAzureBatch' service
            principal

            must have the 'Classic Virtual Machine Contributor' Role-Based
            Access

            Control (RBAC) role for the specified VNet. The specified subnet
            must allow

            communication from the Azure Batch service to be able to schedule
            tasks on

            the compute nodes. This can be verified by checking if the specified
            VNet

            has any associated Network Security Groups (NSG). If communication
            to the

            compute nodes in the specified subnet is denied by an NSG, then the
            Batch

            service will set the state of the compute nodes to unusable. For
            pools

            created via virtualMachineConfiguration the Batch account must have

            poolAllocationMode userSubscription in order to use a VNet. If the
            specified

            VNet has any associated Network Security Groups (NSG), then a few
            reserved

            system ports must be enabled for inbound communication. For pools
            created

            with a virtual machine configuration, enable ports 29876 and 29877,
            as well

            as port 22 for Linux and port 3389 for Windows. For pools created
            with a

            cloud service configuration, enable ports 10100, 20100, and 30100.
            Also

            enable outbound connections to Azure Storage on port 443. For more
            details

            see:

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
          optional: true
        - id: parameters.networkConfiguration.endpointConfiguration
          type:
            - object
          description: |-
            The
            configuration for endpoints on compute nodes in the Batch pool. Pool
            endpoint configuration is only supported on pools with the
            virtualMachineConfiguration property.
          optional: true
        - id: >-
            parameters.networkConfiguration.endpointConfiguration.inboundNatPools
          type:
            - array
          description: >-
            A list

            of inbound NAT pools that can be used to address specific ports on
            an

            individual compute node externally. The maximum number of inbound
            NAT pools

            per Batch pool is 5. If the maximum number of inbound NAT pools is
            exceeded

            the request fails with HTTP status code 400.
        - id: parameters.maxTasksPerNode
          type:
            - number
          description: |-
            The maximum number of tasks
            that can run concurrently on a single compute node in the pool.
          optional: true
        - id: parameters.taskSchedulingPolicy
          type:
            - object
          description: |-
            How tasks are distributed
            across compute nodes in a pool.
          optional: true
        - id: parameters.taskSchedulingPolicy.nodeFillType
          type:
            - string
          description: |-
            How tasks
            should be distributed across compute nodes. Possible values include:
            'Spread', 'Pack'
        - id: parameters.userAccounts
          type:
            - array
          description: |-
            The list of user accounts to be
            created on each node in the pool.
          optional: true
        - id: parameters.metadata
          type:
            - array
          description: >-
            A list of name-value pairs associated

            with the pool as metadata. The Batch service does not assign any
            meaning to

            metadata; it is solely for the use of user code.
          optional: true
        - id: parameters.startTask
          type:
            - object
          description: >-
            A task specified to run on each

            compute node as it joins the pool. In an PATCH (update) operation,
            this

            property can be set to an empty object to remove the start task from
            the

            pool.
          optional: true
        - id: parameters.startTask.commandLine
          type:
            - string
          description: >-
            The command line of the

            start task. The command line does not run under a shell, and
            therefore

            cannot take advantage of shell features such as environment variable

            expansion. If you want to take advantage of such features, you
            should invoke

            the shell in the command line, for example using "cmd /c MyCommand"
            in

            Windows or "/bin/sh -c MyCommand" in Linux. Required if any other
            properties

            of the startTask are specified.
          optional: true
        - id: parameters.startTask.resourceFiles
          type:
            - array
          description: >-
            A list of files that the

            Batch service will download to the compute node before running the
            command

            line.
          optional: true
        - id: parameters.startTask.environmentSettings
          type:
            - array
          description: |-
            A list of
            environment variable settings for the start task.
          optional: true
        - id: parameters.startTask.userIdentity
          type:
            - object
          description: >-
            The user identity under

            which the start task runs. If omitted, the task runs as a
            non-administrative

            user unique to the task.
          optional: true
        - id: parameters.startTask.userIdentity.userName
          type:
            - string
          description: >-
            The name of the

            user identity under which the task is run. The userName and autoUser

            properties are mutually exclusive; you must specify one but not
            both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser
          type:
            - object
          description: >-
            The auto user

            under which the task is run. The userName and autoUser properties
            are

            mutually exclusive; you must specify one but not both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.scope
          type:
            - string
          description: >-
            The scope

            for the auto user pool - specifies that the task runs as the common
            auto

            user account which is created on every node in a pool. task -
            specifies that

            the service should create a new user for the task. The default value
            is

            task. Possible values include: 'Task', 'Pool'
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.elevationLevel
          type:
            - string
          description: >-
            The elevation level of the auto user. nonAdmin - The auto user is a
            standard

            user without elevated access. admin - The auto user is a user with
            elevated

            access and operates with full Administrator permissions. The default
            value

            is nonAdmin. Possible values include: 'NonAdmin', 'Admin'
          optional: true
        - id: parameters.startTask.maxTaskRetryCount
          type:
            - number
          description: >-
            The maximum number

            of times the task may be retried. The Batch service retries a task
            if its

            exit code is nonzero. Note that this value specifically controls the
            number

            of retries. The Batch service will try the task once, and may then
            retry up

            to this limit. For example, if the maximum retry count is 3, Batch
            tries the

            task up to 4 times (one initial try and 3 retries). If the maximum
            retry

            count is 0, the Batch service does not retry the task. If the
            maximum retry

            count is -1, the Batch service retries the task without limit.
          optional: true
        - id: parameters.startTask.waitForSuccess
          type:
            - boolean
          description: >-
            Whether the Batch

            service should wait for the start task to complete successfully
            (that is, to

            exit with exit code 0) before scheduling any tasks on the compute
            node. If

            true and the start task fails on a compute node, the Batch service
            retries

            the start task up to its maximum retry count (maxTaskRetryCount). If
            the

            task has still not completed successfully after all retries, then
            the Batch

            service marks the compute node unusable, and will not schedule tasks
            to it.

            This condition can be detected via the node state and scheduling
            error

            detail. If false, the Batch service will not wait for the start task
            to

            complete. In this case, other tasks can start executing on the
            compute node

            while the start task is still running; and even if the start task
            fails, new

            tasks will continue to be scheduled on the node. The default is
            false.
          optional: true
        - id: parameters.certificates
          type:
            - array
          description: >-
            The list of certificates to be

            installed on each compute node in the pool. For Windows compute
            nodes, the

            Batch service installs the certificates to the specified certificate
            store

            and location. For Linux compute nodes, the certificates are stored
            in a

            directory inside the task working directory and an environment
            variable

            AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this

            location. For certificates with visibility of 'remoteUser', a
            'certs'

            directory is created in the user's home directory (e.g.,

            /home/{user-name}/certs) and certificates are placed in that
            directory.
          optional: true
        - id: parameters.applicationPackages
          type:
            - array
          description: >-
            The list of application

            packages to be installed on each compute node in the pool. Changes
            to

            application packages affect all new compute nodes joining the pool,
            but do

            not affect compute nodes that are already in the pool until they are

            rebooted or reimaged.
          optional: true
        - id: parameters.applicationLicenses
          type:
            - array
          description: >-
            The list of application

            licenses the Batch service will make available on each compute node
            in the

            pool. The list of application licenses must be a subset of available
            Batch

            service application licenses. If a license is requested which is not

            supported, pool creation will fail.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.ifMatch
          type:
            - string
          description: >-
            The entity state (ETag) version of the

            pool to update. A value of "*" can be used to apply the operation
            only if

            the pool already exists. If omitted, this operation will always be
            applied.
          optional: true
        - id: options.ifNoneMatch
          type:
            - string
          description: >-
            Set to '*' to allow a new pool to be

            created, but to prevent updating an existing pool. Other values will
            be

            ignored.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function create(resourceGroupName, accountName, poolName, parameters,
        options, optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#updateWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#updateWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      updateWithHttpOperationResponse(resourceGroupName, accountName, poolName,
      parameters, options)
    summary: Updates the properties of an existing pool.
    fullName: >-
      azure-arm-batch.PoolOperations.updateWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, parameters, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Pool>} - The deserialized result object.'
        value: '{HttpOperationResponse<Pool>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: parameters
          type:
            - object
          description: >-
            Pool properties that should be updated.

            Properties that are supplied will be updated, any property not
            supplied will

            be unchanged.
        - id: parameters.displayName
          type:
            - string
          description: >-
            The display name for the pool. The

            display name need not be unique and can contain any Unicode
            characters up to

            a maximum length of 1024.
          optional: true
        - id: parameters.vmSize
          type:
            - string
          description: >-
            The size of virtual machines in the

            pool. All VMs in a pool are the same size. For information about
            available

            sizes of virtual machines for Cloud Services pools (pools created
            with

            cloudServiceConfiguration), see Sizes for Cloud Services

            (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).

            Batch supports all Cloud Services VM sizes except ExtraSmall. For

            information about available VM sizes for pools using images from the
            Virtual

            Machines Marketplace (pools created with
            virtualMachineConfiguration) see

            Sizes for Virtual Machines (Linux)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)

            or Sizes for Virtual Machines (Windows)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).

            Batch supports all Azure VM sizes except STANDARD_A0 and those with
            premium

            storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
          optional: true
        - id: parameters.deploymentConfiguration
          type:
            - object
          description: >-
            This property describes

            how the pool nodes will be deployed - using Cloud Services or
            Virtual

            Machines. Using CloudServiceConfiguration specifies that the nodes
            should be

            creating using Azure Cloud Services (PaaS), while

            VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
          optional: true
        - id: parameters.deploymentConfiguration.cloudServiceConfiguration
          type:
            - object
          description: >-
            The cloud

            service configuration for the pool. This property and

            virtualMachineConfiguration are mutually exclusive and one of the
            properties

            must be specified. This property cannot be specified if the Batch
            account

            was created with its poolAllocationMode property set to
            'UserSubscription'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.osFamily
          type:
            - string
          description: >-
            The

            Azure Guest OS family to be installed on the virtual machines in the
            pool.

            Possible values are: 2 - OS Family 2, equivalent to Windows Server
            2008 R2

            SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS
            Family 4,

            equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to
            Windows

            Server 2016. For more information, see Azure Guest OS Releases

            (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.targetOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS version to be installed on the virtual machines
            in the

            pool. The default value is * which specifies the latest operating
            system

            version for the specified OS family.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.currentOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS Version currently installed on the virtual
            machines in

            the pool. This may differ from targetOSVersion if the pool state is

            Upgrading. In this case some virtual machines may be on the
            targetOSVersion

            and some may be on the currentOSVersion during the upgrade process.
            Once all

            virtual machines have upgraded, currentOSVersion is updated to be
            the same

            as targetOSVersion.
          optional: true
        - id: parameters.deploymentConfiguration.virtualMachineConfiguration
          type:
            - object
          description: >-
            The virtual

            machine configuration for the pool. This property and

            cloudServiceConfiguration are mutually exclusive and one of the
            properties

            must be specified.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference
          type:
            - object
          description: >-
            A reference to the Azure Virtual Machines Marketplace Image or the
            custom

            Virtual Machine Image to use.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.publisher
          type:
            - string
          description: >-
            The publisher of the Azure Virtual Machines Marketplace image. For
            example,

            Canonical or MicrosoftWindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.offer
          type:
            - string
          description: >-
            The offer type of the Azure Virtual Machines Marketplace image. For
            example,

            UbuntuServer or WindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.sku
          type:
            - string
          description: >-
            The SKU of the Azure Virtual Machines Marketplace image. For
            example,

            14.04.0-LTS or 2012-R2-Datacenter.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.version
          type:
            - string
          description: >-
            The version of the Azure Virtual Machines Marketplace image. A value
            of

            'latest' can be specified to select the latest version of an image.
            If

            omitted, the default is 'latest'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.id
          type:
            - string
          description: >-
            The ARM resource identifier of the virtual machine image. Computes
            nodes of

            the pool will be created using this custom image. This is of the
            form

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

            This property is mutually exclusive with other properties. The
            virtual

            machine image must be in the same region and subscription as the
            Azure Batch

            account. For information about the firewall settings for Batch node
            agent to

            communicate with Batch service see

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

            .
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk
          type:
            - object
          description: Settings for the operating system disk of the Virtual Machine.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk.caching
          type:
            - string
          description: >-
            The type of caching to be enabled for the data disks. none - The
            caching

            mode for the disk is not enabled. readOnly - The caching mode for
            the disk

            is read only. readWrite - The caching mode for the disk is read and
            write.

            Default value is none. Possible values include: 'None', 'ReadOnly',

            'ReadWrite'
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.nodeAgentSkuId
          type:
            - string
          description: >-
            The SKU of the Batch node agent to be provisioned on compute nodes
            in the

            pool. The Batch node agent is a program that runs on each node in
            the pool,

            and provides the command-and-control interface between the node and
            the

            Batch service. There are different implementations of the node
            agent, known

            as SKUs, for different operating systems. You must specify a node
            agent SKU

            which matches the selected image reference. To get the list of
            supported

            node agent SKUs along with their list of verified image references,
            see the

            'List supported node agent SKUs' operation.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration
          type:
            - object
          description: >-
            Windows operating system settings on the virtual machine. This
            property must

            not be specified if the imageReference specifies a Linux OS image.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates
          type:
            - boolean
          description: >-
            Whether automatic updates are enabled on the virtual machine. If
            omitted,

            the default value is true.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.dataDisks
          type:
            - array
          description: >-
            The configuration for data disks attached to the comptue nodes in
            the pool.

            This property must be specified if the compute nodes in the pool
            need to

            have empty data disks attached to them.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.licenseType
          type:
            - string
          description: >-
            The type of on-premises license to be used when deploying the
            operating

            system. This only applies to images that contain the Windows
            operating

            system, and should only be used when you hold valid on-premises
            licenses for

            the nodes which will be deployed. If omitted, no on-premises
            licensing

            discount is applied. Values are:


            Windows_Server - The on-premises license is for Windows Server.

            Windows_Client - The on-premises license is for Windows Client.
          optional: true
        - id: parameters.scaleSettings
          type:
            - object
          description: |-
            Settings which configure the
            number of nodes in the pool.
          optional: true
        - id: parameters.scaleSettings.fixedScale
          type:
            - object
          description: >-
            Fixed scale settings

            for the pool. This property and autoScale are mutually exclusive and
            one of

            the properties must be specified.
          optional: true
        - id: parameters.scaleSettings.fixedScale.resizeTimeout
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The timeout for allocation of compute nodes to the pool. The default
            value

            is 15 minutes. The minimum value is 5 minutes. If you specify a
            value less

            than 5 minutes, the Batch service rejects the request with an error;
            if you

            are calling the REST API directly, the HTTP status code is 400 (Bad

            Request).
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetDedicatedNodes
          type:
            - number
          description: >-
            The desired number of dedicated compute nodes in the pool. At least
            one of

            targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetLowPriorityNodes
          type:
            - number
          description: >-
            The desired number of low-priority compute nodes in the pool. At
            least one

            of targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.nodeDeallocationOption
          type:
            - string
          description: >-
            Determines what to do with a node and its running task(s) if the
            pool size

            is decreasing. If omitted, the default value is Requeue. Possible
            values

            include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
          optional: true
        - id: parameters.scaleSettings.autoScale
          type:
            - object
          description: >-
            AutoScale settings for

            the pool. This property and fixedScale are mutually exclusive and
            one of the

            properties must be specified.
          optional: true
        - id: parameters.scaleSettings.autoScale.formula
          type:
            - string
          description: |-
            A formula for the
            desired number of compute nodes in the pool.
        - id: parameters.scaleSettings.autoScale.evaluationInterval
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The time interval at

            which to automatically adjust the pool size according to the
            autoscale

            formula. If omitted, the default value is 15 minutes (PT15M).
          optional: true
        - id: parameters.interNodeCommunication
          type:
            - string
          description: >-
            Whether the pool permits

            direct communication between nodes. This imposes restrictions on
            which nodes

            can be assigned to the pool. Enabling this value can reduce the
            chance of

            the requested number of nodes to be allocated in the pool. If not
            specified,

            this value defaults to 'Disabled'. Possible values include:
            'Enabled',

            'Disabled'
          optional: true
        - id: parameters.networkConfiguration
          type:
            - object
          description: |-
            The network configuration
            for the pool.
          optional: true
        - id: parameters.networkConfiguration.subnetId
          type:
            - string
          description: >-
            The ARM resource

            identifier of the virtual network subnet which the compute nodes of
            the pool

            will join. This is of the form

            /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

            The virtual network must be in the same region and subscription as
            the Azure

            Batch account. The specified subnet should have enough free IP
            addresses to

            accommodate the number of nodes in the pool. If the subnet doesn't
            have

            enough free IP addresses, the pool will partially allocate compute
            nodes,

            and a resize error will occur. The 'MicrosoftAzureBatch' service
            principal

            must have the 'Classic Virtual Machine Contributor' Role-Based
            Access

            Control (RBAC) role for the specified VNet. The specified subnet
            must allow

            communication from the Azure Batch service to be able to schedule
            tasks on

            the compute nodes. This can be verified by checking if the specified
            VNet

            has any associated Network Security Groups (NSG). If communication
            to the

            compute nodes in the specified subnet is denied by an NSG, then the
            Batch

            service will set the state of the compute nodes to unusable. For
            pools

            created via virtualMachineConfiguration the Batch account must have

            poolAllocationMode userSubscription in order to use a VNet. If the
            specified

            VNet has any associated Network Security Groups (NSG), then a few
            reserved

            system ports must be enabled for inbound communication. For pools
            created

            with a virtual machine configuration, enable ports 29876 and 29877,
            as well

            as port 22 for Linux and port 3389 for Windows. For pools created
            with a

            cloud service configuration, enable ports 10100, 20100, and 30100.
            Also

            enable outbound connections to Azure Storage on port 443. For more
            details

            see:

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
          optional: true
        - id: parameters.networkConfiguration.endpointConfiguration
          type:
            - object
          description: |-
            The
            configuration for endpoints on compute nodes in the Batch pool. Pool
            endpoint configuration is only supported on pools with the
            virtualMachineConfiguration property.
          optional: true
        - id: >-
            parameters.networkConfiguration.endpointConfiguration.inboundNatPools
          type:
            - array
          description: >-
            A list

            of inbound NAT pools that can be used to address specific ports on
            an

            individual compute node externally. The maximum number of inbound
            NAT pools

            per Batch pool is 5. If the maximum number of inbound NAT pools is
            exceeded

            the request fails with HTTP status code 400.
        - id: parameters.maxTasksPerNode
          type:
            - number
          description: |-
            The maximum number of tasks
            that can run concurrently on a single compute node in the pool.
          optional: true
        - id: parameters.taskSchedulingPolicy
          type:
            - object
          description: |-
            How tasks are distributed
            across compute nodes in a pool.
          optional: true
        - id: parameters.taskSchedulingPolicy.nodeFillType
          type:
            - string
          description: |-
            How tasks
            should be distributed across compute nodes. Possible values include:
            'Spread', 'Pack'
        - id: parameters.userAccounts
          type:
            - array
          description: |-
            The list of user accounts to be
            created on each node in the pool.
          optional: true
        - id: parameters.metadata
          type:
            - array
          description: >-
            A list of name-value pairs associated

            with the pool as metadata. The Batch service does not assign any
            meaning to

            metadata; it is solely for the use of user code.
          optional: true
        - id: parameters.startTask
          type:
            - object
          description: >-
            A task specified to run on each

            compute node as it joins the pool. In an PATCH (update) operation,
            this

            property can be set to an empty object to remove the start task from
            the

            pool.
          optional: true
        - id: parameters.startTask.commandLine
          type:
            - string
          description: >-
            The command line of the

            start task. The command line does not run under a shell, and
            therefore

            cannot take advantage of shell features such as environment variable

            expansion. If you want to take advantage of such features, you
            should invoke

            the shell in the command line, for example using "cmd /c MyCommand"
            in

            Windows or "/bin/sh -c MyCommand" in Linux. Required if any other
            properties

            of the startTask are specified.
          optional: true
        - id: parameters.startTask.resourceFiles
          type:
            - array
          description: >-
            A list of files that the

            Batch service will download to the compute node before running the
            command

            line.
          optional: true
        - id: parameters.startTask.environmentSettings
          type:
            - array
          description: |-
            A list of
            environment variable settings for the start task.
          optional: true
        - id: parameters.startTask.userIdentity
          type:
            - object
          description: >-
            The user identity under

            which the start task runs. If omitted, the task runs as a
            non-administrative

            user unique to the task.
          optional: true
        - id: parameters.startTask.userIdentity.userName
          type:
            - string
          description: >-
            The name of the

            user identity under which the task is run. The userName and autoUser

            properties are mutually exclusive; you must specify one but not
            both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser
          type:
            - object
          description: >-
            The auto user

            under which the task is run. The userName and autoUser properties
            are

            mutually exclusive; you must specify one but not both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.scope
          type:
            - string
          description: >-
            The scope

            for the auto user pool - specifies that the task runs as the common
            auto

            user account which is created on every node in a pool. task -
            specifies that

            the service should create a new user for the task. The default value
            is

            task. Possible values include: 'Task', 'Pool'
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.elevationLevel
          type:
            - string
          description: >-
            The elevation level of the auto user. nonAdmin - The auto user is a
            standard

            user without elevated access. admin - The auto user is a user with
            elevated

            access and operates with full Administrator permissions. The default
            value

            is nonAdmin. Possible values include: 'NonAdmin', 'Admin'
          optional: true
        - id: parameters.startTask.maxTaskRetryCount
          type:
            - number
          description: >-
            The maximum number

            of times the task may be retried. The Batch service retries a task
            if its

            exit code is nonzero. Note that this value specifically controls the
            number

            of retries. The Batch service will try the task once, and may then
            retry up

            to this limit. For example, if the maximum retry count is 3, Batch
            tries the

            task up to 4 times (one initial try and 3 retries). If the maximum
            retry

            count is 0, the Batch service does not retry the task. If the
            maximum retry

            count is -1, the Batch service retries the task without limit.
          optional: true
        - id: parameters.startTask.waitForSuccess
          type:
            - boolean
          description: >-
            Whether the Batch

            service should wait for the start task to complete successfully
            (that is, to

            exit with exit code 0) before scheduling any tasks on the compute
            node. If

            true and the start task fails on a compute node, the Batch service
            retries

            the start task up to its maximum retry count (maxTaskRetryCount). If
            the

            task has still not completed successfully after all retries, then
            the Batch

            service marks the compute node unusable, and will not schedule tasks
            to it.

            This condition can be detected via the node state and scheduling
            error

            detail. If false, the Batch service will not wait for the start task
            to

            complete. In this case, other tasks can start executing on the
            compute node

            while the start task is still running; and even if the start task
            fails, new

            tasks will continue to be scheduled on the node. The default is
            false.
          optional: true
        - id: parameters.certificates
          type:
            - array
          description: >-
            The list of certificates to be

            installed on each compute node in the pool. For Windows compute
            nodes, the

            Batch service installs the certificates to the specified certificate
            store

            and location. For Linux compute nodes, the certificates are stored
            in a

            directory inside the task working directory and an environment
            variable

            AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this

            location. For certificates with visibility of 'remoteUser', a
            'certs'

            directory is created in the user's home directory (e.g.,

            /home/{user-name}/certs) and certificates are placed in that
            directory.
          optional: true
        - id: parameters.applicationPackages
          type:
            - array
          description: >-
            The list of application

            packages to be installed on each compute node in the pool. Changes
            to

            application packages affect all new compute nodes joining the pool,
            but do

            not affect compute nodes that are already in the pool until they are

            rebooted or reimaged.
          optional: true
        - id: parameters.applicationLicenses
          type:
            - array
          description: >-
            The list of application

            licenses the Batch service will make available on each compute node
            in the

            pool. The list of application licenses must be a subset of available
            Batch

            service application licenses. If a license is requested which is not

            supported, pool creation will fail.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.ifMatch
          type:
            - string
          description: |-
            The entity state (ETag) version of the
            pool to update. This value can be omitted or set to "*" to apply the
            operation unconditionally.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function updateWithHttpOperationResponse(resourceGroupName, accountName,
        poolName, parameters, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#update'
    id: 'azure-arm-batch.PoolOperations#update'
    parent: azure-arm-batch.PoolOperations
    name: >-
      update(resourceGroupName, accountName, poolName, parameters, options,
      optionalCallback)
    summary: Updates the properties of an existing pool.
    fullName: >-
      azure-arm-batch.PoolOperations.update(resourceGroupName, accountName,
      poolName, parameters, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Pool} - The deserialized result object.'
        value: '{Pool} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: parameters
          type:
            - object
          description: >-
            Pool properties that should be updated.

            Properties that are supplied will be updated, any property not
            supplied will

            be unchanged.
        - id: parameters.displayName
          type:
            - string
          description: >-
            The display name for the pool. The

            display name need not be unique and can contain any Unicode
            characters up to

            a maximum length of 1024.
          optional: true
        - id: parameters.vmSize
          type:
            - string
          description: >-
            The size of virtual machines in the

            pool. All VMs in a pool are the same size. For information about
            available

            sizes of virtual machines for Cloud Services pools (pools created
            with

            cloudServiceConfiguration), see Sizes for Cloud Services

            (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).

            Batch supports all Cloud Services VM sizes except ExtraSmall. For

            information about available VM sizes for pools using images from the
            Virtual

            Machines Marketplace (pools created with
            virtualMachineConfiguration) see

            Sizes for Virtual Machines (Linux)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)

            or Sizes for Virtual Machines (Windows)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).

            Batch supports all Azure VM sizes except STANDARD_A0 and those with
            premium

            storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
          optional: true
        - id: parameters.deploymentConfiguration
          type:
            - object
          description: >-
            This property describes

            how the pool nodes will be deployed - using Cloud Services or
            Virtual

            Machines. Using CloudServiceConfiguration specifies that the nodes
            should be

            creating using Azure Cloud Services (PaaS), while

            VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
          optional: true
        - id: parameters.deploymentConfiguration.cloudServiceConfiguration
          type:
            - object
          description: >-
            The cloud

            service configuration for the pool. This property and

            virtualMachineConfiguration are mutually exclusive and one of the
            properties

            must be specified. This property cannot be specified if the Batch
            account

            was created with its poolAllocationMode property set to
            'UserSubscription'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.osFamily
          type:
            - string
          description: >-
            The

            Azure Guest OS family to be installed on the virtual machines in the
            pool.

            Possible values are: 2 - OS Family 2, equivalent to Windows Server
            2008 R2

            SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS
            Family 4,

            equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to
            Windows

            Server 2016. For more information, see Azure Guest OS Releases

            (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.targetOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS version to be installed on the virtual machines
            in the

            pool. The default value is * which specifies the latest operating
            system

            version for the specified OS family.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.currentOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS Version currently installed on the virtual
            machines in

            the pool. This may differ from targetOSVersion if the pool state is

            Upgrading. In this case some virtual machines may be on the
            targetOSVersion

            and some may be on the currentOSVersion during the upgrade process.
            Once all

            virtual machines have upgraded, currentOSVersion is updated to be
            the same

            as targetOSVersion.
          optional: true
        - id: parameters.deploymentConfiguration.virtualMachineConfiguration
          type:
            - object
          description: >-
            The virtual

            machine configuration for the pool. This property and

            cloudServiceConfiguration are mutually exclusive and one of the
            properties

            must be specified.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference
          type:
            - object
          description: >-
            A reference to the Azure Virtual Machines Marketplace Image or the
            custom

            Virtual Machine Image to use.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.publisher
          type:
            - string
          description: >-
            The publisher of the Azure Virtual Machines Marketplace image. For
            example,

            Canonical or MicrosoftWindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.offer
          type:
            - string
          description: >-
            The offer type of the Azure Virtual Machines Marketplace image. For
            example,

            UbuntuServer or WindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.sku
          type:
            - string
          description: >-
            The SKU of the Azure Virtual Machines Marketplace image. For
            example,

            14.04.0-LTS or 2012-R2-Datacenter.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.version
          type:
            - string
          description: >-
            The version of the Azure Virtual Machines Marketplace image. A value
            of

            'latest' can be specified to select the latest version of an image.
            If

            omitted, the default is 'latest'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.id
          type:
            - string
          description: >-
            The ARM resource identifier of the virtual machine image. Computes
            nodes of

            the pool will be created using this custom image. This is of the
            form

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

            This property is mutually exclusive with other properties. The
            virtual

            machine image must be in the same region and subscription as the
            Azure Batch

            account. For information about the firewall settings for Batch node
            agent to

            communicate with Batch service see

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

            .
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk
          type:
            - object
          description: Settings for the operating system disk of the Virtual Machine.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk.caching
          type:
            - string
          description: >-
            The type of caching to be enabled for the data disks. none - The
            caching

            mode for the disk is not enabled. readOnly - The caching mode for
            the disk

            is read only. readWrite - The caching mode for the disk is read and
            write.

            Default value is none. Possible values include: 'None', 'ReadOnly',

            'ReadWrite'
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.nodeAgentSkuId
          type:
            - string
          description: >-
            The SKU of the Batch node agent to be provisioned on compute nodes
            in the

            pool. The Batch node agent is a program that runs on each node in
            the pool,

            and provides the command-and-control interface between the node and
            the

            Batch service. There are different implementations of the node
            agent, known

            as SKUs, for different operating systems. You must specify a node
            agent SKU

            which matches the selected image reference. To get the list of
            supported

            node agent SKUs along with their list of verified image references,
            see the

            'List supported node agent SKUs' operation.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration
          type:
            - object
          description: >-
            Windows operating system settings on the virtual machine. This
            property must

            not be specified if the imageReference specifies a Linux OS image.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates
          type:
            - boolean
          description: >-
            Whether automatic updates are enabled on the virtual machine. If
            omitted,

            the default value is true.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.dataDisks
          type:
            - array
          description: >-
            The configuration for data disks attached to the comptue nodes in
            the pool.

            This property must be specified if the compute nodes in the pool
            need to

            have empty data disks attached to them.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.licenseType
          type:
            - string
          description: >-
            The type of on-premises license to be used when deploying the
            operating

            system. This only applies to images that contain the Windows
            operating

            system, and should only be used when you hold valid on-premises
            licenses for

            the nodes which will be deployed. If omitted, no on-premises
            licensing

            discount is applied. Values are:


            Windows_Server - The on-premises license is for Windows Server.

            Windows_Client - The on-premises license is for Windows Client.
          optional: true
        - id: parameters.scaleSettings
          type:
            - object
          description: |-
            Settings which configure the
            number of nodes in the pool.
          optional: true
        - id: parameters.scaleSettings.fixedScale
          type:
            - object
          description: >-
            Fixed scale settings

            for the pool. This property and autoScale are mutually exclusive and
            one of

            the properties must be specified.
          optional: true
        - id: parameters.scaleSettings.fixedScale.resizeTimeout
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The timeout for allocation of compute nodes to the pool. The default
            value

            is 15 minutes. The minimum value is 5 minutes. If you specify a
            value less

            than 5 minutes, the Batch service rejects the request with an error;
            if you

            are calling the REST API directly, the HTTP status code is 400 (Bad

            Request).
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetDedicatedNodes
          type:
            - number
          description: >-
            The desired number of dedicated compute nodes in the pool. At least
            one of

            targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetLowPriorityNodes
          type:
            - number
          description: >-
            The desired number of low-priority compute nodes in the pool. At
            least one

            of targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.nodeDeallocationOption
          type:
            - string
          description: >-
            Determines what to do with a node and its running task(s) if the
            pool size

            is decreasing. If omitted, the default value is Requeue. Possible
            values

            include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
          optional: true
        - id: parameters.scaleSettings.autoScale
          type:
            - object
          description: >-
            AutoScale settings for

            the pool. This property and fixedScale are mutually exclusive and
            one of the

            properties must be specified.
          optional: true
        - id: parameters.scaleSettings.autoScale.formula
          type:
            - string
          description: |-
            A formula for the
            desired number of compute nodes in the pool.
        - id: parameters.scaleSettings.autoScale.evaluationInterval
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The time interval at

            which to automatically adjust the pool size according to the
            autoscale

            formula. If omitted, the default value is 15 minutes (PT15M).
          optional: true
        - id: parameters.interNodeCommunication
          type:
            - string
          description: >-
            Whether the pool permits

            direct communication between nodes. This imposes restrictions on
            which nodes

            can be assigned to the pool. Enabling this value can reduce the
            chance of

            the requested number of nodes to be allocated in the pool. If not
            specified,

            this value defaults to 'Disabled'. Possible values include:
            'Enabled',

            'Disabled'
          optional: true
        - id: parameters.networkConfiguration
          type:
            - object
          description: |-
            The network configuration
            for the pool.
          optional: true
        - id: parameters.networkConfiguration.subnetId
          type:
            - string
          description: >-
            The ARM resource

            identifier of the virtual network subnet which the compute nodes of
            the pool

            will join. This is of the form

            /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

            The virtual network must be in the same region and subscription as
            the Azure

            Batch account. The specified subnet should have enough free IP
            addresses to

            accommodate the number of nodes in the pool. If the subnet doesn't
            have

            enough free IP addresses, the pool will partially allocate compute
            nodes,

            and a resize error will occur. The 'MicrosoftAzureBatch' service
            principal

            must have the 'Classic Virtual Machine Contributor' Role-Based
            Access

            Control (RBAC) role for the specified VNet. The specified subnet
            must allow

            communication from the Azure Batch service to be able to schedule
            tasks on

            the compute nodes. This can be verified by checking if the specified
            VNet

            has any associated Network Security Groups (NSG). If communication
            to the

            compute nodes in the specified subnet is denied by an NSG, then the
            Batch

            service will set the state of the compute nodes to unusable. For
            pools

            created via virtualMachineConfiguration the Batch account must have

            poolAllocationMode userSubscription in order to use a VNet. If the
            specified

            VNet has any associated Network Security Groups (NSG), then a few
            reserved

            system ports must be enabled for inbound communication. For pools
            created

            with a virtual machine configuration, enable ports 29876 and 29877,
            as well

            as port 22 for Linux and port 3389 for Windows. For pools created
            with a

            cloud service configuration, enable ports 10100, 20100, and 30100.
            Also

            enable outbound connections to Azure Storage on port 443. For more
            details

            see:

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
          optional: true
        - id: parameters.networkConfiguration.endpointConfiguration
          type:
            - object
          description: |-
            The
            configuration for endpoints on compute nodes in the Batch pool. Pool
            endpoint configuration is only supported on pools with the
            virtualMachineConfiguration property.
          optional: true
        - id: >-
            parameters.networkConfiguration.endpointConfiguration.inboundNatPools
          type:
            - array
          description: >-
            A list

            of inbound NAT pools that can be used to address specific ports on
            an

            individual compute node externally. The maximum number of inbound
            NAT pools

            per Batch pool is 5. If the maximum number of inbound NAT pools is
            exceeded

            the request fails with HTTP status code 400.
        - id: parameters.maxTasksPerNode
          type:
            - number
          description: |-
            The maximum number of tasks
            that can run concurrently on a single compute node in the pool.
          optional: true
        - id: parameters.taskSchedulingPolicy
          type:
            - object
          description: |-
            How tasks are distributed
            across compute nodes in a pool.
          optional: true
        - id: parameters.taskSchedulingPolicy.nodeFillType
          type:
            - string
          description: |-
            How tasks
            should be distributed across compute nodes. Possible values include:
            'Spread', 'Pack'
        - id: parameters.userAccounts
          type:
            - array
          description: |-
            The list of user accounts to be
            created on each node in the pool.
          optional: true
        - id: parameters.metadata
          type:
            - array
          description: >-
            A list of name-value pairs associated

            with the pool as metadata. The Batch service does not assign any
            meaning to

            metadata; it is solely for the use of user code.
          optional: true
        - id: parameters.startTask
          type:
            - object
          description: >-
            A task specified to run on each

            compute node as it joins the pool. In an PATCH (update) operation,
            this

            property can be set to an empty object to remove the start task from
            the

            pool.
          optional: true
        - id: parameters.startTask.commandLine
          type:
            - string
          description: >-
            The command line of the

            start task. The command line does not run under a shell, and
            therefore

            cannot take advantage of shell features such as environment variable

            expansion. If you want to take advantage of such features, you
            should invoke

            the shell in the command line, for example using "cmd /c MyCommand"
            in

            Windows or "/bin/sh -c MyCommand" in Linux. Required if any other
            properties

            of the startTask are specified.
          optional: true
        - id: parameters.startTask.resourceFiles
          type:
            - array
          description: >-
            A list of files that the

            Batch service will download to the compute node before running the
            command

            line.
          optional: true
        - id: parameters.startTask.environmentSettings
          type:
            - array
          description: |-
            A list of
            environment variable settings for the start task.
          optional: true
        - id: parameters.startTask.userIdentity
          type:
            - object
          description: >-
            The user identity under

            which the start task runs. If omitted, the task runs as a
            non-administrative

            user unique to the task.
          optional: true
        - id: parameters.startTask.userIdentity.userName
          type:
            - string
          description: >-
            The name of the

            user identity under which the task is run. The userName and autoUser

            properties are mutually exclusive; you must specify one but not
            both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser
          type:
            - object
          description: >-
            The auto user

            under which the task is run. The userName and autoUser properties
            are

            mutually exclusive; you must specify one but not both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.scope
          type:
            - string
          description: >-
            The scope

            for the auto user pool - specifies that the task runs as the common
            auto

            user account which is created on every node in a pool. task -
            specifies that

            the service should create a new user for the task. The default value
            is

            task. Possible values include: 'Task', 'Pool'
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.elevationLevel
          type:
            - string
          description: >-
            The elevation level of the auto user. nonAdmin - The auto user is a
            standard

            user without elevated access. admin - The auto user is a user with
            elevated

            access and operates with full Administrator permissions. The default
            value

            is nonAdmin. Possible values include: 'NonAdmin', 'Admin'
          optional: true
        - id: parameters.startTask.maxTaskRetryCount
          type:
            - number
          description: >-
            The maximum number

            of times the task may be retried. The Batch service retries a task
            if its

            exit code is nonzero. Note that this value specifically controls the
            number

            of retries. The Batch service will try the task once, and may then
            retry up

            to this limit. For example, if the maximum retry count is 3, Batch
            tries the

            task up to 4 times (one initial try and 3 retries). If the maximum
            retry

            count is 0, the Batch service does not retry the task. If the
            maximum retry

            count is -1, the Batch service retries the task without limit.
          optional: true
        - id: parameters.startTask.waitForSuccess
          type:
            - boolean
          description: >-
            Whether the Batch

            service should wait for the start task to complete successfully
            (that is, to

            exit with exit code 0) before scheduling any tasks on the compute
            node. If

            true and the start task fails on a compute node, the Batch service
            retries

            the start task up to its maximum retry count (maxTaskRetryCount). If
            the

            task has still not completed successfully after all retries, then
            the Batch

            service marks the compute node unusable, and will not schedule tasks
            to it.

            This condition can be detected via the node state and scheduling
            error

            detail. If false, the Batch service will not wait for the start task
            to

            complete. In this case, other tasks can start executing on the
            compute node

            while the start task is still running; and even if the start task
            fails, new

            tasks will continue to be scheduled on the node. The default is
            false.
          optional: true
        - id: parameters.certificates
          type:
            - array
          description: >-
            The list of certificates to be

            installed on each compute node in the pool. For Windows compute
            nodes, the

            Batch service installs the certificates to the specified certificate
            store

            and location. For Linux compute nodes, the certificates are stored
            in a

            directory inside the task working directory and an environment
            variable

            AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this

            location. For certificates with visibility of 'remoteUser', a
            'certs'

            directory is created in the user's home directory (e.g.,

            /home/{user-name}/certs) and certificates are placed in that
            directory.
          optional: true
        - id: parameters.applicationPackages
          type:
            - array
          description: >-
            The list of application

            packages to be installed on each compute node in the pool. Changes
            to

            application packages affect all new compute nodes joining the pool,
            but do

            not affect compute nodes that are already in the pool until they are

            rebooted or reimaged.
          optional: true
        - id: parameters.applicationLicenses
          type:
            - array
          description: >-
            The list of application

            licenses the Batch service will make available on each compute node
            in the

            pool. The list of application licenses must be a subset of available
            Batch

            service application licenses. If a license is requested which is not

            supported, pool creation will fail.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.ifMatch
          type:
            - string
          description: |-
            The entity state (ETag) version of the
            pool to update. This value can be omitted or set to "*" to apply the
            operation unconditionally.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function update(resourceGroupName, accountName, poolName, parameters,
        options, optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#deleteMethodWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#deleteMethodWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      deleteMethodWithHttpOperationResponse(resourceGroupName, accountName,
      poolName, options)
    summary: Deletes the specified pool.
    fullName: >-
      azure-arm-batch.PoolOperations.deleteMethodWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function deleteMethodWithHttpOperationResponse(resourceGroupName,
        accountName, poolName, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#deleteMethod'
    id: 'azure-arm-batch.PoolOperations#deleteMethod'
    parent: azure-arm-batch.PoolOperations
    name: >-
      deleteMethod(resourceGroupName, accountName, poolName, options,
      optionalCallback)
    summary: Deletes the specified pool.
    fullName: >-
      azure-arm-batch.PoolOperations.deleteMethod(resourceGroupName,
      accountName, poolName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function deleteMethod(resourceGroupName, accountName, poolName, options,
        optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#getWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#getWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      getWithHttpOperationResponse(resourceGroupName, accountName, poolName,
      options)
    summary: Gets information about the specified pool.
    fullName: >-
      azure-arm-batch.PoolOperations.getWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Pool>} - The deserialized result object.'
        value: '{HttpOperationResponse<Pool>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getWithHttpOperationResponse(resourceGroupName, accountName,
        poolName, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#get'
    id: 'azure-arm-batch.PoolOperations#get'
    parent: azure-arm-batch.PoolOperations
    name: 'get(resourceGroupName, accountName, poolName, options, optionalCallback)'
    summary: Gets information about the specified pool.
    fullName: >-
      azure-arm-batch.PoolOperations.get(resourceGroupName, accountName,
      poolName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Pool} - The deserialized result object.'
        value: '{Pool} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function get(resourceGroupName, accountName, poolName, options,
        optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#disableAutoScaleWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#disableAutoScaleWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      disableAutoScaleWithHttpOperationResponse(resourceGroupName, accountName,
      poolName, options)
    summary: Disables automatic scaling for a pool.
    fullName: >-
      azure-arm-batch.PoolOperations.disableAutoScaleWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Pool>} - The deserialized result object.'
        value: '{HttpOperationResponse<Pool>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function disableAutoScaleWithHttpOperationResponse(resourceGroupName,
        accountName, poolName, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#disableAutoScale'
    id: 'azure-arm-batch.PoolOperations#disableAutoScale'
    parent: azure-arm-batch.PoolOperations
    name: >-
      disableAutoScale(resourceGroupName, accountName, poolName, options,
      optionalCallback)
    summary: Disables automatic scaling for a pool.
    fullName: >-
      azure-arm-batch.PoolOperations.disableAutoScale(resourceGroupName,
      accountName, poolName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Pool} - The deserialized result object.'
        value: '{Pool} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function disableAutoScale(resourceGroupName, accountName, poolName,
        options, optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#stopResizeWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#stopResizeWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      stopResizeWithHttpOperationResponse(resourceGroupName, accountName,
      poolName, options)
    summary: >-
      Stops an ongoing resize operation on the pool.


      This does not restore the pool to its previous state before the resize

      operation: it only stops any further changes being made, and the pool

      maintains its current state. After stopping, the pool stabilizes at the

      number of nodes it was at when the stop operation was done. During the
      stop

      operation, the pool allocation state changes first to stopping and then to

      steady. A resize operation need not be an explicit resize pool request;
      this

      API can also be used to halt the initial sizing of the pool when it is

      created.
    fullName: >-
      azure-arm-batch.PoolOperations.stopResizeWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Pool>} - The deserialized result object.'
        value: '{HttpOperationResponse<Pool>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function stopResizeWithHttpOperationResponse(resourceGroupName,
        accountName, poolName, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#stopResize'
    id: 'azure-arm-batch.PoolOperations#stopResize'
    parent: azure-arm-batch.PoolOperations
    name: >-
      stopResize(resourceGroupName, accountName, poolName, options,
      optionalCallback)
    summary: >-
      Stops an ongoing resize operation on the pool.


      This does not restore the pool to its previous state before the resize

      operation: it only stops any further changes being made, and the pool

      maintains its current state. After stopping, the pool stabilizes at the

      number of nodes it was at when the stop operation was done. During the
      stop

      operation, the pool allocation state changes first to stopping and then to

      steady. A resize operation need not be an explicit resize pool request;
      this

      API can also be used to halt the initial sizing of the pool when it is

      created.
    fullName: >-
      azure-arm-batch.PoolOperations.stopResize(resourceGroupName, accountName,
      poolName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Pool} - The deserialized result object.'
        value: '{Pool} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function stopResize(resourceGroupName, accountName, poolName, options,
        optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#beginCreateWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#beginCreateWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      beginCreateWithHttpOperationResponse(resourceGroupName, accountName,
      poolName, parameters, options)
    summary: Creates a new pool inside the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.beginCreateWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, parameters, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<Pool>} - The deserialized result object.'
        value: '{HttpOperationResponse<Pool>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: parameters
          type:
            - object
          description: Additional parameters for pool creation.
        - id: parameters.displayName
          type:
            - string
          description: >-
            The display name for the pool. The

            display name need not be unique and can contain any Unicode
            characters up to

            a maximum length of 1024.
          optional: true
        - id: parameters.vmSize
          type:
            - string
          description: >-
            The size of virtual machines in the

            pool. All VMs in a pool are the same size. For information about
            available

            sizes of virtual machines for Cloud Services pools (pools created
            with

            cloudServiceConfiguration), see Sizes for Cloud Services

            (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).

            Batch supports all Cloud Services VM sizes except ExtraSmall. For

            information about available VM sizes for pools using images from the
            Virtual

            Machines Marketplace (pools created with
            virtualMachineConfiguration) see

            Sizes for Virtual Machines (Linux)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)

            or Sizes for Virtual Machines (Windows)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).

            Batch supports all Azure VM sizes except STANDARD_A0 and those with
            premium

            storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
          optional: true
        - id: parameters.deploymentConfiguration
          type:
            - object
          description: >-
            This property describes

            how the pool nodes will be deployed - using Cloud Services or
            Virtual

            Machines. Using CloudServiceConfiguration specifies that the nodes
            should be

            creating using Azure Cloud Services (PaaS), while

            VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
          optional: true
        - id: parameters.deploymentConfiguration.cloudServiceConfiguration
          type:
            - object
          description: >-
            The cloud

            service configuration for the pool. This property and

            virtualMachineConfiguration are mutually exclusive and one of the
            properties

            must be specified. This property cannot be specified if the Batch
            account

            was created with its poolAllocationMode property set to
            'UserSubscription'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.osFamily
          type:
            - string
          description: >-
            The

            Azure Guest OS family to be installed on the virtual machines in the
            pool.

            Possible values are: 2 - OS Family 2, equivalent to Windows Server
            2008 R2

            SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS
            Family 4,

            equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to
            Windows

            Server 2016. For more information, see Azure Guest OS Releases

            (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.targetOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS version to be installed on the virtual machines
            in the

            pool. The default value is * which specifies the latest operating
            system

            version for the specified OS family.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.currentOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS Version currently installed on the virtual
            machines in

            the pool. This may differ from targetOSVersion if the pool state is

            Upgrading. In this case some virtual machines may be on the
            targetOSVersion

            and some may be on the currentOSVersion during the upgrade process.
            Once all

            virtual machines have upgraded, currentOSVersion is updated to be
            the same

            as targetOSVersion.
          optional: true
        - id: parameters.deploymentConfiguration.virtualMachineConfiguration
          type:
            - object
          description: >-
            The virtual

            machine configuration for the pool. This property and

            cloudServiceConfiguration are mutually exclusive and one of the
            properties

            must be specified.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference
          type:
            - object
          description: >-
            A reference to the Azure Virtual Machines Marketplace Image or the
            custom

            Virtual Machine Image to use.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.publisher
          type:
            - string
          description: >-
            The publisher of the Azure Virtual Machines Marketplace image. For
            example,

            Canonical or MicrosoftWindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.offer
          type:
            - string
          description: >-
            The offer type of the Azure Virtual Machines Marketplace image. For
            example,

            UbuntuServer or WindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.sku
          type:
            - string
          description: >-
            The SKU of the Azure Virtual Machines Marketplace image. For
            example,

            14.04.0-LTS or 2012-R2-Datacenter.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.version
          type:
            - string
          description: >-
            The version of the Azure Virtual Machines Marketplace image. A value
            of

            'latest' can be specified to select the latest version of an image.
            If

            omitted, the default is 'latest'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.id
          type:
            - string
          description: >-
            The ARM resource identifier of the virtual machine image. Computes
            nodes of

            the pool will be created using this custom image. This is of the
            form

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

            This property is mutually exclusive with other properties. The
            virtual

            machine image must be in the same region and subscription as the
            Azure Batch

            account. For information about the firewall settings for Batch node
            agent to

            communicate with Batch service see

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

            .
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk
          type:
            - object
          description: Settings for the operating system disk of the Virtual Machine.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk.caching
          type:
            - string
          description: >-
            The type of caching to be enabled for the data disks. none - The
            caching

            mode for the disk is not enabled. readOnly - The caching mode for
            the disk

            is read only. readWrite - The caching mode for the disk is read and
            write.

            Default value is none. Possible values include: 'None', 'ReadOnly',

            'ReadWrite'
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.nodeAgentSkuId
          type:
            - string
          description: >-
            The SKU of the Batch node agent to be provisioned on compute nodes
            in the

            pool. The Batch node agent is a program that runs on each node in
            the pool,

            and provides the command-and-control interface between the node and
            the

            Batch service. There are different implementations of the node
            agent, known

            as SKUs, for different operating systems. You must specify a node
            agent SKU

            which matches the selected image reference. To get the list of
            supported

            node agent SKUs along with their list of verified image references,
            see the

            'List supported node agent SKUs' operation.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration
          type:
            - object
          description: >-
            Windows operating system settings on the virtual machine. This
            property must

            not be specified if the imageReference specifies a Linux OS image.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates
          type:
            - boolean
          description: >-
            Whether automatic updates are enabled on the virtual machine. If
            omitted,

            the default value is true.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.dataDisks
          type:
            - array
          description: >-
            The configuration for data disks attached to the comptue nodes in
            the pool.

            This property must be specified if the compute nodes in the pool
            need to

            have empty data disks attached to them.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.licenseType
          type:
            - string
          description: >-
            The type of on-premises license to be used when deploying the
            operating

            system. This only applies to images that contain the Windows
            operating

            system, and should only be used when you hold valid on-premises
            licenses for

            the nodes which will be deployed. If omitted, no on-premises
            licensing

            discount is applied. Values are:


            Windows_Server - The on-premises license is for Windows Server.

            Windows_Client - The on-premises license is for Windows Client.
          optional: true
        - id: parameters.scaleSettings
          type:
            - object
          description: |-
            Settings which configure the
            number of nodes in the pool.
          optional: true
        - id: parameters.scaleSettings.fixedScale
          type:
            - object
          description: >-
            Fixed scale settings

            for the pool. This property and autoScale are mutually exclusive and
            one of

            the properties must be specified.
          optional: true
        - id: parameters.scaleSettings.fixedScale.resizeTimeout
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The timeout for allocation of compute nodes to the pool. The default
            value

            is 15 minutes. The minimum value is 5 minutes. If you specify a
            value less

            than 5 minutes, the Batch service rejects the request with an error;
            if you

            are calling the REST API directly, the HTTP status code is 400 (Bad

            Request).
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetDedicatedNodes
          type:
            - number
          description: >-
            The desired number of dedicated compute nodes in the pool. At least
            one of

            targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetLowPriorityNodes
          type:
            - number
          description: >-
            The desired number of low-priority compute nodes in the pool. At
            least one

            of targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.nodeDeallocationOption
          type:
            - string
          description: >-
            Determines what to do with a node and its running task(s) if the
            pool size

            is decreasing. If omitted, the default value is Requeue. Possible
            values

            include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
          optional: true
        - id: parameters.scaleSettings.autoScale
          type:
            - object
          description: >-
            AutoScale settings for

            the pool. This property and fixedScale are mutually exclusive and
            one of the

            properties must be specified.
          optional: true
        - id: parameters.scaleSettings.autoScale.formula
          type:
            - string
          description: |-
            A formula for the
            desired number of compute nodes in the pool.
        - id: parameters.scaleSettings.autoScale.evaluationInterval
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The time interval at

            which to automatically adjust the pool size according to the
            autoscale

            formula. If omitted, the default value is 15 minutes (PT15M).
          optional: true
        - id: parameters.interNodeCommunication
          type:
            - string
          description: >-
            Whether the pool permits

            direct communication between nodes. This imposes restrictions on
            which nodes

            can be assigned to the pool. Enabling this value can reduce the
            chance of

            the requested number of nodes to be allocated in the pool. If not
            specified,

            this value defaults to 'Disabled'. Possible values include:
            'Enabled',

            'Disabled'
          optional: true
        - id: parameters.networkConfiguration
          type:
            - object
          description: |-
            The network configuration
            for the pool.
          optional: true
        - id: parameters.networkConfiguration.subnetId
          type:
            - string
          description: >-
            The ARM resource

            identifier of the virtual network subnet which the compute nodes of
            the pool

            will join. This is of the form

            /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

            The virtual network must be in the same region and subscription as
            the Azure

            Batch account. The specified subnet should have enough free IP
            addresses to

            accommodate the number of nodes in the pool. If the subnet doesn't
            have

            enough free IP addresses, the pool will partially allocate compute
            nodes,

            and a resize error will occur. The 'MicrosoftAzureBatch' service
            principal

            must have the 'Classic Virtual Machine Contributor' Role-Based
            Access

            Control (RBAC) role for the specified VNet. The specified subnet
            must allow

            communication from the Azure Batch service to be able to schedule
            tasks on

            the compute nodes. This can be verified by checking if the specified
            VNet

            has any associated Network Security Groups (NSG). If communication
            to the

            compute nodes in the specified subnet is denied by an NSG, then the
            Batch

            service will set the state of the compute nodes to unusable. For
            pools

            created via virtualMachineConfiguration the Batch account must have

            poolAllocationMode userSubscription in order to use a VNet. If the
            specified

            VNet has any associated Network Security Groups (NSG), then a few
            reserved

            system ports must be enabled for inbound communication. For pools
            created

            with a virtual machine configuration, enable ports 29876 and 29877,
            as well

            as port 22 for Linux and port 3389 for Windows. For pools created
            with a

            cloud service configuration, enable ports 10100, 20100, and 30100.
            Also

            enable outbound connections to Azure Storage on port 443. For more
            details

            see:

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
          optional: true
        - id: parameters.networkConfiguration.endpointConfiguration
          type:
            - object
          description: |-
            The
            configuration for endpoints on compute nodes in the Batch pool. Pool
            endpoint configuration is only supported on pools with the
            virtualMachineConfiguration property.
          optional: true
        - id: >-
            parameters.networkConfiguration.endpointConfiguration.inboundNatPools
          type:
            - array
          description: >-
            A list

            of inbound NAT pools that can be used to address specific ports on
            an

            individual compute node externally. The maximum number of inbound
            NAT pools

            per Batch pool is 5. If the maximum number of inbound NAT pools is
            exceeded

            the request fails with HTTP status code 400.
        - id: parameters.maxTasksPerNode
          type:
            - number
          description: |-
            The maximum number of tasks
            that can run concurrently on a single compute node in the pool.
          optional: true
        - id: parameters.taskSchedulingPolicy
          type:
            - object
          description: |-
            How tasks are distributed
            across compute nodes in a pool.
          optional: true
        - id: parameters.taskSchedulingPolicy.nodeFillType
          type:
            - string
          description: |-
            How tasks
            should be distributed across compute nodes. Possible values include:
            'Spread', 'Pack'
        - id: parameters.userAccounts
          type:
            - array
          description: |-
            The list of user accounts to be
            created on each node in the pool.
          optional: true
        - id: parameters.metadata
          type:
            - array
          description: >-
            A list of name-value pairs associated

            with the pool as metadata. The Batch service does not assign any
            meaning to

            metadata; it is solely for the use of user code.
          optional: true
        - id: parameters.startTask
          type:
            - object
          description: >-
            A task specified to run on each

            compute node as it joins the pool. In an PATCH (update) operation,
            this

            property can be set to an empty object to remove the start task from
            the

            pool.
          optional: true
        - id: parameters.startTask.commandLine
          type:
            - string
          description: >-
            The command line of the

            start task. The command line does not run under a shell, and
            therefore

            cannot take advantage of shell features such as environment variable

            expansion. If you want to take advantage of such features, you
            should invoke

            the shell in the command line, for example using "cmd /c MyCommand"
            in

            Windows or "/bin/sh -c MyCommand" in Linux. Required if any other
            properties

            of the startTask are specified.
          optional: true
        - id: parameters.startTask.resourceFiles
          type:
            - array
          description: >-
            A list of files that the

            Batch service will download to the compute node before running the
            command

            line.
          optional: true
        - id: parameters.startTask.environmentSettings
          type:
            - array
          description: |-
            A list of
            environment variable settings for the start task.
          optional: true
        - id: parameters.startTask.userIdentity
          type:
            - object
          description: >-
            The user identity under

            which the start task runs. If omitted, the task runs as a
            non-administrative

            user unique to the task.
          optional: true
        - id: parameters.startTask.userIdentity.userName
          type:
            - string
          description: >-
            The name of the

            user identity under which the task is run. The userName and autoUser

            properties are mutually exclusive; you must specify one but not
            both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser
          type:
            - object
          description: >-
            The auto user

            under which the task is run. The userName and autoUser properties
            are

            mutually exclusive; you must specify one but not both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.scope
          type:
            - string
          description: >-
            The scope

            for the auto user pool - specifies that the task runs as the common
            auto

            user account which is created on every node in a pool. task -
            specifies that

            the service should create a new user for the task. The default value
            is

            task. Possible values include: 'Task', 'Pool'
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.elevationLevel
          type:
            - string
          description: >-
            The elevation level of the auto user. nonAdmin - The auto user is a
            standard

            user without elevated access. admin - The auto user is a user with
            elevated

            access and operates with full Administrator permissions. The default
            value

            is nonAdmin. Possible values include: 'NonAdmin', 'Admin'
          optional: true
        - id: parameters.startTask.maxTaskRetryCount
          type:
            - number
          description: >-
            The maximum number

            of times the task may be retried. The Batch service retries a task
            if its

            exit code is nonzero. Note that this value specifically controls the
            number

            of retries. The Batch service will try the task once, and may then
            retry up

            to this limit. For example, if the maximum retry count is 3, Batch
            tries the

            task up to 4 times (one initial try and 3 retries). If the maximum
            retry

            count is 0, the Batch service does not retry the task. If the
            maximum retry

            count is -1, the Batch service retries the task without limit.
          optional: true
        - id: parameters.startTask.waitForSuccess
          type:
            - boolean
          description: >-
            Whether the Batch

            service should wait for the start task to complete successfully
            (that is, to

            exit with exit code 0) before scheduling any tasks on the compute
            node. If

            true and the start task fails on a compute node, the Batch service
            retries

            the start task up to its maximum retry count (maxTaskRetryCount). If
            the

            task has still not completed successfully after all retries, then
            the Batch

            service marks the compute node unusable, and will not schedule tasks
            to it.

            This condition can be detected via the node state and scheduling
            error

            detail. If false, the Batch service will not wait for the start task
            to

            complete. In this case, other tasks can start executing on the
            compute node

            while the start task is still running; and even if the start task
            fails, new

            tasks will continue to be scheduled on the node. The default is
            false.
          optional: true
        - id: parameters.certificates
          type:
            - array
          description: >-
            The list of certificates to be

            installed on each compute node in the pool. For Windows compute
            nodes, the

            Batch service installs the certificates to the specified certificate
            store

            and location. For Linux compute nodes, the certificates are stored
            in a

            directory inside the task working directory and an environment
            variable

            AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this

            location. For certificates with visibility of 'remoteUser', a
            'certs'

            directory is created in the user's home directory (e.g.,

            /home/{user-name}/certs) and certificates are placed in that
            directory.
          optional: true
        - id: parameters.applicationPackages
          type:
            - array
          description: >-
            The list of application

            packages to be installed on each compute node in the pool. Changes
            to

            application packages affect all new compute nodes joining the pool,
            but do

            not affect compute nodes that are already in the pool until they are

            rebooted or reimaged.
          optional: true
        - id: parameters.applicationLicenses
          type:
            - array
          description: >-
            The list of application

            licenses the Batch service will make available on each compute node
            in the

            pool. The list of application licenses must be a subset of available
            Batch

            service application licenses. If a license is requested which is not

            supported, pool creation will fail.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.ifMatch
          type:
            - string
          description: >-
            The entity state (ETag) version of the

            pool to update. A value of "*" can be used to apply the operation
            only if

            the pool already exists. If omitted, this operation will always be
            applied.
          optional: true
        - id: options.ifNoneMatch
          type:
            - string
          description: >-
            Set to '*' to allow a new pool to be

            created, but to prevent updating an existing pool. Other values will
            be

            ignored.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function beginCreateWithHttpOperationResponse(resourceGroupName,
        accountName, poolName, parameters, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#beginCreate'
    id: 'azure-arm-batch.PoolOperations#beginCreate'
    parent: azure-arm-batch.PoolOperations
    name: >-
      beginCreate(resourceGroupName, accountName, poolName, parameters, options,
      optionalCallback)
    summary: Creates a new pool inside the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.beginCreate(resourceGroupName, accountName,
      poolName, parameters, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{Pool} - The deserialized result object.'
        value: '{Pool} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link Pool} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: parameters
          type:
            - object
          description: Additional parameters for pool creation.
        - id: parameters.displayName
          type:
            - string
          description: >-
            The display name for the pool. The

            display name need not be unique and can contain any Unicode
            characters up to

            a maximum length of 1024.
          optional: true
        - id: parameters.vmSize
          type:
            - string
          description: >-
            The size of virtual machines in the

            pool. All VMs in a pool are the same size. For information about
            available

            sizes of virtual machines for Cloud Services pools (pools created
            with

            cloudServiceConfiguration), see Sizes for Cloud Services

            (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).

            Batch supports all Cloud Services VM sizes except ExtraSmall. For

            information about available VM sizes for pools using images from the
            Virtual

            Machines Marketplace (pools created with
            virtualMachineConfiguration) see

            Sizes for Virtual Machines (Linux)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)

            or Sizes for Virtual Machines (Windows)

            (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).

            Batch supports all Azure VM sizes except STANDARD_A0 and those with
            premium

            storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
          optional: true
        - id: parameters.deploymentConfiguration
          type:
            - object
          description: >-
            This property describes

            how the pool nodes will be deployed - using Cloud Services or
            Virtual

            Machines. Using CloudServiceConfiguration specifies that the nodes
            should be

            creating using Azure Cloud Services (PaaS), while

            VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
          optional: true
        - id: parameters.deploymentConfiguration.cloudServiceConfiguration
          type:
            - object
          description: >-
            The cloud

            service configuration for the pool. This property and

            virtualMachineConfiguration are mutually exclusive and one of the
            properties

            must be specified. This property cannot be specified if the Batch
            account

            was created with its poolAllocationMode property set to
            'UserSubscription'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.osFamily
          type:
            - string
          description: >-
            The

            Azure Guest OS family to be installed on the virtual machines in the
            pool.

            Possible values are: 2 - OS Family 2, equivalent to Windows Server
            2008 R2

            SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS
            Family 4,

            equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to
            Windows

            Server 2016. For more information, see Azure Guest OS Releases

            (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.targetOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS version to be installed on the virtual machines
            in the

            pool. The default value is * which specifies the latest operating
            system

            version for the specified OS family.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.cloudServiceConfiguration.currentOSVersion
          type:
            - string
          description: >-
            The Azure Guest OS Version currently installed on the virtual
            machines in

            the pool. This may differ from targetOSVersion if the pool state is

            Upgrading. In this case some virtual machines may be on the
            targetOSVersion

            and some may be on the currentOSVersion during the upgrade process.
            Once all

            virtual machines have upgraded, currentOSVersion is updated to be
            the same

            as targetOSVersion.
          optional: true
        - id: parameters.deploymentConfiguration.virtualMachineConfiguration
          type:
            - object
          description: >-
            The virtual

            machine configuration for the pool. This property and

            cloudServiceConfiguration are mutually exclusive and one of the
            properties

            must be specified.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference
          type:
            - object
          description: >-
            A reference to the Azure Virtual Machines Marketplace Image or the
            custom

            Virtual Machine Image to use.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.publisher
          type:
            - string
          description: >-
            The publisher of the Azure Virtual Machines Marketplace image. For
            example,

            Canonical or MicrosoftWindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.offer
          type:
            - string
          description: >-
            The offer type of the Azure Virtual Machines Marketplace image. For
            example,

            UbuntuServer or WindowsServer.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.sku
          type:
            - string
          description: >-
            The SKU of the Azure Virtual Machines Marketplace image. For
            example,

            14.04.0-LTS or 2012-R2-Datacenter.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.version
          type:
            - string
          description: >-
            The version of the Azure Virtual Machines Marketplace image. A value
            of

            'latest' can be specified to select the latest version of an image.
            If

            omitted, the default is 'latest'.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.imageReference.id
          type:
            - string
          description: >-
            The ARM resource identifier of the virtual machine image. Computes
            nodes of

            the pool will be created using this custom image. This is of the
            form

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}

            This property is mutually exclusive with other properties. The
            virtual

            machine image must be in the same region and subscription as the
            Azure Batch

            account. For information about the firewall settings for Batch node
            agent to

            communicate with Batch service see

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

            .
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk
          type:
            - object
          description: Settings for the operating system disk of the Virtual Machine.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.osDisk.caching
          type:
            - string
          description: >-
            The type of caching to be enabled for the data disks. none - The
            caching

            mode for the disk is not enabled. readOnly - The caching mode for
            the disk

            is read only. readWrite - The caching mode for the disk is read and
            write.

            Default value is none. Possible values include: 'None', 'ReadOnly',

            'ReadWrite'
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.nodeAgentSkuId
          type:
            - string
          description: >-
            The SKU of the Batch node agent to be provisioned on compute nodes
            in the

            pool. The Batch node agent is a program that runs on each node in
            the pool,

            and provides the command-and-control interface between the node and
            the

            Batch service. There are different implementations of the node
            agent, known

            as SKUs, for different operating systems. You must specify a node
            agent SKU

            which matches the selected image reference. To get the list of
            supported

            node agent SKUs along with their list of verified image references,
            see the

            'List supported node agent SKUs' operation.
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration
          type:
            - object
          description: >-
            Windows operating system settings on the virtual machine. This
            property must

            not be specified if the imageReference specifies a Linux OS image.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates
          type:
            - boolean
          description: >-
            Whether automatic updates are enabled on the virtual machine. If
            omitted,

            the default value is true.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.dataDisks
          type:
            - array
          description: >-
            The configuration for data disks attached to the comptue nodes in
            the pool.

            This property must be specified if the compute nodes in the pool
            need to

            have empty data disks attached to them.
          optional: true
        - id: >-
            parameters.deploymentConfiguration.virtualMachineConfiguration.licenseType
          type:
            - string
          description: >-
            The type of on-premises license to be used when deploying the
            operating

            system. This only applies to images that contain the Windows
            operating

            system, and should only be used when you hold valid on-premises
            licenses for

            the nodes which will be deployed. If omitted, no on-premises
            licensing

            discount is applied. Values are:


            Windows_Server - The on-premises license is for Windows Server.

            Windows_Client - The on-premises license is for Windows Client.
          optional: true
        - id: parameters.scaleSettings
          type:
            - object
          description: |-
            Settings which configure the
            number of nodes in the pool.
          optional: true
        - id: parameters.scaleSettings.fixedScale
          type:
            - object
          description: >-
            Fixed scale settings

            for the pool. This property and autoScale are mutually exclusive and
            one of

            the properties must be specified.
          optional: true
        - id: parameters.scaleSettings.fixedScale.resizeTimeout
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The timeout for allocation of compute nodes to the pool. The default
            value

            is 15 minutes. The minimum value is 5 minutes. If you specify a
            value less

            than 5 minutes, the Batch service rejects the request with an error;
            if you

            are calling the REST API directly, the HTTP status code is 400 (Bad

            Request).
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetDedicatedNodes
          type:
            - number
          description: >-
            The desired number of dedicated compute nodes in the pool. At least
            one of

            targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.targetLowPriorityNodes
          type:
            - number
          description: >-
            The desired number of low-priority compute nodes in the pool. At
            least one

            of targetDedicatedNodes, targetLowPriority nodes must be set.
          optional: true
        - id: parameters.scaleSettings.fixedScale.nodeDeallocationOption
          type:
            - string
          description: >-
            Determines what to do with a node and its running task(s) if the
            pool size

            is decreasing. If omitted, the default value is Requeue. Possible
            values

            include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
          optional: true
        - id: parameters.scaleSettings.autoScale
          type:
            - object
          description: >-
            AutoScale settings for

            the pool. This property and fixedScale are mutually exclusive and
            one of the

            properties must be specified.
          optional: true
        - id: parameters.scaleSettings.autoScale.formula
          type:
            - string
          description: |-
            A formula for the
            desired number of compute nodes in the pool.
        - id: parameters.scaleSettings.autoScale.evaluationInterval
          type:
            - azure-arm-batch.moment.duration
          description: >-
            The time interval at

            which to automatically adjust the pool size according to the
            autoscale

            formula. If omitted, the default value is 15 minutes (PT15M).
          optional: true
        - id: parameters.interNodeCommunication
          type:
            - string
          description: >-
            Whether the pool permits

            direct communication between nodes. This imposes restrictions on
            which nodes

            can be assigned to the pool. Enabling this value can reduce the
            chance of

            the requested number of nodes to be allocated in the pool. If not
            specified,

            this value defaults to 'Disabled'. Possible values include:
            'Enabled',

            'Disabled'
          optional: true
        - id: parameters.networkConfiguration
          type:
            - object
          description: |-
            The network configuration
            for the pool.
          optional: true
        - id: parameters.networkConfiguration.subnetId
          type:
            - string
          description: >-
            The ARM resource

            identifier of the virtual network subnet which the compute nodes of
            the pool

            will join. This is of the form

            /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.

            The virtual network must be in the same region and subscription as
            the Azure

            Batch account. The specified subnet should have enough free IP
            addresses to

            accommodate the number of nodes in the pool. If the subnet doesn't
            have

            enough free IP addresses, the pool will partially allocate compute
            nodes,

            and a resize error will occur. The 'MicrosoftAzureBatch' service
            principal

            must have the 'Classic Virtual Machine Contributor' Role-Based
            Access

            Control (RBAC) role for the specified VNet. The specified subnet
            must allow

            communication from the Azure Batch service to be able to schedule
            tasks on

            the compute nodes. This can be verified by checking if the specified
            VNet

            has any associated Network Security Groups (NSG). If communication
            to the

            compute nodes in the specified subnet is denied by an NSG, then the
            Batch

            service will set the state of the compute nodes to unusable. For
            pools

            created via virtualMachineConfiguration the Batch account must have

            poolAllocationMode userSubscription in order to use a VNet. If the
            specified

            VNet has any associated Network Security Groups (NSG), then a few
            reserved

            system ports must be enabled for inbound communication. For pools
            created

            with a virtual machine configuration, enable ports 29876 and 29877,
            as well

            as port 22 for Linux and port 3389 for Windows. For pools created
            with a

            cloud service configuration, enable ports 10100, 20100, and 30100.
            Also

            enable outbound connections to Azure Storage on port 443. For more
            details

            see:

            https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
          optional: true
        - id: parameters.networkConfiguration.endpointConfiguration
          type:
            - object
          description: |-
            The
            configuration for endpoints on compute nodes in the Batch pool. Pool
            endpoint configuration is only supported on pools with the
            virtualMachineConfiguration property.
          optional: true
        - id: >-
            parameters.networkConfiguration.endpointConfiguration.inboundNatPools
          type:
            - array
          description: >-
            A list

            of inbound NAT pools that can be used to address specific ports on
            an

            individual compute node externally. The maximum number of inbound
            NAT pools

            per Batch pool is 5. If the maximum number of inbound NAT pools is
            exceeded

            the request fails with HTTP status code 400.
        - id: parameters.maxTasksPerNode
          type:
            - number
          description: |-
            The maximum number of tasks
            that can run concurrently on a single compute node in the pool.
          optional: true
        - id: parameters.taskSchedulingPolicy
          type:
            - object
          description: |-
            How tasks are distributed
            across compute nodes in a pool.
          optional: true
        - id: parameters.taskSchedulingPolicy.nodeFillType
          type:
            - string
          description: |-
            How tasks
            should be distributed across compute nodes. Possible values include:
            'Spread', 'Pack'
        - id: parameters.userAccounts
          type:
            - array
          description: |-
            The list of user accounts to be
            created on each node in the pool.
          optional: true
        - id: parameters.metadata
          type:
            - array
          description: >-
            A list of name-value pairs associated

            with the pool as metadata. The Batch service does not assign any
            meaning to

            metadata; it is solely for the use of user code.
          optional: true
        - id: parameters.startTask
          type:
            - object
          description: >-
            A task specified to run on each

            compute node as it joins the pool. In an PATCH (update) operation,
            this

            property can be set to an empty object to remove the start task from
            the

            pool.
          optional: true
        - id: parameters.startTask.commandLine
          type:
            - string
          description: >-
            The command line of the

            start task. The command line does not run under a shell, and
            therefore

            cannot take advantage of shell features such as environment variable

            expansion. If you want to take advantage of such features, you
            should invoke

            the shell in the command line, for example using "cmd /c MyCommand"
            in

            Windows or "/bin/sh -c MyCommand" in Linux. Required if any other
            properties

            of the startTask are specified.
          optional: true
        - id: parameters.startTask.resourceFiles
          type:
            - array
          description: >-
            A list of files that the

            Batch service will download to the compute node before running the
            command

            line.
          optional: true
        - id: parameters.startTask.environmentSettings
          type:
            - array
          description: |-
            A list of
            environment variable settings for the start task.
          optional: true
        - id: parameters.startTask.userIdentity
          type:
            - object
          description: >-
            The user identity under

            which the start task runs. If omitted, the task runs as a
            non-administrative

            user unique to the task.
          optional: true
        - id: parameters.startTask.userIdentity.userName
          type:
            - string
          description: >-
            The name of the

            user identity under which the task is run. The userName and autoUser

            properties are mutually exclusive; you must specify one but not
            both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser
          type:
            - object
          description: >-
            The auto user

            under which the task is run. The userName and autoUser properties
            are

            mutually exclusive; you must specify one but not both.
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.scope
          type:
            - string
          description: >-
            The scope

            for the auto user pool - specifies that the task runs as the common
            auto

            user account which is created on every node in a pool. task -
            specifies that

            the service should create a new user for the task. The default value
            is

            task. Possible values include: 'Task', 'Pool'
          optional: true
        - id: parameters.startTask.userIdentity.autoUser.elevationLevel
          type:
            - string
          description: >-
            The elevation level of the auto user. nonAdmin - The auto user is a
            standard

            user without elevated access. admin - The auto user is a user with
            elevated

            access and operates with full Administrator permissions. The default
            value

            is nonAdmin. Possible values include: 'NonAdmin', 'Admin'
          optional: true
        - id: parameters.startTask.maxTaskRetryCount
          type:
            - number
          description: >-
            The maximum number

            of times the task may be retried. The Batch service retries a task
            if its

            exit code is nonzero. Note that this value specifically controls the
            number

            of retries. The Batch service will try the task once, and may then
            retry up

            to this limit. For example, if the maximum retry count is 3, Batch
            tries the

            task up to 4 times (one initial try and 3 retries). If the maximum
            retry

            count is 0, the Batch service does not retry the task. If the
            maximum retry

            count is -1, the Batch service retries the task without limit.
          optional: true
        - id: parameters.startTask.waitForSuccess
          type:
            - boolean
          description: >-
            Whether the Batch

            service should wait for the start task to complete successfully
            (that is, to

            exit with exit code 0) before scheduling any tasks on the compute
            node. If

            true and the start task fails on a compute node, the Batch service
            retries

            the start task up to its maximum retry count (maxTaskRetryCount). If
            the

            task has still not completed successfully after all retries, then
            the Batch

            service marks the compute node unusable, and will not schedule tasks
            to it.

            This condition can be detected via the node state and scheduling
            error

            detail. If false, the Batch service will not wait for the start task
            to

            complete. In this case, other tasks can start executing on the
            compute node

            while the start task is still running; and even if the start task
            fails, new

            tasks will continue to be scheduled on the node. The default is
            false.
          optional: true
        - id: parameters.certificates
          type:
            - array
          description: >-
            The list of certificates to be

            installed on each compute node in the pool. For Windows compute
            nodes, the

            Batch service installs the certificates to the specified certificate
            store

            and location. For Linux compute nodes, the certificates are stored
            in a

            directory inside the task working directory and an environment
            variable

            AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this

            location. For certificates with visibility of 'remoteUser', a
            'certs'

            directory is created in the user's home directory (e.g.,

            /home/{user-name}/certs) and certificates are placed in that
            directory.
          optional: true
        - id: parameters.applicationPackages
          type:
            - array
          description: >-
            The list of application

            packages to be installed on each compute node in the pool. Changes
            to

            application packages affect all new compute nodes joining the pool,
            but do

            not affect compute nodes that are already in the pool until they are

            rebooted or reimaged.
          optional: true
        - id: parameters.applicationLicenses
          type:
            - array
          description: >-
            The list of application

            licenses the Batch service will make available on each compute node
            in the

            pool. The list of application licenses must be a subset of available
            Batch

            service application licenses. If a license is requested which is not

            supported, pool creation will fail.
          optional: true
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.ifMatch
          type:
            - string
          description: >-
            The entity state (ETag) version of the

            pool to update. A value of "*" can be used to apply the operation
            only if

            the pool already exists. If omitted, this operation will always be
            applied.
          optional: true
        - id: options.ifNoneMatch
          type:
            - string
          description: >-
            Set to '*' to allow a new pool to be

            created, but to prevent updating an existing pool. Other values will
            be

            ignored.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function beginCreate(resourceGroupName, accountName, poolName,
        parameters, options, optionalCallback)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#beginDeleteMethodWithHttpOperationResponse'
    id: 'azure-arm-batch.PoolOperations#beginDeleteMethodWithHttpOperationResponse'
    parent: azure-arm-batch.PoolOperations
    name: >-
      beginDeleteMethodWithHttpOperationResponse(resourceGroupName, accountName,
      poolName, options)
    summary: Deletes the specified pool.
    fullName: >-
      azure-arm-batch.PoolOperations.beginDeleteMethodWithHttpOperationResponse(resourceGroupName,
      accountName, poolName, options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{HttpOperationResponse<null>} - The deserialized result object.'
        value: '{HttpOperationResponse<null>} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function beginDeleteMethodWithHttpOperationResponse(resourceGroupName,
        accountName, poolName, options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#beginDeleteMethod'
    id: 'azure-arm-batch.PoolOperations#beginDeleteMethod'
    parent: azure-arm-batch.PoolOperations
    name: >-
      beginDeleteMethod(resourceGroupName, accountName, poolName, options,
      optionalCallback)
    summary: Deletes the specified pool.
    fullName: >-
      azure-arm-batch.PoolOperations.beginDeleteMethod(resourceGroupName,
      accountName, poolName, options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{null} - The deserialized result object.'
        value: '{null} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group that
            contains the Batch account.
        - id: accountName
          type:
            - string
          description: The name of the Batch account.
        - id: poolName
          type:
            - string
          description: |-
            The pool name. This must be unique within the
            account.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function beginDeleteMethod(resourceGroupName, accountName, poolName,
        options, optionalCallback)
    langs:
      - js
  - uid: >-
      azure-arm-batch.PoolOperations#listByBatchAccountNextWithHttpOperationResponse
    id: >-
      azure-arm-batch.PoolOperations#listByBatchAccountNextWithHttpOperationResponse
    parent: azure-arm-batch.PoolOperations
    name: 'listByBatchAccountNextWithHttpOperationResponse(nextPageLink, options)'
    summary: Lists all of the pools in the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.listByBatchAccountNextWithHttpOperationResponse(nextPageLink,
      options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {HttpOperationResponse<ListPoolsResult>} - The deserialized result
          object.
        value: >-
          {HttpOperationResponse<ListPoolsResult>} - The deserialized result
          object.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: nextPageLink
          type:
            - string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function listByBatchAccountNextWithHttpOperationResponse(nextPageLink,
        options)
    langs:
      - js
  - uid: 'azure-arm-batch.PoolOperations#listByBatchAccountNext'
    id: 'azure-arm-batch.PoolOperations#listByBatchAccountNext'
    parent: azure-arm-batch.PoolOperations
    name: 'listByBatchAccountNext(nextPageLink, options, optionalCallback)'
    summary: Lists all of the pools in the specified account.
    fullName: >-
      azure-arm-batch.PoolOperations.listByBatchAccountNext(nextPageLink,
      options, optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ListPoolsResult} - The deserialized result object.'
        value: '{ListPoolsResult} - The deserialized result object.'
      - originalTitle: reject
        title: reject
        text: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ListPoolsResult} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
        value: |-
          {Error} - The error object.

          {function} optionalCallback(err, result, request, response)

                               {Error}  err        - The Error object if an error occurred, null otherwise.

                               {object} [result]   - The deserialized result object if an error did not occur.
                               See {@link ListPoolsResult} for more information.

                               {object} [request]  - The HTTP Request object if an error did not occur.

                               {stream} [response] - The HTTP Response stream if an error did not occur.
    type: Function
    syntax:
      parameters:
        - id: nextPageLink
          type:
            - string
          description: |-
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function listByBatchAccountNext(nextPageLink, options, optionalCallback)'
    langs:
      - js
references:
  - uid: azure-arm-batch.BatchManagementClient
    name: BatchManagementClient
    fullName: azure-arm-batch.BatchManagementClient
    isExternal: false
